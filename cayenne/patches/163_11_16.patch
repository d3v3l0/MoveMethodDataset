diff --git a/modeler/cayenne-modeler/src/main/java/org/apache/cayenne/modeler/ProjectController.java b/modeler/cayenne-modeler/src/main/java/org/apache/cayenne/modeler/ProjectController.java
old mode 100644
new mode 100755
index b442daf56..d9c3cea73
--- a/modeler/cayenne-modeler/src/main/java/org/apache/cayenne/modeler/ProjectController.java
+++ b/modeler/cayenne-modeler/src/main/java/org/apache/cayenne/modeler/ProjectController.java
@@ -35,19 +35,7 @@ import org.apache.cayenne.configuration.event.ProcedureParameterEvent;
 import org.apache.cayenne.configuration.event.ProcedureParameterListener;
 import org.apache.cayenne.configuration.event.QueryEvent;
 import org.apache.cayenne.configuration.event.QueryListener;
-import org.apache.cayenne.map.DataMap;
-import org.apache.cayenne.map.DbAttribute;
-import org.apache.cayenne.map.DbEntity;
-import org.apache.cayenne.map.DbRelationship;
-import org.apache.cayenne.map.Embeddable;
-import org.apache.cayenne.map.EmbeddableAttribute;
-import org.apache.cayenne.map.EntityResolver;
-import org.apache.cayenne.map.ObjAttribute;
-import org.apache.cayenne.map.ObjEntity;
-import org.apache.cayenne.map.ObjRelationship;
-import org.apache.cayenne.map.Procedure;
-import org.apache.cayenne.map.ProcedureParameter;
-import org.apache.cayenne.map.QueryDescriptor;
+import org.apache.cayenne.map.*;
 import org.apache.cayenne.map.event.AttributeEvent;
 import org.apache.cayenne.map.event.DbAttributeListener;
 import org.apache.cayenne.map.event.DbEntityListener;
@@ -62,11 +50,8 @@ import org.apache.cayenne.map.event.ObjAttributeListener;
 import org.apache.cayenne.map.event.ObjEntityListener;
 import org.apache.cayenne.map.event.ObjRelationshipListener;
 import org.apache.cayenne.map.event.RelationshipEvent;
-import org.apache.cayenne.modeler.action.NavigateBackwardAction;
-import org.apache.cayenne.modeler.action.NavigateForwardAction;
-import org.apache.cayenne.modeler.action.RevertAction;
-import org.apache.cayenne.modeler.action.SaveAction;
-import org.apache.cayenne.modeler.action.SaveAsAction;
+import org.apache.cayenne.modeler.action.*;
+import org.apache.cayenne.modeler.dialog.ConfirmRemoveDialog;
 import org.apache.cayenne.modeler.editor.CallbackType;
 import org.apache.cayenne.modeler.editor.ObjCallbackMethod;
 import org.apache.cayenne.modeler.event.AttributeDisplayEvent;
@@ -108,6 +93,7 @@ import org.apache.cayenne.modeler.event.RelationshipDisplayEvent;
 import org.apache.cayenne.modeler.pref.DataMapDefaults;
 import org.apache.cayenne.modeler.pref.DataNodeDefaults;
 import org.apache.cayenne.modeler.pref.ProjectStatePreferences;
+import org.apache.cayenne.modeler.undo.RemoveCallbackMethodUndoableEdit;
 import org.apache.cayenne.modeler.util.CayenneController;
 import org.apache.cayenne.modeler.util.CircularArray;
 import org.apache.cayenne.modeler.util.Comparators;
@@ -135,6 +121,27 @@ import java.util.prefs.Preferences;
  */
 public class ProjectController extends CayenneController {
 
+    public void removeMethods(ConfirmRemoveDialog dialog, ObjCallbackMethod[] methods, RemoveAction removeAction) {
+        CallbackMap callbackMap = getCurrentObjEntity().getCallbackMap();
+        CallbackType callbackType = getCurrentCallbackType();
+
+if ((methods.length == 1 && dialog.shouldDelete("callback method", methods[0].getName()))
+            || (methods.length > 1 && dialog.shouldDelete("selected callback methods"))) {
+for (ObjCallbackMethod callbackMethod : methods) {
+                callbackMap.getCallbackDescriptor(callbackType.getType()).removeCallbackMethod(callbackMethod.getName());
+
+CallbackMethodEvent ce = new CallbackMethodEvent(removeAction, null,
+callbackMethod.getName(),
+MapEvent.REMOVE);
+
+fireCallbackMethodEvent(ce);
+}
+
+Application.getInstance().getUndoManager()
+.addEdit(new RemoveCallbackMethodUndoableEdit(callbackType, methods));
+}
+    }
+
     /*
      * A snapshot of the current state of the project controller. This was added
      * so that we could support history of recent objects.
diff --git a/modeler/cayenne-modeler/src/main/java/org/apache/cayenne/modeler/action/RemoveAction.java b/modeler/cayenne-modeler/src/main/java/org/apache/cayenne/modeler/action/RemoveAction.java
old mode 100644
new mode 100755
index ce5228cb7..66940fd59
--- a/modeler/cayenne-modeler/src/main/java/org/apache/cayenne/modeler/action/RemoveAction.java
+++ b/modeler/cayenne-modeler/src/main/java/org/apache/cayenne/modeler/action/RemoveAction.java
@@ -28,7 +28,6 @@ import org.apache.cayenne.configuration.event.ProcedureEvent;
 import org.apache.cayenne.configuration.event.ProcedureParameterEvent;
 import org.apache.cayenne.configuration.event.QueryEvent;
 import org.apache.cayenne.map.Attribute;
-import org.apache.cayenne.map.CallbackMap;
 import org.apache.cayenne.map.DataMap;
 import org.apache.cayenne.map.DbAttribute;
 import org.apache.cayenne.map.DbEntity;
@@ -51,17 +50,12 @@ import org.apache.cayenne.map.event.RelationshipEvent;
 import org.apache.cayenne.modeler.Application;
 import org.apache.cayenne.modeler.ProjectController;
 import org.apache.cayenne.modeler.dialog.ConfirmRemoveDialog;
-import org.apache.cayenne.modeler.editor.CallbackType;
-import org.apache.cayenne.modeler.editor.ObjCallbackMethod;
-import org.apache.cayenne.modeler.event.CallbackMethodEvent;
 import org.apache.cayenne.modeler.undo.RemoveAttributeUndoableEdit;
-import org.apache.cayenne.modeler.undo.RemoveCallbackMethodUndoableEdit;
 import org.apache.cayenne.modeler.undo.RemoveCompoundUndoableEdit;
 import org.apache.cayenne.modeler.undo.RemoveRelationshipUndoableEdit;
 import org.apache.cayenne.modeler.undo.RemoveUndoableEdit;
 import org.apache.cayenne.modeler.util.CayenneAction;
 import org.apache.cayenne.modeler.util.ProjectUtil;
-import org.apache.cayenne.query.Query;
 import org.apache.cayenne.map.QueryDescriptor;
 
 import javax.swing.KeyStroke;
@@ -73,7 +67,6 @@ import java.awt.event.KeyEvent;
 import java.net.URL;
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Iterator;
 
 /**
  * Removes currently selected object from the project. This can be Domain, DataNode,
@@ -200,7 +193,7 @@ public class RemoveAction extends CayenneAction {
                 application.getUndoManager().addEdit(compoundEdit);
             }
         } else if(mediator.getCurrentCallbackMethods().length > 0) {
-            removeMethods(mediator, dialog, getProjectController().getCurrentCallbackMethods());
+            mediator.removeMethods(dialog, getProjectController().getCurrentCallbackMethods(), this);
         } else if(mediator.getCurrentObjRelationships().length > 0) {
       		removeObjRelationships(mediator, dialog, getProjectController().getCurrentObjRelationships());
         } else if(mediator.getCurrentDbRelationships().length > 0) {
@@ -325,28 +318,7 @@ public class RemoveAction extends CayenneAction {
 		}		
 	}
 
-	private void removeMethods(ProjectController mediator, ConfirmRemoveDialog dialog, ObjCallbackMethod[] methods) {
-    	CallbackMap callbackMap = mediator.getCurrentObjEntity().getCallbackMap();
-    	CallbackType callbackType = mediator.getCurrentCallbackType();
-
-        if ((methods.length == 1 && dialog.shouldDelete("callback method", methods[0].getName()))
-        	|| (methods.length > 1 && dialog.shouldDelete("selected callback methods"))) {
-            for (ObjCallbackMethod callbackMethod : methods) {
-            	callbackMap.getCallbackDescriptor(callbackType.getType()).removeCallbackMethod(callbackMethod.getName());
-                    
-                CallbackMethodEvent ce = new CallbackMethodEvent(this, null,
-                        callbackMethod.getName(),
-                        MapEvent.REMOVE);
-                    
-                mediator.fireCallbackMethodEvent(ce);
-            }
-            
-            Application.getInstance().getUndoManager()
-                    .addEdit(new RemoveCallbackMethodUndoableEdit(callbackType, methods));
-        }		
-	}
-
-	public void removeDataMap(DataMap map) {
+    public void removeDataMap(DataMap map) {
         ProjectController mediator = getProjectController();
         DataChannelDescriptor domain = (DataChannelDescriptor) mediator.getProject().getRootNode();
         DataMapEvent e = new DataMapEvent(Application.getFrame(), map, MapEvent.REMOVE);
