diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTStatementExpression.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTStatementExpression.java
index a656219..1d5632b 100644
--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTStatementExpression.java
+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/ast/ASTStatementExpression.java
@@ -5,6 +5,8 @@
 
 package net.sourceforge.pmd.lang.java.ast;
 
+import net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclaration;
+
 public class ASTStatementExpression extends AbstractJavaTypeNode {
     public ASTStatementExpression(int id) {
         super(id);
@@ -21,4 +23,10 @@ public class ASTStatementExpression extends AbstractJavaTypeNode {
     public Object jjtAccept(JavaParserVisitor visitor, Object data) {
         return visitor.visit(this, data);
     }
+
+    public boolean isAssignmentToFinalField() {
+        ASTName name = getFirstDescendantOfType(ASTName.class);
+        return name != null && name.getNameDeclaration() instanceof VariableNameDeclaration
+                && ((AccessNode) ((VariableNameDeclaration) name.getNameDeclaration()).getAccessNodeParent()).isFinal();
+    }
 }
diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/errorprone/NullAssignmentRule.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/errorprone/NullAssignmentRule.java
index fefd1ff..4272c94 100644
--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/errorprone/NullAssignmentRule.java
+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/errorprone/NullAssignmentRule.java
@@ -10,14 +10,11 @@ import net.sourceforge.pmd.lang.java.ast.ASTConditionalExpression;
 import net.sourceforge.pmd.lang.java.ast.ASTEqualityExpression;
 import net.sourceforge.pmd.lang.java.ast.ASTExpression;
 import net.sourceforge.pmd.lang.java.ast.ASTLambdaExpression;
-import net.sourceforge.pmd.lang.java.ast.ASTName;
 import net.sourceforge.pmd.lang.java.ast.ASTNullLiteral;
 import net.sourceforge.pmd.lang.java.ast.ASTReturnStatement;
 import net.sourceforge.pmd.lang.java.ast.ASTStatementExpression;
 import net.sourceforge.pmd.lang.java.ast.ASTVariableInitializer;
-import net.sourceforge.pmd.lang.java.ast.AccessNode;
 import net.sourceforge.pmd.lang.java.rule.AbstractJavaRule;
-import net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclaration;
 
 public class NullAssignmentRule extends AbstractJavaRule {
 
@@ -31,7 +28,7 @@ public class NullAssignmentRule extends AbstractJavaRule {
         if (node.getNthParent(5) instanceof ASTStatementExpression) {
             ASTStatementExpression n = (ASTStatementExpression) node.getNthParent(5);
 
-            if (isAssignmentToFinalField(n)) {
+            if (n.isAssignmentToFinalField()) {
                 return data;
             }
 
@@ -54,12 +51,6 @@ public class NullAssignmentRule extends AbstractJavaRule {
         return data;
     }
 
-    private boolean isAssignmentToFinalField(ASTStatementExpression n) {
-        ASTName name = n.getFirstDescendantOfType(ASTName.class);
-        return name != null && name.getNameDeclaration() instanceof VariableNameDeclaration
-                && ((AccessNode) ((VariableNameDeclaration) name.getNameDeclaration()).getAccessNodeParent()).isFinal();
-    }
-
     private boolean isBadTernary(ASTConditionalExpression ternary) {
         boolean isInitializer = false;
 
