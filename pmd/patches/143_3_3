diff --git a/pmd-jsp/src/main/java/net/sourceforge/pmd/lang/jsp/ast/ASTElExpression.java b/pmd-jsp/src/main/java/net/sourceforge/pmd/lang/jsp/ast/ASTElExpression.java
index 9b41130..2c6c9c0 100644
--- a/pmd-jsp/src/main/java/net/sourceforge/pmd/lang/jsp/ast/ASTElExpression.java
+++ b/pmd-jsp/src/main/java/net/sourceforge/pmd/lang/jsp/ast/ASTElExpression.java
@@ -21,4 +21,15 @@ public class ASTElExpression extends AbstractJspNode {
     public Object jjtAccept(JspParserVisitor visitor, Object data) {
         return visitor.visit(this, data);
     }
+
+    public boolean elOutsideTaglib() {
+        ASTElement parentASTElement = getFirstParentOfType(ASTElement.class);
+
+        boolean elInTaglib = parentASTElement != null && parentASTElement.getName() != null
+                && parentASTElement.getName().contains(":");
+
+        boolean elWithFnEscapeXml = getImage() != null && getImage().matches("^fn:escapeXml\\(.+\\)$");
+
+        return !elInTaglib && !elWithFnEscapeXml;
+    }
 }
diff --git a/pmd-jsp/src/main/java/net/sourceforge/pmd/lang/jsp/rule/security/NoUnsanitizedJSPExpressionRule.java b/pmd-jsp/src/main/java/net/sourceforge/pmd/lang/jsp/rule/security/NoUnsanitizedJSPExpressionRule.java
index a1b995d..10ecd00 100644
--- a/pmd-jsp/src/main/java/net/sourceforge/pmd/lang/jsp/rule/security/NoUnsanitizedJSPExpressionRule.java
+++ b/pmd-jsp/src/main/java/net/sourceforge/pmd/lang/jsp/rule/security/NoUnsanitizedJSPExpressionRule.java
@@ -5,7 +5,6 @@
 package net.sourceforge.pmd.lang.jsp.rule.security;
 
 import net.sourceforge.pmd.lang.jsp.ast.ASTElExpression;
-import net.sourceforge.pmd.lang.jsp.ast.ASTElement;
 import net.sourceforge.pmd.lang.jsp.rule.AbstractJspRule;
 
 /**
@@ -17,22 +16,11 @@ import net.sourceforge.pmd.lang.jsp.rule.AbstractJspRule;
 public class NoUnsanitizedJSPExpressionRule extends AbstractJspRule {
     @Override
     public Object visit(ASTElExpression node, Object data) {
-        if (elOutsideTaglib(node)) {
+        if (node.elOutsideTaglib()) {
             addViolation(data, node);
         }
 
         return super.visit(node, data);
     }
 
-    private boolean elOutsideTaglib(ASTElExpression node) {
-        ASTElement parentASTElement = node.getFirstParentOfType(ASTElement.class);
-
-        boolean elInTaglib = parentASTElement != null && parentASTElement.getName() != null
-                && parentASTElement.getName().contains(":");
-
-        boolean elWithFnEscapeXml = node.getImage() != null && node.getImage().matches("^fn:escapeXml\\(.+\\)$");
-
-        return !elInTaglib && !elWithFnEscapeXml;
-    }
-
 }
