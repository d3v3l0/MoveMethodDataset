diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/codestyle/UnnecessaryLocalBeforeReturnRule.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/codestyle/UnnecessaryLocalBeforeReturnRule.java
index 2890b96..1165034 100644
--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/codestyle/UnnecessaryLocalBeforeReturnRule.java
+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/codestyle/UnnecessaryLocalBeforeReturnRule.java
@@ -10,7 +10,6 @@ import java.util.List;
 import java.util.Map;
 
 import net.sourceforge.pmd.lang.ast.Node;
-import net.sourceforge.pmd.lang.java.ast.ASTAnnotation;
 import net.sourceforge.pmd.lang.java.ast.ASTBlockStatement;
 import net.sourceforge.pmd.lang.java.ast.ASTExpression;
 import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration;
@@ -19,7 +18,6 @@ import net.sourceforge.pmd.lang.java.ast.ASTPrimaryExpression;
 import net.sourceforge.pmd.lang.java.ast.ASTPrimarySuffix;
 import net.sourceforge.pmd.lang.java.ast.ASTReturnStatement;
 import net.sourceforge.pmd.lang.java.ast.ASTVariableInitializer;
-import net.sourceforge.pmd.lang.java.ast.AccessNode;
 import net.sourceforge.pmd.lang.java.rule.AbstractJavaRule;
 import net.sourceforge.pmd.lang.java.symboltable.VariableNameDeclaration;
 import net.sourceforge.pmd.lang.symboltable.NameOccurrence;
@@ -73,7 +71,7 @@ public class UnnecessaryLocalBeforeReturnRule extends AbstractJavaRule {
             if (usages.size() == 1) { // If there is more than 1 usage, then it's not only returned
                 NameOccurrence occ = usages.get(0);
 
-                if (occ.getLocation().equals(name) && isNotAnnotated(variableDeclaration)) {
+                if (occ.getLocation().equals(name) && variableDeclaration.isNotAnnotated()) {
                     String var = name.getImage();
                     if (var.indexOf('.') != -1) {
                         var = var.substring(0, var.indexOf('.'));
@@ -146,11 +144,6 @@ public class UnnecessaryLocalBeforeReturnRule extends AbstractJavaRule {
         return false;
     }
 
-    private boolean isNotAnnotated(VariableNameDeclaration variableDeclaration) {
-        AccessNode accessNodeParent = variableDeclaration.getAccessNodeParent();
-        return !accessNodeParent.hasDescendantOfType(ASTAnnotation.class);
-    }
-
     /**
      * Determine if the given return statement has any embedded method calls.
      *
diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/symboltable/VariableNameDeclaration.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/symboltable/VariableNameDeclaration.java
index d6c2492..cda3109 100644
--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/symboltable/VariableNameDeclaration.java
+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/symboltable/VariableNameDeclaration.java
@@ -4,15 +4,7 @@
 
 package net.sourceforge.pmd.lang.java.symboltable;
 
-import net.sourceforge.pmd.lang.java.ast.ASTFormalParameter;
-import net.sourceforge.pmd.lang.java.ast.ASTLambdaExpression;
-import net.sourceforge.pmd.lang.java.ast.ASTPrimitiveType;
-import net.sourceforge.pmd.lang.java.ast.ASTReferenceType;
-import net.sourceforge.pmd.lang.java.ast.ASTType;
-import net.sourceforge.pmd.lang.java.ast.ASTVariableDeclaratorId;
-import net.sourceforge.pmd.lang.java.ast.AccessNode;
-import net.sourceforge.pmd.lang.java.ast.Dimensionable;
-import net.sourceforge.pmd.lang.java.ast.TypeNode;
+import net.sourceforge.pmd.lang.java.ast.*;
 import net.sourceforge.pmd.lang.symboltable.AbstractNameDeclaration;
 import net.sourceforge.pmd.lang.symboltable.Scope;
 
@@ -141,4 +133,9 @@ public class VariableNameDeclaration extends AbstractNameDeclaration implements
     public String toString() {
         return "Variable: image = '" + node.getImage() + "', line = " + node.getBeginLine();
     }
+
+    public boolean isNotAnnotated() {
+        AccessNode accessNodeParent = getAccessNodeParent();
+        return !accessNodeParent.hasDescendantOfType(ASTAnnotation.class);
+    }
 }
