diff --git a/drools-beliefs/src/main/java/org/drools/beliefs/bayes/JunctionTree.java b/drools-beliefs/src/main/java/org/drools/beliefs/bayes/JunctionTree.java
index 6e62ff7..96c2810 100644
--- a/drools-beliefs/src/main/java/org/drools/beliefs/bayes/JunctionTree.java
+++ b/drools-beliefs/src/main/java/org/drools/beliefs/bayes/JunctionTree.java
@@ -20,8 +20,6 @@ import org.drools.beliefs.graph.GraphNode;
 import org.kie.api.internal.assembler.ProcessedResource;
 import org.kie.api.io.Resource;
 
-import java.util.List;
-
 public class JunctionTree implements ProcessedResource {
     private Graph<BayesVariable>    graph;
     private JunctionTreeClique      root;
@@ -62,26 +60,10 @@ public class JunctionTree implements ProcessedResource {
     }
 
     private void initialize() {
-        recurseJTNodesAndInitialisePotentials( graph, root );
+        root.recurseJTNodesAndInitialisePotentials( graph, this);
     }
 
 
-    public void recurseJTNodesAndInitialisePotentials(Graph graph, JunctionTreeClique jtNode) {
-        BayesVariable[] vars = jtNode.getValues().toArray( new BayesVariable[jtNode.getValues().size()] );
-
-        List<BayesVariable> family = jtNode.getFamily();
-        int numberOfStates = PotentialMultiplier.createNumberOfStates(vars);
-        int[] multipliers = PotentialMultiplier.createIndexMultipliers(vars, numberOfStates);
-        for ( BayesVariable var : family ) {
-            multipleVarNodePotential(graph.getNode( var.getId() ), jtNode.getPotentials(), vars, multipliers);
-        }
-
-        List<JunctionTreeSeparator> seps = jtNode.getChildren();
-        for ( JunctionTreeSeparator sep : seps ) {
-            recurseJTNodesAndInitialisePotentials(graph, sep.getChild());
-        }
-    }
-
     public void multipleVarNodePotential(GraphNode<BayesVariable> varNode, double[] potentials, BayesVariable[] vars, int[] multipliers ) {
 
         BayesVariable[] parents = new BayesVariable[varNode.getInEdges().size()];
diff --git a/drools-beliefs/src/main/java/org/drools/beliefs/bayes/JunctionTreeClique.java b/drools-beliefs/src/main/java/org/drools/beliefs/bayes/JunctionTreeClique.java
index e833e19..a677f71 100644
--- a/drools-beliefs/src/main/java/org/drools/beliefs/bayes/JunctionTreeClique.java
+++ b/drools-beliefs/src/main/java/org/drools/beliefs/bayes/JunctionTreeClique.java
@@ -113,4 +113,19 @@ public class JunctionTreeClique {
     }
 
 
+    public void recurseJTNodesAndInitialisePotentials(Graph graph, JunctionTree junctionTree) {
+        BayesVariable[] vars = getValues().toArray( new BayesVariable[getValues().size()] );
+
+        List<BayesVariable> family = getFamily();
+        int numberOfStates = PotentialMultiplier.createNumberOfStates(vars);
+        int[] multipliers = PotentialMultiplier.createIndexMultipliers(vars, numberOfStates);
+        for ( BayesVariable var : family ) {
+            junctionTree.multipleVarNodePotential(graph.getNode( var.getId() ), getPotentials(), vars, multipliers);
+        }
+
+        List<JunctionTreeSeparator> seps = getChildren();
+        for ( JunctionTreeSeparator sep : seps ) {
+            sep.getChild().recurseJTNodesAndInitialisePotentials(graph, junctionTree);
+        }
+    }
 }
diff --git a/drools-compiler/src/main/java/org/drools/compiler/builder/impl/ClassDefinitionFactory.java b/drools-compiler/src/main/java/org/drools/compiler/builder/impl/ClassDefinitionFactory.java
index 80ab638..a8793ad 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/builder/impl/ClassDefinitionFactory.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/builder/impl/ClassDefinitionFactory.java
@@ -180,9 +180,8 @@ public class ClassDefinitionFactory {
         // add enum literals, if appropriate
         if (type.getKind() == TypeDeclaration.Kind.ENUM) {
             for (EnumLiteralDescr lit : ((EnumDeclarationDescr) typeDescr).getLiterals()) {
-                ((EnumClassDefinition) def).addLiteral(
-                        new EnumLiteralDefinition(lit.getName(), lit.getConstructorArgs())
-                );
+                new EnumLiteralDefinition(lit.getName(), lit.getConstructorArgs()).addLiteral(
+                        ((EnumClassDefinition) def));
             }
         }
         return true;
diff --git a/drools-compiler/src/main/java/org/drools/compiler/builder/impl/ClassHierarchyManager.java b/drools-compiler/src/main/java/org/drools/compiler/builder/impl/ClassHierarchyManager.java
index 8607856..3f3dd9f 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/builder/impl/ClassHierarchyManager.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/builder/impl/ClassHierarchyManager.java
@@ -27,19 +27,15 @@ import java.util.Map;
 import org.drools.compiler.compiler.PackageRegistry;
 import org.drools.compiler.compiler.TypeDeclarationError;
 import org.drools.compiler.lang.descr.AbstractClassTypeDeclarationDescr;
-import org.drools.compiler.lang.descr.AnnotationDescr;
 import org.drools.compiler.lang.descr.PatternDescr;
 import org.drools.compiler.lang.descr.QualifiedName;
 import org.drools.compiler.lang.descr.TypeDeclarationDescr;
 import org.drools.compiler.lang.descr.TypeFieldDescr;
 import org.drools.core.definitions.InternalKnowledgePackage;
 import org.drools.core.factmodel.ClassDefinition;
-import org.drools.core.factmodel.FieldDefinition;
-import org.drools.core.factmodel.traits.Alias;
 import org.drools.core.rule.TypeDeclaration;
 import org.drools.core.util.HierarchySorter;
 import org.drools.core.util.asm.ClassFieldInspector;
-import org.kie.api.definition.type.Key;
 import org.kie.api.io.Resource;
 import org.kie.soup.project.datamodel.commons.types.TypeResolver;
 
@@ -280,7 +276,7 @@ public class ClassHierarchyManager {
                 ClassDefinition classDef = superTypeDeclaration.getTypeClassDef();
                 // inherit fields
                 for (org.kie.api.definition.type.FactField fld : classDef.getFields()) {
-                    TypeFieldDescr inheritedFlDescr = buildInheritedFieldDescrFromDefinition(fld, typeDescr);
+                    TypeFieldDescr inheritedFlDescr = typeDescr.buildInheritedFieldDescrFromDefinition(fld, this);
                     fieldMap.put(inheritedFlDescr.getFieldName(),
                                  inheritedFlDescr);
                 }
@@ -377,40 +373,6 @@ public class ClassHierarchyManager {
         typeDescr.setFields(fieldMap);
     }
 
-    protected TypeFieldDescr buildInheritedFieldDescrFromDefinition(org.kie.api.definition.type.FactField fld, TypeDeclarationDescr typeDescr) {
-        TypeFieldDescr inheritedFldDescr = new TypeFieldDescr();
-        inheritedFldDescr.setFieldName(fld.getName());
-        inheritedFldDescr.setResource(typeDescr.getResource());
-        PatternDescr fldType = new PatternDescr();
-        fldType.setObjectType(((FieldDefinition) fld).getTypeName());
-        inheritedFldDescr.setPattern(fldType); // also sets resource for PatternDescr fldType
-        if (fld.isKey()) {
-            AnnotationDescr keyAnnotation = new AnnotationDescr(Key.class.getCanonicalName());
-            keyAnnotation.setFullyQualifiedName(Key.class.getCanonicalName());
-            keyAnnotation.setResource(typeDescr.getResource());
-            inheritedFldDescr.addAnnotation(keyAnnotation);
-        }
-        inheritedFldDescr.setIndex(((FieldDefinition) fld).getDeclIndex());
-        inheritedFldDescr.setInherited(true);
-
-        String initExprOverride = ((FieldDefinition) fld).getInitExpr();
-        int overrideCount = 0;
-        // only @aliasing local fields may override defaults.
-        for (TypeFieldDescr localField : typeDescr.getFields().values()) {
-            Alias alias = localField.getTypedAnnotation(Alias.class);
-            if (alias != null && fld.getName().equals(alias.value().replaceAll("\"", "")) && localField.getInitExpr() != null) {
-                overrideCount++;
-                initExprOverride = localField.getInitExpr();
-            }
-        }
-        if (overrideCount > 1) {
-            // however, only one is allowed
-            initExprOverride = null;
-        }
-        inheritedFldDescr.setInitExpr(initExprOverride);
-        return inheritedFldDescr;
-    }
-
     public void addDeclarationToPackagePreservingOrder(TypeDeclaration type,
                                                        AbstractClassTypeDeclarationDescr typeDescr,
                                                        InternalKnowledgePackage tgtPackage,
diff --git a/drools-compiler/src/main/java/org/drools/compiler/builder/impl/KnowledgeBuilderImpl.java b/drools-compiler/src/main/java/org/drools/compiler/builder/impl/KnowledgeBuilderImpl.java
index 22b34da..1e4a2a1 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/builder/impl/KnowledgeBuilderImpl.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/builder/impl/KnowledgeBuilderImpl.java
@@ -1203,37 +1203,14 @@ public class KnowledgeBuilderImpl implements KnowledgeBuilder,
 
     private List<? extends KnowledgeBuilderResult> addRule(RuleBuildContext context) {
         return System.getSecurityManager() == null ?
-                internalAddRule(context) :
+                context.internalAddRule(this) :
                 AccessController.<List<? extends KnowledgeBuilderResult>>doPrivileged( new PrivilegedAction() {
                     public List<? extends KnowledgeBuilderResult> run() {
-                        return internalAddRule(context);
+                        return context.internalAddRule(KnowledgeBuilderImpl.this);
                     }
                 });
     }
 
-    private List<? extends KnowledgeBuilderResult> internalAddRule(RuleBuildContext context) {
-        RuleBuilder.build(context);
-
-        context.getRule().setResource(context.getRuleDescr().getResource());
-
-        context.getDialect().addRule(context);
-
-        if (context.needsStreamMode()) {
-            context.getPkg().setNeedStreamMode();
-        }
-
-        if (context.getErrors().isEmpty()) {
-            return context.getWarnings();
-        } else if (context.getWarnings().isEmpty()) {
-            return context.getErrors();
-        }
-
-        List<KnowledgeBuilderResult> result = new ArrayList<>();
-        result.addAll(context.getErrors());
-        result.addAll(context.getWarnings());
-        return result;
-    }
-
     boolean filterAccepts(ResourceChange.Type type, String namespace, String name) {
         return assetFilter == null || !AssetFilter.Action.DO_NOTHING.equals(assetFilter.accept(type, namespace, name));
     }
diff --git a/drools-compiler/src/main/java/org/drools/compiler/builder/impl/TypeDeclarationBuilder.java b/drools-compiler/src/main/java/org/drools/compiler/builder/impl/TypeDeclarationBuilder.java
index 5850183..e567c49 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/builder/impl/TypeDeclarationBuilder.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/builder/impl/TypeDeclarationBuilder.java
@@ -204,7 +204,7 @@ public class TypeDeclarationBuilder {
         }
         if ( prev.getFields().isEmpty() ) {
             for ( String fieldName : descr.getFields().keySet() ) {
-                prev.addField( descr.getFields().get( fieldName ) );
+                descr.getFields().get( fieldName ).addField(prev);
             }
         }
         for ( AnnotationDescr ad : descr.getAnnotations() ) {
@@ -287,7 +287,7 @@ public class TypeDeclarationBuilder {
                 type.setValid( false );
             }
 
-            typeDeclarationConfigurator.finalize( type, typeDescr, pkgRegistry, kbuilder.getPackageRegistry(), hierarchyManager );
+            pkgRegistry.finalizeOther( type, typeDescr, kbuilder.getPackageRegistry(), hierarchyManager, typeDeclarationConfigurator);
 
         } catch ( final ClassNotFoundException e ) {
             unprocesseableDescrs.put( typeDescr.getType().getFullName(), typeDescr );
diff --git a/drools-compiler/src/main/java/org/drools/compiler/builder/impl/TypeDeclarationConfigurator.java b/drools-compiler/src/main/java/org/drools/compiler/builder/impl/TypeDeclarationConfigurator.java
index 2c7bdea..eedb38f 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/builder/impl/TypeDeclarationConfigurator.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/builder/impl/TypeDeclarationConfigurator.java
@@ -17,7 +17,6 @@ package org.drools.compiler.builder.impl;
 
 import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
-import java.util.Map;
 
 import org.drools.compiler.compiler.BoundIdentifiers;
 import org.drools.compiler.compiler.PackageRegistry;
@@ -39,7 +38,6 @@ import org.drools.core.rule.TypeDeclaration;
 import org.drools.core.spi.InternalReadAccessor;
 import org.drools.core.util.ClassUtils;
 import org.kie.api.definition.type.Duration;
-import org.kie.api.definition.type.Role;
 import org.kie.api.definition.type.Timestamp;
 
 import static org.drools.core.rule.TypeDeclaration.processTypeAnnotations;
@@ -52,37 +50,6 @@ public class TypeDeclarationConfigurator {
         this.kbuilder = kbuilder;
     }
 
-    public void finalize( TypeDeclaration type, AbstractClassTypeDeclarationDescr typeDescr, PackageRegistry pkgRegistry, Map<String, PackageRegistry> pkgRegistryMap, ClassHierarchyManager hierarchyManager ) {
-        // prefer definitions where possible
-        if ( type.getNature() == TypeDeclaration.Nature.DEFINITION ) {
-            hierarchyManager.addDeclarationToPackagePreservingOrder( type, typeDescr, pkgRegistry.getPackage(), pkgRegistryMap );
-        } else {
-            TypeDeclaration oldType = pkgRegistry.getPackage().getTypeDeclaration( type.getTypeName() );
-            if ( oldType == null ) {
-                pkgRegistry.getPackage().addTypeDeclaration( type );
-            } else {
-                if (type.getRole() == Role.Type.EVENT) {
-                    oldType.setRole(Role.Type.EVENT);
-                    if ( type.getDurationAttribute() != null ) {
-                        oldType.setDurationAttribute( type.getDurationAttribute() );
-                        oldType.setDurationExtractor( type.getDurationExtractor() );
-                    }
-                    if ( type.getTimestampAttribute() != null ) {
-                        oldType.setTimestampAttribute( type.getTimestampAttribute() );
-                        oldType.setTimestampExtractor( type.getTimestampExtractor() );
-                    }
-                    if ( type.getExpirationOffset() >= 0 ) {
-                        oldType.setExpirationOffset( type.getExpirationOffset() );
-                        oldType.setExpirationType( type.getExpirationPolicy() );
-                    }
-                }
-                if (type.isPropertyReactive()) {
-                    oldType.setPropertyReactive(true);
-                }
-            }
-        }
-    }
-
 
     public boolean wireFieldAccessors( PackageRegistry pkgRegistry,
                                        AbstractClassTypeDeclarationDescr typeDescr,
diff --git a/drools-compiler/src/main/java/org/drools/compiler/commons/jci/compilers/JavaCompilerFactory.java b/drools-compiler/src/main/java/org/drools/compiler/commons/jci/compilers/JavaCompilerFactory.java
index be0a714..3cdc212 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/commons/jci/compilers/JavaCompilerFactory.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/commons/jci/compilers/JavaCompilerFactory.java
@@ -103,22 +103,17 @@ public final class JavaCompilerFactory {
             }
             case NATIVE : {
                 compiler = createCompiler( "native" );
-                updateSettings( compiler.createDefaultSettings(), lngLevel );
+                compiler.createDefaultSettings().updateSettings(lngLevel, this);
                 break;
             }
             case ECLIPSE :
             default : {
                 compiler = createCompiler( "eclipse" );
-                updateSettings( compiler.createDefaultSettings(), lngLevel );
+                compiler.createDefaultSettings().updateSettings(lngLevel, this);
                 break;
             }
         }
         return compiler;
     }
 
-    private JavaCompilerSettings updateSettings( JavaCompilerSettings settings, String lngLevel ) {
-        settings.setTargetVersion( lngLevel );
-        settings.setSourceVersion( lngLevel );
-        return settings;
-    }
 }
diff --git a/drools-compiler/src/main/java/org/drools/compiler/commons/jci/compilers/JavaCompilerSettings.java b/drools-compiler/src/main/java/org/drools/compiler/commons/jci/compilers/JavaCompilerSettings.java
index 1e69d6b..8a6c227 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/commons/jci/compilers/JavaCompilerSettings.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/commons/jci/compilers/JavaCompilerSettings.java
@@ -112,4 +112,9 @@ public class JavaCompilerSettings {
         return verbose;
     }
 
+    public JavaCompilerSettings updateSettings(String lngLevel, JavaCompilerFactory javaCompilerFactory) {
+        setTargetVersion( lngLevel );
+        setSourceVersion( lngLevel );
+        return this;
+    }
 }
diff --git a/drools-compiler/src/main/java/org/drools/compiler/compiler/BoundIdentifiers.java b/drools-compiler/src/main/java/org/drools/compiler/compiler/BoundIdentifiers.java
index 8779698..9a2e34d 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/compiler/BoundIdentifiers.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/compiler/BoundIdentifiers.java
@@ -15,13 +15,13 @@
 
 package org.drools.compiler.compiler;
 
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
+import java.util.*;
 
+import org.antlr.runtime.RecognitionException;
 import org.drools.compiler.rule.builder.PackageBuildContext;
 import org.drools.compiler.rule.builder.RuleBuildContext;
+import org.drools.compiler.rule.builder.dialect.java.JavaAnalysisResult;
+import org.drools.compiler.rule.builder.dialect.java.JavaExprAnalyzer;
 import org.drools.core.base.EvaluatorWrapper;
 import org.drools.core.rule.Declaration;
 import org.drools.core.rule.Pattern;
@@ -133,4 +133,58 @@ public class BoundIdentifiers {
         }
         return declarations;
     }
+
+    /**
+     * Analyze an expression.
+     *
+     * @param result
+     *            The AST for the expression.
+     *
+     * @param javaExprAnalyzer
+     * @return The <code>Set</code> of declarations used by the expression.
+     *
+     * @throws RecognitionException
+     *             If an error occurs in the parser.
+     */
+    public JavaAnalysisResult analyze(JavaAnalysisResult result, JavaExprAnalyzer javaExprAnalyzer) throws RecognitionException {
+        final Set<String> identifiers = result.getIdentifiers();
+        final Set<String> notBound = new HashSet<String>( identifiers );
+
+        Map<String, Class<?>> usedDecls = new HashMap<String, Class<?>>();
+        Map<String, Class<?>> usedGlobals = new HashMap<String, Class<?>>();
+        Map<String, EvaluatorWrapper> usedOperators = new HashMap<String, EvaluatorWrapper>();
+
+        for ( Map.Entry<String, Class<?>> entry : getDeclrClasses().entrySet() ) {
+            if ( identifiers.contains( entry.getKey() ) ) {
+                usedDecls.put( entry.getKey(), entry.getValue() );
+                notBound.remove( entry.getKey() );
+            }
+        }
+
+        for ( String identifier : identifiers ) {
+            Class<?> type = resolveVarType( identifier );
+            if (type != null) {
+                usedGlobals.put( identifier, type );
+                notBound.remove( identifier );
+            }
+        }
+
+        for ( Map.Entry<String, EvaluatorWrapper> op : getOperators().entrySet() ) {
+            if ( identifiers.contains( op.getKey() ) ) {
+                usedOperators.put( op.getKey(), op.getValue() );
+                notBound.remove( op.getKey() );
+            }
+        }
+
+        BoundIdentifiers boundIdentifiers = new BoundIdentifiers( usedDecls,
+                                                                  getContext(),
+                                                                  usedOperators,
+                                                                  getThisClass() );
+        boundIdentifiers.setGlobals( usedGlobals );
+
+        result.setBoundIdentifiers( boundIdentifiers );
+        result.setNotBoundedIdentifiers( notBound );
+
+        return result;
+    }
 }
diff --git a/drools-compiler/src/main/java/org/drools/compiler/compiler/DrlParser.java b/drools-compiler/src/main/java/org/drools/compiler/compiler/DrlParser.java
index 2db14cd..6fdbf1d 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/compiler/DrlParser.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/compiler/DrlParser.java
@@ -20,7 +20,6 @@ import org.drools.compiler.lang.DRLLexer;
 import org.drools.compiler.lang.DRLParser;
 import org.drools.compiler.lang.DroolsSentence;
 import org.drools.compiler.lang.Expander;
-import org.drools.compiler.lang.ExpanderException;
 import org.drools.compiler.lang.Location;
 import org.drools.compiler.lang.descr.PackageDescr;
 import org.drools.compiler.lang.dsl.DefaultExpanderResolver;
@@ -178,36 +177,8 @@ public class DrlParser {
     public String getExpandedDRL(final String source,
                                  final Reader dsl) throws DroolsParserException {
         DefaultExpanderResolver resolver = getDefaultResolver(dsl);
-        return getExpandedDRL(source,
-                resolver);
-    }
-
-    /**
-     * This will expand the DRL using the given expander resolver. useful for
-     * debugging.
-     * 
-     * @param source -
-     *            the source which use a DSL
-     * @param resolver -
-     *            the DSL expander resolver itself.
-     * @throws DroolsParserException
-     *             If unable to expand in any way.
-     */
-    public String getExpandedDRL(final String source,
-                                 final DefaultExpanderResolver resolver) throws DroolsParserException {
-
-        final Expander expander = resolver.get("*",
-                null);
-        final String expanded = expander.expand( source );
-        if ( expander.hasErrors() ) {
-            String err = "";
-            for ( ExpanderException ex : expander.getErrors() ) {
-                err = err + "\n Line:[" + ex.getLine() + "] " + ex.getMessage();
-
-            }
-            throw new DroolsParserException( err );
-        }
-        return expanded;
+        return resolver.getExpandedDRL(source,
+                this);
     }
 
     private StringBuilder getDRLText(final Reader reader) throws IOException {
diff --git a/drools-compiler/src/main/java/org/drools/compiler/compiler/PackageRegistry.java b/drools-compiler/src/main/java/org/drools/compiler/compiler/PackageRegistry.java
index 4667742..60ee0e9 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/compiler/PackageRegistry.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/compiler/PackageRegistry.java
@@ -16,13 +16,19 @@
 package org.drools.compiler.compiler;
 
 import java.util.HashSet;
+import java.util.Map;
 
+import org.drools.compiler.builder.impl.ClassHierarchyManager;
 import org.drools.compiler.builder.impl.KnowledgeBuilderConfigurationImpl;
+import org.drools.compiler.builder.impl.TypeDeclarationConfigurator;
+import org.drools.compiler.lang.descr.AbstractClassTypeDeclarationDescr;
 import org.drools.compiler.lang.descr.ImportDescr;
 import org.drools.core.definitions.InternalKnowledgePackage;
 import org.drools.core.factmodel.traits.TraitRegistry;
 import org.drools.core.rule.DialectRuntimeRegistry;
 import org.drools.core.rule.ImportDeclaration;
+import org.drools.core.rule.TypeDeclaration;
+import org.kie.api.definition.type.Role;
 import org.kie.api.io.Resource;
 import org.kie.soup.project.datamodel.commons.types.ClassTypeResolver;
 import org.kie.soup.project.datamodel.commons.types.TypeResolver;
@@ -116,4 +122,35 @@ public class PackageRegistry {
     public TraitRegistry getTraitRegistry() {
         return pkg.getTraitRegistry();
     }
+
+    public void finalizeOther(TypeDeclaration type, AbstractClassTypeDeclarationDescr typeDescr, Map<String, PackageRegistry> pkgRegistryMap, ClassHierarchyManager hierarchyManager, TypeDeclarationConfigurator typeDeclarationConfigurator) {
+        // prefer definitions where possible
+        if ( type.getNature() == TypeDeclaration.Nature.DEFINITION ) {
+            hierarchyManager.addDeclarationToPackagePreservingOrder( type, typeDescr, getPackage(), pkgRegistryMap );
+        } else {
+            TypeDeclaration oldType = getPackage().getTypeDeclaration( type.getTypeName() );
+            if ( oldType == null ) {
+                getPackage().addTypeDeclaration( type );
+            } else {
+                if (type.getRole() == Role.Type.EVENT) {
+                    oldType.setRole(Role.Type.EVENT);
+                    if ( type.getDurationAttribute() != null ) {
+                        oldType.setDurationAttribute( type.getDurationAttribute() );
+                        oldType.setDurationExtractor( type.getDurationExtractor() );
+                    }
+                    if ( type.getTimestampAttribute() != null ) {
+                        oldType.setTimestampAttribute( type.getTimestampAttribute() );
+                        oldType.setTimestampExtractor( type.getTimestampExtractor() );
+                    }
+                    if ( type.getExpirationOffset() >= 0 ) {
+                        oldType.setExpirationOffset( type.getExpirationOffset() );
+                        oldType.setExpirationType( type.getExpirationPolicy() );
+                    }
+                }
+                if (type.isPropertyReactive()) {
+                    oldType.setPropertyReactive(true);
+                }
+            }
+        }
+    }
 }
diff --git a/drools-compiler/src/main/java/org/drools/compiler/compiler/io/memory/MemoryFileSystem.java b/drools-compiler/src/main/java/org/drools/compiler/compiler/io/memory/MemoryFileSystem.java
index 5958f73..02e8263 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/compiler/io/memory/MemoryFileSystem.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/compiler/io/memory/MemoryFileSystem.java
@@ -47,8 +47,13 @@ import org.drools.compiler.compiler.io.FileSystem;
 import org.drools.compiler.compiler.io.Folder;
 import org.drools.compiler.compiler.io.Path;
 import org.drools.compiler.compiler.io.Resource;
+import org.drools.compiler.kie.builder.impl.InternalKieModule;
+import org.drools.compiler.kie.builder.impl.MemoryKieModule;
 import org.drools.core.util.IoUtils;
 import org.drools.core.util.StringUtils;
+import org.kie.api.builder.ReleaseId;
+import org.kie.api.builder.model.KieBaseModel;
+import org.kie.api.builder.model.KieModuleModel;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -579,6 +584,24 @@ public class MemoryFileSystem
         return new ByteClassLoader(parent, this);
     }
 
+    public MemoryKieModule cloneForIncrementalCompilation(ReleaseId releaseId, KieModuleModel kModuleModel, MemoryKieModule memoryKieModule) {
+        MemoryKieModule clone = new MemoryKieModule(releaseId, kModuleModel, this);
+        for (InternalKieModule dep : memoryKieModule.getKieDependencies().values()) {
+            clone.addKieDependency(dep);
+        }
+        for (KieBaseModel kBaseModel : memoryKieModule.getKieModuleModel().getKieBaseModels().values()) {
+            clone.cacheKnowledgeBuilderForKieBase(kBaseModel.getName(), memoryKieModule.getKnowledgeBuilderForKieBase( kBaseModel.getName() ));
+        }
+
+        clone.setPomModel( memoryKieModule.getPomModel() );
+        for ( InternalKieModule dependency : memoryKieModule.getKieDependencies().values() ) {
+            clone.addKieDependency( dependency );
+        }
+        clone.setUnresolvedDependencies( memoryKieModule.getUnresolvedDependencies() );
+
+        return clone;
+    }
+
     static class ByteClassLoader extends URLClassLoader {
         private final Map<String, byte[]> extraClassDefs = new HashMap<>();
 
diff --git a/drools-compiler/src/main/java/org/drools/compiler/compiler/xml/rules/FieldBindingHandler.java b/drools-compiler/src/main/java/org/drools/compiler/compiler/xml/rules/FieldBindingHandler.java
index 5bf965e..a998f07 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/compiler/xml/rules/FieldBindingHandler.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/compiler/xml/rules/FieldBindingHandler.java
@@ -41,14 +41,14 @@ public class FieldBindingHandler extends BaseAbstractHandler
         final String identifier = attrs.getValue( "identifier" );
         final String fieldName = attrs.getValue( "field-name" );
 
-        emptyAttributeCheck( localName,
+        parser.emptyAttributeCheck( localName,
                              "identifier",
                              identifier,
-                             parser );
-        emptyAttributeCheck( localName,
+                FieldBindingHandler.this);
+        parser.emptyAttributeCheck( localName,
                              "fieldName",
                              fieldName,
-                             parser );
+                FieldBindingHandler.this);
 
         final BindingDescr fieldBindingDescr = new BindingDescr( identifier,
                                                                  fieldName);
diff --git a/drools-compiler/src/main/java/org/drools/compiler/compiler/xml/rules/FieldConstraintHandler.java b/drools-compiler/src/main/java/org/drools/compiler/compiler/xml/rules/FieldConstraintHandler.java
index 5f73009..285e17a 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/compiler/xml/rules/FieldConstraintHandler.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/compiler/xml/rules/FieldConstraintHandler.java
@@ -46,10 +46,10 @@ public class FieldConstraintHandler extends BaseAbstractHandler
                                     attrs );
 
         final String fieldName = attrs.getValue( "field-name" );
-        emptyAttributeCheck( localName,
+        parser.emptyAttributeCheck( localName,
                              "field-name",
                              fieldName,
-                             parser );
+                FieldConstraintHandler.this);
         final ConnectiveDescr connective = new ConnectiveDescr( RestrictionConnectiveType.AND );
         connective.setParen( false );
 
diff --git a/drools-compiler/src/main/java/org/drools/compiler/compiler/xml/rules/FunctionHandler.java b/drools-compiler/src/main/java/org/drools/compiler/compiler/xml/rules/FunctionHandler.java
index aba105f..2fa9012 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/compiler/xml/rules/FunctionHandler.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/compiler/xml/rules/FunctionHandler.java
@@ -47,8 +47,8 @@ public class FunctionHandler extends BaseAbstractHandler
         final String name = attrs.getValue( "name" );
         final String returnType = attrs.getValue( "return-type" );
         
-        emptyAttributeCheck( localName, "name", name, parser );
-        emptyAttributeCheck( localName, "return-type", returnType, parser );
+        parser.emptyAttributeCheck( localName, "name", name, FunctionHandler.this);
+        parser.emptyAttributeCheck( localName, "return-type", returnType, FunctionHandler.this);
 
         return new FunctionDescr( name, returnType );
     }
@@ -66,8 +66,8 @@ public class FunctionHandler extends BaseAbstractHandler
             final String identifier = ((Element)parameters.item( i )).getAttribute( "identifier" );
             final String type = ((Element)parameters.item( i )).getAttribute( "type" );
             
-            emptyAttributeCheck("parameter", "identifier", identifier, parser);
-            emptyAttributeCheck("parameter", "type", type, parser);
+            parser.emptyAttributeCheck("parameter", "identifier", identifier, FunctionHandler.this);
+            parser.emptyAttributeCheck("parameter", "type", type, FunctionHandler.this);
             
             functionDescr.addParameter( type,
                                         identifier );
diff --git a/drools-compiler/src/main/java/org/drools/compiler/compiler/xml/rules/LiteralRestrictionHandler.java b/drools-compiler/src/main/java/org/drools/compiler/compiler/xml/rules/LiteralRestrictionHandler.java
index e7160e2..4f848cc 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/compiler/xml/rules/LiteralRestrictionHandler.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/compiler/xml/rules/LiteralRestrictionHandler.java
@@ -41,7 +41,7 @@ public class LiteralRestrictionHandler extends BaseAbstractHandler
                                     attrs );
 
         String evaluator = attrs.getValue( "evaluator" );
-        emptyAttributeCheck( localName, "evaluator", evaluator, parser );
+        parser.emptyAttributeCheck( localName, "evaluator", evaluator, LiteralRestrictionHandler.this);
         
         String text = attrs.getValue( "value" );
         
diff --git a/drools-compiler/src/main/java/org/drools/compiler/compiler/xml/rules/QualifiedIdentifierRestrictionHandler.java b/drools-compiler/src/main/java/org/drools/compiler/compiler/xml/rules/QualifiedIdentifierRestrictionHandler.java
index db535c4..e25cd7f 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/compiler/xml/rules/QualifiedIdentifierRestrictionHandler.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/compiler/xml/rules/QualifiedIdentifierRestrictionHandler.java
@@ -40,7 +40,7 @@ public class QualifiedIdentifierRestrictionHandler extends BaseAbstractHandler
                                     attrs );
 
         String evaluator = attrs.getValue( "evaluator" );
-        emptyAttributeCheck( localName, "evaluator", evaluator, parser );
+        parser.emptyAttributeCheck( localName, "evaluator", evaluator, QualifiedIdentifierRestrictionHandler.this);
 
         return evaluator.trim() + " ";
     }
diff --git a/drools-compiler/src/main/java/org/drools/compiler/compiler/xml/rules/QueryHandler.java b/drools-compiler/src/main/java/org/drools/compiler/compiler/xml/rules/QueryHandler.java
index d89f25d..83b1534 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/compiler/xml/rules/QueryHandler.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/compiler/xml/rules/QueryHandler.java
@@ -46,7 +46,7 @@ public class QueryHandler extends BaseAbstractHandler
                                     attrs );
 
         final String queryName = attrs.getValue( "name" );
-        emptyAttributeCheck( localName, "name", queryName, parser );
+        parser.emptyAttributeCheck( localName, "name", queryName, QueryHandler.this);
 
         final QueryDescr queryDescr = new QueryDescr( queryName.trim() );
 
diff --git a/drools-compiler/src/main/java/org/drools/compiler/compiler/xml/rules/ReturnValueRestrictionHandler.java b/drools-compiler/src/main/java/org/drools/compiler/compiler/xml/rules/ReturnValueRestrictionHandler.java
index 38217de..1c9d75c 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/compiler/xml/rules/ReturnValueRestrictionHandler.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/compiler/xml/rules/ReturnValueRestrictionHandler.java
@@ -44,7 +44,7 @@ public class ReturnValueRestrictionHandler extends BaseAbstractHandler
                                     attrs );
 
         String evaluator = attrs.getValue( "evaluator" );
-        emptyAttributeCheck( localName, "evaluator", evaluator, parser );
+        parser.emptyAttributeCheck( localName, "evaluator", evaluator, ReturnValueRestrictionHandler.this);
         
         return evaluator.trim() + " ";
     }
diff --git a/drools-compiler/src/main/java/org/drools/compiler/compiler/xml/rules/RuleHandler.java b/drools-compiler/src/main/java/org/drools/compiler/compiler/xml/rules/RuleHandler.java
index 0c67c20..19bf191 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/compiler/xml/rules/RuleHandler.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/compiler/xml/rules/RuleHandler.java
@@ -48,10 +48,10 @@ public class RuleHandler extends BaseAbstractHandler
                                     attrs );
 
         final String ruleName = attrs.getValue( "name" );
-        emptyAttributeCheck( localName,
+        parser.emptyAttributeCheck( localName,
                              "name",
                              ruleName,
-                             parser );
+                RuleHandler.this);
 
         final RuleDescr ruleDescr = new RuleDescr( ruleName.trim() );
 
@@ -83,10 +83,10 @@ public class RuleHandler extends BaseAbstractHandler
         NodeList attributes = element.getElementsByTagName( "rule-attribute" );
         for ( int i = 0, length = attributes.getLength(); i < length; i++ ) {
             final String name = ((Element) attributes.item( i )).getAttribute( "name" );
-            emptyAttributeCheck( "rule-attribute",
+            parser.emptyAttributeCheck( "rule-attribute",
                                  "name",
                                  name,
-                                 parser );
+                    RuleHandler.this);
 
             final String value = ((Element) attributes.item( i )).getAttribute( "value" );
 
diff --git a/drools-compiler/src/main/java/org/drools/compiler/compiler/xml/rules/VariableRestrictionsHandler.java b/drools-compiler/src/main/java/org/drools/compiler/compiler/xml/rules/VariableRestrictionsHandler.java
index 19ddc61..331ae80 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/compiler/xml/rules/VariableRestrictionsHandler.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/compiler/xml/rules/VariableRestrictionsHandler.java
@@ -45,8 +45,8 @@ public class VariableRestrictionsHandler extends BaseAbstractHandler
         String evaluator = attrs.getValue( "evaluator" );
         String identifier = attrs.getValue( "identifier" );
         
-        emptyAttributeCheck( localName, "evaluator", evaluator, parser );
-        emptyAttributeCheck( localName, identifier, "identifier", parser );
+        parser.emptyAttributeCheck( localName, "evaluator", evaluator, VariableRestrictionsHandler.this);
+        parser.emptyAttributeCheck( localName, identifier, "identifier", VariableRestrictionsHandler.this);
         
         return evaluator.trim() + " "  + identifier.trim();        
     }
diff --git a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/AbstractKieModule.java b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/AbstractKieModule.java
index 0d010ca..b76378d 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/AbstractKieModule.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/AbstractKieModule.java
@@ -194,25 +194,8 @@ public abstract class AbstractKieModule
         return typesMetaInfo;
     }
 
-    public KnowledgePackagesBuildResult buildKnowledgePackages(KieBaseModelImpl kBaseModel, KieProject kieProject, ResultsImpl messages) {
-        Collection<KiePackage> pkgs = getKnowledgePackagesForKieBase(kBaseModel.getName());
-
-        if ( pkgs == null ) {
-            KnowledgeBuilder kbuilder = kieProject.buildKnowledgePackages(kBaseModel, messages);
-            if ( kbuilder.hasErrors() ) {
-                // Messages already populated by the buildKnowlegePackages
-                return new KnowledgePackagesBuildResult(true, pkgs);
-            }
-
-            // if we get to here, then we know the pkgs is now cached
-            pkgs = getKnowledgePackagesForKieBase(kBaseModel.getName());
-        }
-
-        return new KnowledgePackagesBuildResult(false, pkgs);
-    }
-
     public InternalKnowledgeBase createKieBase( KieBaseModelImpl kBaseModel, KieProject kieProject, ResultsImpl messages, KieBaseConfiguration conf ) {
-        KnowledgePackagesBuildResult knowledgePackagesBuildResult = buildKnowledgePackages(kBaseModel, kieProject, messages);
+        KnowledgePackagesBuildResult knowledgePackagesBuildResult = messages.buildKnowledgePackages(kBaseModel, kieProject, this);
         if(knowledgePackagesBuildResult.hasErrors()) {
             return null;
         }
diff --git a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBuilderImpl.java b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBuilderImpl.java
index 274a992..1979011 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBuilderImpl.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBuilderImpl.java
@@ -34,9 +34,7 @@ import org.appformer.maven.support.DependencyFilter;
 import org.appformer.maven.support.PomModel;
 import org.drools.compiler.builder.impl.KnowledgeBuilderConfigurationImpl;
 import org.drools.compiler.commons.jci.compilers.CompilationResult;
-import org.drools.compiler.commons.jci.compilers.EclipseJavaCompiler;
 import org.drools.compiler.commons.jci.compilers.JavaCompiler;
-import org.drools.compiler.commons.jci.compilers.JavaCompilerFactory;
 import org.drools.compiler.commons.jci.readers.DiskResourceReader;
 import org.drools.compiler.commons.jci.readers.ResourceReader;
 import org.drools.compiler.compiler.io.memory.MemoryFileSystem;
@@ -332,7 +330,7 @@ public class KieBuilderImpl
         }
         trgMfs = trgMfs.clone();
         init();
-        kModule = ((MemoryKieModule)kModule).cloneForIncrementalCompilation( adapt( releaseId ), kModuleModel, trgMfs );
+        kModule = trgMfs.cloneForIncrementalCompilation( adapt( releaseId ), kModuleModel, ((MemoryKieModule)kModule));
     }
 
     private void addMetaInfBuilder() {
@@ -715,7 +713,7 @@ public class KieBuilderImpl
         if ( !javaFiles.isEmpty() ) {
             String[] sourceFiles = javaFiles.toArray( new String[ javaFiles.size() ] );
 
-            JavaCompiler javaCompiler = createCompiler( javaConf, rootFolder );
+            JavaCompiler javaCompiler = javaConf.createCompiler(rootFolder, this);
             CompilationResult res = javaCompiler.compile( sourceFiles,
                                                           srcMfs,
                                                           trgMfs,
@@ -730,15 +728,6 @@ public class KieBuilderImpl
         }
     }
 
-    private JavaCompiler createCompiler( JavaDialectConfiguration javaConf,
-                                         String prefix ) {
-        JavaCompiler javaCompiler = JavaCompilerFactory.getInstance().loadCompiler( javaConf );
-        if ( javaCompiler instanceof EclipseJavaCompiler ) {
-            ( (EclipseJavaCompiler) javaCompiler ).setPrefix( prefix );
-        }
-        return javaCompiler;
-    }
-    
     public static String findPomProperties( ZipFile zipFile ) {
         Enumeration<? extends ZipEntry> zipEntries = zipFile.entries();
         while ( zipEntries.hasMoreElements() ) {
diff --git a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieContainerImpl.java b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieContainerImpl.java
index b2663cb..8895844 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieContainerImpl.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieContainerImpl.java
@@ -70,9 +70,7 @@ import org.kie.api.runtime.KieSessionConfiguration;
 import org.kie.api.runtime.StatelessKieSession;
 import org.kie.api.runtime.rule.RuleUnitExecutor;
 import org.kie.api.time.Calendar;
-import org.kie.internal.builder.ChangeType;
 import org.kie.internal.builder.KnowledgeBuilder;
-import org.kie.internal.builder.ResourceChangeSet;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -239,7 +237,7 @@ public class KieContainerImpl
 
     private Results update( InternalKieModule currentKM, InternalKieModule newKM ) {
         final KieJarChangeSet cs = currentKM.getChanges( newKM );
-        List<String> modifiedClassNames = getModifiedClasses(cs);
+        List<String> modifiedClassNames = cs.getModifiedClasses(this);
         final boolean modifyingUsedClass = isModifyingUsedClass( modifiedClassNames, getClassLoader() );
         final Collection<Class<?>> modifiedClasses = reinitModifiedClasses( newKM, modifiedClassNames, getClassLoader(), modifyingUsedClass );
         final Collection<String> unchangedResources = getUnchangedResources( newKM, cs );
@@ -325,19 +323,6 @@ public class KieContainerImpl
         return classes;
     }
 
-    private List<String> getModifiedClasses(KieJarChangeSet cs) {
-        List<String> modifiedClasses = new ArrayList<String>();
-        for ( ResourceChangeSet rcs : cs.getChanges().values() ) {
-            if ( rcs.getChangeType() != ChangeType.REMOVED ) {
-                String resourceName = rcs.getResourceName();
-                if ( resourceName.endsWith( ".class" ) ) {
-                    modifiedClasses.add(resourceName);
-                }
-            }
-        }
-        return modifiedClasses;
-    }
-
     public Collection<String> getKieBaseNames() {
         return kProject.getKieBaseNames();
     }
diff --git a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/MemoryKieModule.java b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/MemoryKieModule.java
index 23ff267..90fcb15 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/MemoryKieModule.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/MemoryKieModule.java
@@ -34,7 +34,6 @@ import org.drools.compiler.compiler.io.memory.MemoryFileSystem;
 import org.drools.compiler.kproject.models.KieModuleModelImpl;
 import org.drools.core.common.ResourceProvider;
 import org.kie.api.builder.ReleaseId;
-import org.kie.api.builder.model.KieBaseModel;
 import org.kie.api.builder.model.KieModuleModel;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -108,24 +107,6 @@ public class MemoryKieModule extends AbstractKieModule
         return "MemoryKieModule[releaseId=" + getReleaseId() + "]";
     }
 
-    MemoryKieModule cloneForIncrementalCompilation(ReleaseId releaseId, KieModuleModel kModuleModel, MemoryFileSystem newFs) {
-        MemoryKieModule clone = new MemoryKieModule(releaseId, kModuleModel, newFs);
-        for (InternalKieModule dep : getKieDependencies().values()) {
-            clone.addKieDependency(dep);
-        }
-        for (KieBaseModel kBaseModel : getKieModuleModel().getKieBaseModels().values()) {
-            clone.cacheKnowledgeBuilderForKieBase(kBaseModel.getName(), getKnowledgeBuilderForKieBase( kBaseModel.getName() ));
-        }
-
-        clone.setPomModel( getPomModel() );
-        for ( InternalKieModule dependency : getKieDependencies().values() ) {
-            clone.addKieDependency( dependency );
-        }
-        clone.setUnresolvedDependencies( getUnresolvedDependencies() );
-        
-        return clone;
-    }
-
     @Override
     public ResourceProvider createResourceProvider() {
         return new MemoryKieModuleResourceProvider(mfs);
diff --git a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/ResultsImpl.java b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/ResultsImpl.java
index 86ef364..26560ea 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/ResultsImpl.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/ResultsImpl.java
@@ -16,13 +16,17 @@
 package org.drools.compiler.kie.builder.impl;
 
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.List;
 
+import org.drools.compiler.kproject.models.KieBaseModelImpl;
 import org.drools.core.kie.impl.MessageImpl;
 import org.kie.api.builder.Message;
 import org.kie.api.builder.Message.Level;
 import org.kie.api.builder.Results;
+import org.kie.api.definition.KiePackage;
 import org.kie.internal.builder.InternalMessage;
+import org.kie.internal.builder.KnowledgeBuilder;
 import org.kie.internal.builder.KnowledgeBuilderResult;
 import org.kie.internal.jci.CompilationProblem;
 
@@ -105,4 +109,20 @@ public class ResultsImpl
         return sBuilder.toString();
     }
 
+    public KnowledgePackagesBuildResult buildKnowledgePackages(KieBaseModelImpl kBaseModel, KieProject kieProject, AbstractKieModule abstractKieModule) {
+        Collection<KiePackage> pkgs = abstractKieModule.getKnowledgePackagesForKieBase(kBaseModel.getName());
+
+        if ( pkgs == null ) {
+            KnowledgeBuilder kbuilder = kieProject.buildKnowledgePackages(kBaseModel, this);
+            if ( kbuilder.hasErrors() ) {
+                // Messages already populated by the buildKnowlegePackages
+                return new KnowledgePackagesBuildResult(true, pkgs);
+            }
+
+            // if we get to here, then we know the pkgs is now cached
+            pkgs = abstractKieModule.getKnowledgePackagesForKieBase(kBaseModel.getName());
+        }
+
+        return new KnowledgePackagesBuildResult(false, pkgs);
+    }
 }
diff --git a/drools-compiler/src/main/java/org/drools/compiler/kie/util/KieJarChangeSet.java b/drools-compiler/src/main/java/org/drools/compiler/kie/util/KieJarChangeSet.java
index af3e802..4c7ce53 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/kie/util/KieJarChangeSet.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/kie/util/KieJarChangeSet.java
@@ -15,9 +15,12 @@
 
 package org.drools.compiler.kie.util;
 
+import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
 
+import org.drools.compiler.kie.builder.impl.KieContainerImpl;
 import org.kie.internal.builder.ChangeType;
 import org.kie.internal.builder.ResourceChangeSet;
 
@@ -75,4 +78,17 @@ public class KieJarChangeSet {
     public String toString() {
         return "KieJarChangeSet [changes=" + changes + "]";
     }
+
+    public List<String> getModifiedClasses(KieContainerImpl kieContainer) {
+        List<String> modifiedClasses = new ArrayList<String>();
+        for ( ResourceChangeSet rcs : getChanges().values() ) {
+            if ( rcs.getChangeType() != ChangeType.REMOVED ) {
+                String resourceName = rcs.getResourceName();
+                if ( resourceName.endsWith( ".class" ) ) {
+                    modifiedClasses.add(resourceName);
+                }
+            }
+        }
+        return modifiedClasses;
+    }
 }
diff --git a/drools-compiler/src/main/java/org/drools/compiler/lang/DroolsSentence.java b/drools-compiler/src/main/java/org/drools/compiler/lang/DroolsSentence.java
index 9f9b1c9..af5b95c 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/lang/DroolsSentence.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/lang/DroolsSentence.java
@@ -117,20 +117,6 @@ public class DroolsSentence {
     }
 
     /**
-     * Add a token to the content and sets char offset info
-     *
-     * @param token
-     *            token to be stored
-     */
-    public void addContent(DroolsToken token) {
-        if (startOffset == -1) {
-            startOffset = token.getStartIndex();
-        }
-        endOffset = token.getStopIndex();
-        this.content.add(token);
-    }
-
-    /**
      * Add a location to the content
      *
      * @param contextInfo
diff --git a/drools-compiler/src/main/java/org/drools/compiler/lang/DroolsToken.java b/drools-compiler/src/main/java/org/drools/compiler/lang/DroolsToken.java
index dac0781..c645ba2 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/lang/DroolsToken.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/lang/DroolsToken.java
@@ -82,4 +82,17 @@ public class DroolsToken extends CommonToken {
     public void setEditorType(DroolsEditorType editorType) {
         this.editorType = editorType;
     }
+
+    /**
+     * Add a token to the content and sets char offset info
+     *
+     * @param droolsSentence
+     */
+    public void addContent(DroolsSentence droolsSentence) {
+        if (droolsSentence.getStartOffset() == -1) {
+            droolsSentence.setStartOffset(getStartIndex());
+        }
+        droolsSentence.setEndOffset(getStopIndex());
+        droolsSentence.getContent().add(this);
+    }
 }
diff --git a/drools-compiler/src/main/java/org/drools/compiler/lang/MVELDumper.java b/drools-compiler/src/main/java/org/drools/compiler/lang/MVELDumper.java
index c25e92a..7958c17 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/lang/MVELDumper.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/lang/MVELDumper.java
@@ -21,7 +21,6 @@ import java.util.List;
 import java.util.Map;
 import java.util.regex.Pattern;
 
-import org.drools.compiler.compiler.DrlExprParser;
 import org.drools.compiler.lang.descr.AtomicExprDescr;
 import org.drools.compiler.lang.descr.BaseDescr;
 import org.drools.compiler.lang.descr.BindingDescr;
@@ -123,29 +122,11 @@ public class MVELDumper extends ReflectiveVisitor implements ExpressionRewriter
         } else if ( base instanceof RelationalExprDescr ) {
             processRelationalExpression(sbuilder, (RelationalExprDescr) base, parent, context);
         } else if ( base instanceof ExprConstraintDescr ) {
-            processConstraint(sbuilder, (ExprConstraintDescr) base, isInsideRelCons, context);
+            ((ExprConstraintDescr) base).processConstraint(sbuilder, isInsideRelCons, context, this);
         }
         return sbuilder;
     }
 
-    private void processConstraint(StringBuilder sbuilder, ExprConstraintDescr base, boolean isInsideRelCons, MVELDumperContext context) {
-        DrlExprParser expr = new DrlExprParser( context.getRuleContext().getConfiguration().getLanguageLevel() );
-        ConstraintConnectiveDescr result = expr.parse( base.getExpression() );
-        if ( result.getDescrs().size() == 1 ) {
-            dump( sbuilder,
-                  result.getDescrs().get( 0 ),
-                  0,
-                  isInsideRelCons,
-                  context );
-        } else {
-            dump( sbuilder,
-                  result,
-                  0,
-                  isInsideRelCons,
-                  context );
-        }
-    }
-
     private String[] processAtomicExpression( StringBuilder sbuilder, MVELDumperContext context, AtomicExprDescr atomicExpr, ConstraintConnectiveDescr parent, int parentIdx ) {
         String expr = atomicExpr.getExpression().trim();
         expr = processEval(expr);
diff --git a/drools-compiler/src/main/java/org/drools/compiler/lang/ParserHelper.java b/drools-compiler/src/main/java/org/drools/compiler/lang/ParserHelper.java
index 234c54a..04352db 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/lang/ParserHelper.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/lang/ParserHelper.java
@@ -161,7 +161,7 @@ public class ParserHelper {
                       DroolsEditorType editorType ) {
         if ( isEditorInterfaceEnabled && token != null && editorType != null ) {
             ((DroolsToken) token).setEditorType( editorType );
-            getActiveSentence().addContent( (DroolsToken) token );
+            ((DroolsToken) token).addContent(getActiveSentence());
         }
     }
 
diff --git a/drools-compiler/src/main/java/org/drools/compiler/lang/api/impl/EnumDeclarationDescrBuilderImpl.java b/drools-compiler/src/main/java/org/drools/compiler/lang/api/impl/EnumDeclarationDescrBuilderImpl.java
index bc5f814..8adcb7d 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/lang/api/impl/EnumDeclarationDescrBuilderImpl.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/lang/api/impl/EnumDeclarationDescrBuilderImpl.java
@@ -49,14 +49,14 @@ public class EnumDeclarationDescrBuilderImpl extends BaseDescrBuilderImpl<Packag
 
     public FieldDescrBuilder<AbstractClassTypeDeclarationBuilder<EnumDeclarationDescr>> newField( String name ) {
         FieldDescrBuilder<AbstractClassTypeDeclarationBuilder<EnumDeclarationDescr>> field = new FieldDescrBuilderImpl( this, name );
-        descr.addField( field.getDescr() );
+        field.getDescr().addField(descr);
         return field;
     }
 
     public EnumLiteralDescrBuilder newEnumLiteral( String lit ) {
         EnumLiteralDescrBuilder literal = new EnumLiteralDescrBuilderImpl( this );
         literal.name( lit );
-        descr.addLiteral( literal.getDescr() );
+        literal.getDescr().addLiteral(descr);
         return literal;
     }
 
diff --git a/drools-compiler/src/main/java/org/drools/compiler/lang/api/impl/TypeDeclarationDescrBuilderImpl.java b/drools-compiler/src/main/java/org/drools/compiler/lang/api/impl/TypeDeclarationDescrBuilderImpl.java
index 187a0de..de6fa86 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/lang/api/impl/TypeDeclarationDescrBuilderImpl.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/lang/api/impl/TypeDeclarationDescrBuilderImpl.java
@@ -55,7 +55,7 @@ public class TypeDeclarationDescrBuilderImpl extends BaseDescrBuilderImpl<Packag
 
     public FieldDescrBuilder<AbstractClassTypeDeclarationBuilder<TypeDeclarationDescr>> newField( String name ) {
         FieldDescrBuilder<AbstractClassTypeDeclarationBuilder<TypeDeclarationDescr>> field = new FieldDescrBuilderImpl( this, name );
-        descr.addField( field.getDescr() );
+        field.getDescr().addField(descr);
         return field;
     }
 
diff --git a/drools-compiler/src/main/java/org/drools/compiler/lang/descr/AbstractClassTypeDeclarationDescr.java b/drools-compiler/src/main/java/org/drools/compiler/lang/descr/AbstractClassTypeDeclarationDescr.java
index cee5e2a..b0ad8c9 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/lang/descr/AbstractClassTypeDeclarationDescr.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/lang/descr/AbstractClassTypeDeclarationDescr.java
@@ -139,13 +139,6 @@ public abstract class AbstractClassTypeDeclarationDescr extends AnnotatedBaseDes
         this.fields = fields;
     }
 
-    public void addField( TypeFieldDescr field ) {
-        // Setting the resource on the field does not seem to be necessary (because it's always already been set)
-        // but I'm leaving in this just to be safe..
-        field.setResource(getResource());
-        getFields().put( field.getFieldName(), field );
-    }
-
     @Override
     public void setResource(Resource resource) {
         super.setResource(resource);
diff --git a/drools-compiler/src/main/java/org/drools/compiler/lang/descr/BaseDescr.java b/drools-compiler/src/main/java/org/drools/compiler/lang/descr/BaseDescr.java
index d7bfe44..3635f26 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/lang/descr/BaseDescr.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/lang/descr/BaseDescr.java
@@ -170,4 +170,10 @@ public class BaseDescr
     public void accept(DescrVisitor visitor) {
         visitor.visit(this);
     }
+
+    public void copyParameters(PredicateDescr predicateDescr) {
+        if ( this instanceof RelationalExprDescr ) {
+            predicateDescr.setParameters( ((RelationalExprDescr) this).getParameters() );
+        }
+    }
 }
diff --git a/drools-compiler/src/main/java/org/drools/compiler/lang/descr/CompositePackageDescr.java b/drools-compiler/src/main/java/org/drools/compiler/lang/descr/CompositePackageDescr.java
index cfbcfed..f5df18b 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/lang/descr/CompositePackageDescr.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/lang/descr/CompositePackageDescr.java
@@ -21,7 +21,6 @@ import org.kie.internal.builder.ResourceChange;
 
 import java.util.ArrayList;
 import java.util.List;
-import java.util.Set;
 
 public class CompositePackageDescr extends PackageDescr {
     
@@ -31,7 +30,7 @@ public class CompositePackageDescr extends PackageDescr {
 
     public CompositePackageDescr(Resource resource, PackageDescr packageDescr) {
         super(packageDescr.getNamespace(), packageDescr.getDocumentation());
-        internalAdd(resource, packageDescr);
+        packageDescr.internalAdd(resource, this);
     }
 
     public void addPackageDescr(Resource resource, PackageDescr packageDescr) {
@@ -40,100 +39,9 @@ public class CompositePackageDescr extends PackageDescr {
                 + ") in different namespaces (namespace=" + getNamespace()
                 + " packageDescr=" + packageDescr.getNamespace() + ")" );
         }
-        internalAdd(resource, packageDescr);
+        packageDescr.internalAdd(resource, this);
     }
 
-    private void internalAdd(Resource resource, PackageDescr packageDescr) {
-        List<ImportDescr> currentImports = getImports();
-        for (ImportDescr descr : packageDescr.getImports()) {
-            if (!currentImports.contains(descr)) {
-                addImport(descr);
-                descr.setResource(resource);
-            }
-        }
-
-        List<FunctionImportDescr> currentFunctionImports = getFunctionImports();
-        for (FunctionImportDescr descr : packageDescr.getFunctionImports()) {
-            if (!currentFunctionImports.contains(descr)) {
-                addFunctionImport(descr);
-                descr.setResource(resource);
-            }
-        }
-        
-        List<AccumulateImportDescr> accumulateImports = getAccumulateImports();
-        for (AccumulateImportDescr descr : packageDescr.getAccumulateImports()) {
-            if (!accumulateImports.contains(descr)) {
-                addAccumulateImport(descr);
-                descr.setResource(resource);
-            }
-        }
-
-        List<AttributeDescr> currentAttributeDescrs = getAttributes();
-        for (AttributeDescr descr : packageDescr.getAttributes()) {
-            if (!currentAttributeDescrs.contains(descr)) {
-                addAttribute(descr);
-                descr.setResource(resource);
-            }
-        }
-
-        List<GlobalDescr> currentGlobalDescrs = getGlobals();
-        for (GlobalDescr descr : packageDescr.getGlobals()) {
-            if (!currentGlobalDescrs.contains(descr)) {
-                addGlobal(descr);
-                descr.setResource(resource);
-            }
-        }
-
-        List<FunctionDescr> currentFunctionDescrs = getFunctions();
-        for (FunctionDescr descr : packageDescr.getFunctions()) {
-            if (!currentFunctionDescrs.contains(descr)) {
-                addFunction(descr);
-                descr.setResource(resource);
-            }
-        }
-
-        List<RuleDescr> ruleDescrs = getRules();
-        for (RuleDescr descr : packageDescr.getRules()) {
-            if (!ruleDescrs.contains(descr)) {
-                addRule(descr);
-                descr.setResource(resource);
-            }
-        }
-
-        List<TypeDeclarationDescr> typeDeclarationDescrs = getTypeDeclarations();
-        for (TypeDeclarationDescr descr : packageDescr.getTypeDeclarations()) {
-            if (!typeDeclarationDescrs.contains(descr)) {
-                addTypeDeclaration(descr);
-                descr.setResource(resource);
-            }
-
-        }
-
-        List<EnumDeclarationDescr> enumDeclarationDescrs = getEnumDeclarations();
-        for (EnumDeclarationDescr enumDescr : packageDescr.getEnumDeclarations()) {
-            if (!enumDeclarationDescrs.contains(enumDescr)) {
-                addEnumDeclaration(enumDescr);
-                enumDescr.setResource(resource);
-            }
-        }
-
-        Set<EntryPointDeclarationDescr> entryPointDeclarationDescrs = getEntryPointDeclarations();
-        for (EntryPointDeclarationDescr descr : packageDescr.getEntryPointDeclarations()) {
-            if (!entryPointDeclarationDescrs.contains(descr)) {
-                addEntryPointDeclaration(descr);
-                descr.setResource(resource);
-            }
-        }
-
-        Set<WindowDeclarationDescr> windowDeclarationDescrs = getWindowDeclarations();
-        for (WindowDeclarationDescr descr : packageDescr.getWindowDeclarations()) {
-            if (!windowDeclarationDescrs.contains(descr)) {
-                addWindowDeclaration(descr);
-                descr.setResource(resource);
-            }
-        }
-    }
-    
     public CompositeAssetFilter getFilter() {
         return filter;
     }
diff --git a/drools-compiler/src/main/java/org/drools/compiler/lang/descr/EnumDeclarationDescr.java b/drools-compiler/src/main/java/org/drools/compiler/lang/descr/EnumDeclarationDescr.java
index 212dc94..7e7094c 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/lang/descr/EnumDeclarationDescr.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/lang/descr/EnumDeclarationDescr.java
@@ -77,13 +77,6 @@ public class EnumDeclarationDescr extends AbstractClassTypeDeclarationDescr {
         this.literals = literals;
     }
 
-    public void addLiteral( EnumLiteralDescr lit ) {
-        if ( this.literals == Collections.EMPTY_LIST ) {
-            this.literals = new ArrayList<EnumLiteralDescr>();
-        }
-        this.literals.add( lit );
-    }
-
 
     public String getSuperTypeName() {
         return "Enum";
diff --git a/drools-compiler/src/main/java/org/drools/compiler/lang/descr/EnumLiteralDescr.java b/drools-compiler/src/main/java/org/drools/compiler/lang/descr/EnumLiteralDescr.java
index f6a7522..2aecf17 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/lang/descr/EnumLiteralDescr.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/lang/descr/EnumLiteralDescr.java
@@ -105,4 +105,10 @@ public class EnumLiteralDescr extends AnnotatedBaseDescr
     }
 
 
+    public void addLiteral(EnumDeclarationDescr enumDeclarationDescr) {
+        if ( enumDeclarationDescr.getLiterals() == Collections.EMPTY_LIST ) {
+            enumDeclarationDescr.setLiterals(new ArrayList<EnumLiteralDescr>());
+        }
+        enumDeclarationDescr.getLiterals().add(this);
+    }
 }
diff --git a/drools-compiler/src/main/java/org/drools/compiler/lang/descr/ExprConstraintDescr.java b/drools-compiler/src/main/java/org/drools/compiler/lang/descr/ExprConstraintDescr.java
index 5e38bd7..0ce4373 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/lang/descr/ExprConstraintDescr.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/lang/descr/ExprConstraintDescr.java
@@ -15,6 +15,9 @@
  */
 package org.drools.compiler.lang.descr;
 
+import org.drools.compiler.compiler.DrlExprParser;
+import org.drools.compiler.lang.MVELDumper;
+
 /**
  * This represents a constraint in a pattern defined by an arbitrary
  * expression. The constraint can be any valid java/mvel expression.
@@ -22,7 +25,25 @@ package org.drools.compiler.lang.descr;
 public class ExprConstraintDescr extends BaseDescr implements ExpressionDescr {
 
     private static final long serialVersionUID = 520l;
-    
+
+    public void processConstraint(StringBuilder sbuilder, boolean isInsideRelCons, MVELDumper.MVELDumperContext context, MVELDumper mvelDumper) {
+        DrlExprParser expr = new DrlExprParser( context.getRuleContext().getConfiguration().getLanguageLevel() );
+        ConstraintConnectiveDescr result = expr.parse( getExpression() );
+        if ( result.getDescrs().size() == 1 ) {
+            mvelDumper.dump( sbuilder,
+                  result.getDescrs().get( 0 ),
+                  0,
+                  isInsideRelCons,
+                  context );
+        } else {
+            mvelDumper.dump( sbuilder,
+                  result,
+                  0,
+                  isInsideRelCons,
+                  context );
+        }
+    }
+
     public static enum Type {
         NAMED, POSITIONAL;
     }
diff --git a/drools-compiler/src/main/java/org/drools/compiler/lang/descr/PackageDescr.java b/drools-compiler/src/main/java/org/drools/compiler/lang/descr/PackageDescr.java
index 4afd372..b61f931 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/lang/descr/PackageDescr.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/lang/descr/PackageDescr.java
@@ -305,4 +305,95 @@ public class PackageDescr extends BaseDescr
             }
         }
     }
+
+    public void internalAdd(Resource resource, CompositePackageDescr compositePackageDescr) {
+        List<ImportDescr> currentImports = compositePackageDescr.getImports();
+        for (ImportDescr descr : getImports()) {
+            if (!currentImports.contains(descr)) {
+                compositePackageDescr.addImport(descr);
+                descr.setResource(resource);
+            }
+        }
+
+        List<FunctionImportDescr> currentFunctionImports = compositePackageDescr.getFunctionImports();
+        for (FunctionImportDescr descr : getFunctionImports()) {
+            if (!currentFunctionImports.contains(descr)) {
+                compositePackageDescr.addFunctionImport(descr);
+                descr.setResource(resource);
+            }
+        }
+
+        List<AccumulateImportDescr> accumulateImports = compositePackageDescr.getAccumulateImports();
+        for (AccumulateImportDescr descr : getAccumulateImports()) {
+            if (!accumulateImports.contains(descr)) {
+                compositePackageDescr.addAccumulateImport(descr);
+                descr.setResource(resource);
+            }
+        }
+
+        List<AttributeDescr> currentAttributeDescrs = compositePackageDescr.getAttributes();
+        for (AttributeDescr descr : getAttributes()) {
+            if (!currentAttributeDescrs.contains(descr)) {
+                compositePackageDescr.addAttribute(descr);
+                descr.setResource(resource);
+            }
+        }
+
+        List<GlobalDescr> currentGlobalDescrs = compositePackageDescr.getGlobals();
+        for (GlobalDescr descr : getGlobals()) {
+            if (!currentGlobalDescrs.contains(descr)) {
+                compositePackageDescr.addGlobal(descr);
+                descr.setResource(resource);
+            }
+        }
+
+        List<FunctionDescr> currentFunctionDescrs = compositePackageDescr.getFunctions();
+        for (FunctionDescr descr : getFunctions()) {
+            if (!currentFunctionDescrs.contains(descr)) {
+                compositePackageDescr.addFunction(descr);
+                descr.setResource(resource);
+            }
+        }
+
+        List<RuleDescr> ruleDescrs = compositePackageDescr.getRules();
+        for (RuleDescr descr : getRules()) {
+            if (!ruleDescrs.contains(descr)) {
+                compositePackageDescr.addRule(descr);
+                descr.setResource(resource);
+            }
+        }
+
+        List<TypeDeclarationDescr> typeDeclarationDescrs = compositePackageDescr.getTypeDeclarations();
+        for (TypeDeclarationDescr descr : getTypeDeclarations()) {
+            if (!typeDeclarationDescrs.contains(descr)) {
+                compositePackageDescr.addTypeDeclaration(descr);
+                descr.setResource(resource);
+            }
+
+        }
+
+        List<EnumDeclarationDescr> enumDeclarationDescrs = compositePackageDescr.getEnumDeclarations();
+        for (EnumDeclarationDescr enumDescr : getEnumDeclarations()) {
+            if (!enumDeclarationDescrs.contains(enumDescr)) {
+                compositePackageDescr.addEnumDeclaration(enumDescr);
+                enumDescr.setResource(resource);
+            }
+        }
+
+        Set<EntryPointDeclarationDescr> entryPointDeclarationDescrs = compositePackageDescr.getEntryPointDeclarations();
+        for (EntryPointDeclarationDescr descr : getEntryPointDeclarations()) {
+            if (!entryPointDeclarationDescrs.contains(descr)) {
+                compositePackageDescr.addEntryPointDeclaration(descr);
+                descr.setResource(resource);
+            }
+        }
+
+        Set<WindowDeclarationDescr> windowDeclarationDescrs = compositePackageDescr.getWindowDeclarations();
+        for (WindowDeclarationDescr descr : getWindowDeclarations()) {
+            if (!windowDeclarationDescrs.contains(descr)) {
+                compositePackageDescr.addWindowDeclaration(descr);
+                descr.setResource(resource);
+            }
+        }
+    }
 }
diff --git a/drools-compiler/src/main/java/org/drools/compiler/lang/descr/PatternDescr.java b/drools-compiler/src/main/java/org/drools/compiler/lang/descr/PatternDescr.java
index 5e57e8e..f58ddf9 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/lang/descr/PatternDescr.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/lang/descr/PatternDescr.java
@@ -15,13 +15,15 @@
  */
 package org.drools.compiler.lang.descr;
 
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
+import java.util.*;
 
 import org.drools.compiler.rule.builder.RuleBuildContext;
 import org.drools.core.rule.Declaration;
 
+import static org.drools.core.util.ClassUtils.getter2property;
+import static org.drools.core.util.StringUtils.extractFirstIdentifier;
+import static org.drools.core.util.StringUtils.lcFirst;
+
 public class PatternDescr extends AnnotatedBaseDescr
     implements
     Cloneable {
@@ -266,4 +268,34 @@ public class PatternDescr extends AnnotatedBaseDescr
     public void accept(DescrVisitor visitor) {
         visitor.visit(this);
     }
+
+    public Collection<String> lookAheadFieldsOfIdentifier(RuleDescr ruleDescr) {
+        String identifier = getIdentifier();
+        if (identifier == null) {
+            return Collections.emptyList();
+        }
+
+        Collection<String> props = new HashSet<>();
+        boolean found = false;
+        for (PatternDescr pattern : ruleDescr.getLhs().getAllPatternDescr()) {
+            if (pattern == this) {
+                found = true;
+                continue;
+            }
+            if (pattern instanceof PatternDescr) {
+                for (BaseDescr expr : ( (PatternDescr) pattern ).getDescrs()) {
+                    if (expr instanceof ExprConstraintDescr) {
+                        String text = expr.getText();
+                        int pos = text.indexOf( identifier + "." );
+                        if ( pos == 0 || ( pos > 0 && !Character.isJavaIdentifierPart(text.charAt( pos-1 ))) ) {
+                            String prop = extractFirstIdentifier(text, pos + identifier.length() + 1);
+                            String propFromGetter = getter2property(prop);
+                            props.add(propFromGetter != null ? propFromGetter : lcFirst(prop));
+                        }
+                    }
+                }
+            }
+        }
+        return props;
+    }
 }
diff --git a/drools-compiler/src/main/java/org/drools/compiler/lang/descr/PredicateDescr.java b/drools-compiler/src/main/java/org/drools/compiler/lang/descr/PredicateDescr.java
index d1edce5..508e08e 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/lang/descr/PredicateDescr.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/lang/descr/PredicateDescr.java
@@ -82,9 +82,4 @@ public class PredicateDescr extends RestrictionDescr {
     }
 
 
-    public void copyParameters( BaseDescr base ) {
-        if ( base instanceof RelationalExprDescr ) {
-            setParameters( ((RelationalExprDescr) base).getParameters() );
-        }
-    }
 }
diff --git a/drools-compiler/src/main/java/org/drools/compiler/lang/descr/RuleDescr.java b/drools-compiler/src/main/java/org/drools/compiler/lang/descr/RuleDescr.java
index d750b16..1d8594d 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/lang/descr/RuleDescr.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/lang/descr/RuleDescr.java
@@ -20,10 +20,7 @@ import java.io.IOException;
 import java.io.ObjectInput;
 import java.io.ObjectOutput;
 import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
 import java.util.HashMap;
-import java.util.HashSet;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
@@ -31,9 +28,7 @@ import java.util.Map;
 import org.drools.core.definitions.rule.impl.RuleImpl;
 import org.drools.core.rule.Dialectable;
 
-import static org.drools.core.util.ClassUtils.getter2property;
 import static org.drools.core.util.StringUtils.extractFirstIdentifier;
-import static org.drools.core.util.StringUtils.lcFirst;
 
 public class RuleDescr extends AnnotatedBaseDescr
     implements
@@ -346,33 +341,4 @@ public class RuleDescr extends AnnotatedBaseDescr
     }
 
 
-    public Collection<String> lookAheadFieldsOfIdentifier( PatternDescr patternDescr ) {
-        String identifier = patternDescr.getIdentifier();
-        if (identifier == null) {
-            return Collections.emptyList();
-        }
-
-        Collection<String> props = new HashSet<>();
-        boolean found = false;
-        for (PatternDescr pattern : lhs.getAllPatternDescr()) {
-            if (pattern == patternDescr) {
-                found = true;
-                continue;
-            }
-            if (pattern instanceof PatternDescr) {
-                for (BaseDescr expr : ( (PatternDescr) pattern ).getDescrs()) {
-                    if (expr instanceof ExprConstraintDescr) {
-                        String text = expr.getText();
-                        int pos = text.indexOf( identifier + "." );
-                        if ( pos == 0 || ( pos > 0 && !Character.isJavaIdentifierPart(text.charAt( pos-1 ))) ) {
-                            String prop = extractFirstIdentifier(text, pos + identifier.length() + 1);
-                            String propFromGetter = getter2property(prop);
-                            props.add(propFromGetter != null ? propFromGetter : lcFirst(prop));
-                        }
-                    }
-                }
-            }
-        }
-        return props;
-    }
 }
diff --git a/drools-compiler/src/main/java/org/drools/compiler/lang/descr/TypeDeclarationDescr.java b/drools-compiler/src/main/java/org/drools/compiler/lang/descr/TypeDeclarationDescr.java
index bc99d36..37968b7 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/lang/descr/TypeDeclarationDescr.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/lang/descr/TypeDeclarationDescr.java
@@ -16,7 +16,11 @@
 
 package org.drools.compiler.lang.descr;
 
+import org.drools.compiler.builder.impl.ClassHierarchyManager;
+import org.drools.core.factmodel.FieldDefinition;
+import org.drools.core.factmodel.traits.Alias;
 import org.drools.core.factmodel.traits.Trait;
+import org.kie.api.definition.type.Key;
 
 import java.io.IOException;
 import java.io.ObjectInput;
@@ -129,4 +133,38 @@ public class TypeDeclarationDescr
         super.indexByFQN( isStrict );
         trait |= hasAnnotation( Trait.class );
     }
+
+    public TypeFieldDescr buildInheritedFieldDescrFromDefinition(org.kie.api.definition.type.FactField fld, ClassHierarchyManager classHierarchyManager) {
+        TypeFieldDescr inheritedFldDescr = new TypeFieldDescr();
+        inheritedFldDescr.setFieldName(fld.getName());
+        inheritedFldDescr.setResource(getResource());
+        PatternDescr fldType = new PatternDescr();
+        fldType.setObjectType(((FieldDefinition) fld).getTypeName());
+        inheritedFldDescr.setPattern(fldType); // also sets resource for PatternDescr fldType
+        if (fld.isKey()) {
+            AnnotationDescr keyAnnotation = new AnnotationDescr(Key.class.getCanonicalName());
+            keyAnnotation.setFullyQualifiedName(Key.class.getCanonicalName());
+            keyAnnotation.setResource(getResource());
+            inheritedFldDescr.addAnnotation(keyAnnotation);
+        }
+        inheritedFldDescr.setIndex(((FieldDefinition) fld).getDeclIndex());
+        inheritedFldDescr.setInherited(true);
+
+        String initExprOverride = ((FieldDefinition) fld).getInitExpr();
+        int overrideCount = 0;
+        // only @aliasing local fields may override defaults.
+        for (TypeFieldDescr localField : getFields().values()) {
+            Alias alias = localField.getTypedAnnotation(Alias.class);
+            if (alias != null && fld.getName().equals(alias.value().replaceAll("\"", "")) && localField.getInitExpr() != null) {
+                overrideCount++;
+                initExprOverride = localField.getInitExpr();
+            }
+        }
+        if (overrideCount > 1) {
+            // however, only one is allowed
+            initExprOverride = null;
+        }
+        inheritedFldDescr.setInitExpr(initExprOverride);
+        return inheritedFldDescr;
+    }
 }
diff --git a/drools-compiler/src/main/java/org/drools/compiler/lang/descr/TypeFieldDescr.java b/drools-compiler/src/main/java/org/drools/compiler/lang/descr/TypeFieldDescr.java
index 24762e9..9c0b14e 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/lang/descr/TypeFieldDescr.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/lang/descr/TypeFieldDescr.java
@@ -160,4 +160,11 @@ public class TypeFieldDescr extends AnnotatedBaseDescr
     public void setOverriding( TypeFieldDescr overriding ) {
         this.overriding = overriding;
     }
+
+    public void addField(AbstractClassTypeDeclarationDescr abstractClassTypeDeclarationDescr) {
+        // Setting the resource on the field does not seem to be necessary (because it's always already been set)
+        // but I'm leaving in this just to be safe..
+        setResource(abstractClassTypeDeclarationDescr.getResource());
+        abstractClassTypeDeclarationDescr.getFields().put( getFieldName(), this);
+    }
 }
diff --git a/drools-compiler/src/main/java/org/drools/compiler/lang/dsl/DefaultExpanderResolver.java b/drools-compiler/src/main/java/org/drools/compiler/lang/dsl/DefaultExpanderResolver.java
index b574e64..59be38c 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/lang/dsl/DefaultExpanderResolver.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/lang/dsl/DefaultExpanderResolver.java
@@ -21,7 +21,10 @@ import java.io.Reader;
 import java.util.HashMap;
 import java.util.Map;
 
+import org.drools.compiler.compiler.DrlParser;
+import org.drools.compiler.compiler.DroolsParserException;
 import org.drools.compiler.lang.Expander;
+import org.drools.compiler.lang.ExpanderException;
 import org.drools.compiler.lang.ExpanderResolver;
 
 /**
@@ -94,4 +97,29 @@ public class DefaultExpanderResolver
         }
     }
 
+    /**
+     * This will expand the DRL using the given expander resolver. useful for
+     * debugging.
+     *
+     * @param source -
+     *            the source which use a DSL
+     * @param drlParser
+     * @throws DroolsParserException
+     *             If unable to expand in any way.
+     */
+    public String getExpandedDRL(final String source, DrlParser drlParser) throws DroolsParserException {
+
+        final Expander expander = get("*",
+                null);
+        final String expanded = expander.expand( source );
+        if ( expander.hasErrors() ) {
+            String err = "";
+            for ( ExpanderException ex : expander.getErrors() ) {
+                err = err + "\n Line:[" + ex.getLine() + "] " + ex.getMessage();
+
+            }
+            throw new DroolsParserException( err );
+        }
+        return expanded;
+    }
 }
diff --git a/drools-compiler/src/main/java/org/drools/compiler/rule/builder/PatternBuilder.java b/drools-compiler/src/main/java/org/drools/compiler/rule/builder/PatternBuilder.java
index 0ecfdef..8d6131d 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/rule/builder/PatternBuilder.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/rule/builder/PatternBuilder.java
@@ -624,7 +624,7 @@ public class PatternBuilder
 
         TypeDeclaration typeDeclaration = getTypeDeclaration(pattern, context);
         if (typeDeclaration != null && typeDeclaration.isPropertyReactive()) {
-            for (String field : context.getRuleDescr().lookAheadFieldsOfIdentifier(patternDescr)) {
+            for (String field : patternDescr.lookAheadFieldsOfIdentifier(context.getRuleDescr())) {
                 addFieldToPatternWatchlist(pattern, typeDeclaration, field);
             }
         }
@@ -1325,7 +1325,7 @@ public class PatternBuilder
         context.setDialect(mvelDialect);
 
         PredicateDescr pdescr = new PredicateDescr(context.getRuleDescr().getResource(), expr);
-        pdescr.copyParameters(base);
+        base.copyParameters(pdescr);
         pdescr.copyLocation(base);
         Constraint evalConstraint = buildEval(context, pattern, pdescr, aliases, expr, false);
 
diff --git a/drools-compiler/src/main/java/org/drools/compiler/rule/builder/RuleBuildContext.java b/drools-compiler/src/main/java/org/drools/compiler/rule/builder/RuleBuildContext.java
index d9f200f..3e64c9b 100755
--- a/drools-compiler/src/main/java/org/drools/compiler/rule/builder/RuleBuildContext.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/rule/builder/RuleBuildContext.java
@@ -16,8 +16,11 @@
 
 package org.drools.compiler.rule.builder;
 
+import java.util.ArrayList;
+import java.util.List;
 import java.util.Optional;
 
+import org.drools.compiler.builder.impl.KnowledgeBuilderImpl;
 import org.drools.compiler.compiler.Dialect;
 import org.drools.compiler.compiler.DialectCompiletimeRegistry;
 import org.drools.compiler.compiler.RuleBuildError;
@@ -34,6 +37,7 @@ import org.drools.core.rule.QueryImpl;
 import org.drools.core.spi.DeclarationScopeResolver;
 import org.drools.core.util.ClassUtils;
 import org.kie.api.runtime.rule.RuleUnit;
+import org.kie.internal.builder.KnowledgeBuilderResult;
 import org.kie.soup.project.datamodel.commons.types.TypeResolver;
 
 /**
@@ -231,4 +235,27 @@ public class RuleBuildContext extends PackageBuildContext {
 
         return rule.getPackage() + "." + classNameBuilder.reverse().toString();
     }
+
+    public List<? extends KnowledgeBuilderResult> internalAddRule(KnowledgeBuilderImpl knowledgeBuilder) {
+        RuleBuilder.build(this);
+
+        getRule().setResource(getRuleDescr().getResource());
+
+        getDialect().addRule(this);
+
+        if (needsStreamMode()) {
+            getPkg().setNeedStreamMode();
+        }
+
+        if (getErrors().isEmpty()) {
+            return getWarnings();
+        } else if (getWarnings().isEmpty()) {
+            return getErrors();
+        }
+
+        List<KnowledgeBuilderResult> result = new ArrayList<>();
+        result.addAll(getErrors());
+        result.addAll(getWarnings());
+        return result;
+    }
 }
diff --git a/drools-compiler/src/main/java/org/drools/compiler/rule/builder/dialect/java/JavaDialectConfiguration.java b/drools-compiler/src/main/java/org/drools/compiler/rule/builder/dialect/java/JavaDialectConfiguration.java
index 900caa4..f53c5d1 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/rule/builder/dialect/java/JavaDialectConfiguration.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/rule/builder/dialect/java/JavaDialectConfiguration.java
@@ -18,9 +18,13 @@ package org.drools.compiler.rule.builder.dialect.java;
 import java.util.Arrays;
 
 import org.drools.compiler.builder.impl.KnowledgeBuilderConfigurationImpl;
+import org.drools.compiler.commons.jci.compilers.EclipseJavaCompiler;
+import org.drools.compiler.commons.jci.compilers.JavaCompiler;
+import org.drools.compiler.commons.jci.compilers.JavaCompilerFactory;
 import org.drools.compiler.compiler.Dialect;
 import org.drools.compiler.compiler.DialectConfiguration;
 import org.drools.compiler.compiler.PackageRegistry;
+import org.drools.compiler.kie.builder.impl.KieBuilderImpl;
 import org.drools.core.definitions.InternalKnowledgePackage;
 import org.drools.core.rule.builder.dialect.asm.ClassLevel;
 import org.slf4j.Logger;
@@ -57,6 +61,14 @@ public class JavaDialectConfiguration
     
     public static final String          JAVA_COMPILER_PROPERTY = "drools.dialect.java.compiler";
 
+    public JavaCompiler createCompiler(String prefix, KieBuilderImpl kieBuilder) {
+        JavaCompiler javaCompiler = JavaCompilerFactory.getInstance().loadCompiler(this);
+        if ( javaCompiler instanceof EclipseJavaCompiler) {
+            ( (EclipseJavaCompiler) javaCompiler ).setPrefix( prefix );
+        }
+        return javaCompiler;
+    }
+
     public enum CompilerType {
         ECLIPSE, JANINO, NATIVE
     }
diff --git a/drools-compiler/src/main/java/org/drools/compiler/rule/builder/dialect/java/JavaExprAnalyzer.java b/drools-compiler/src/main/java/org/drools/compiler/rule/builder/dialect/java/JavaExprAnalyzer.java
index 92e6210..a7f6147 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/rule/builder/dialect/java/JavaExprAnalyzer.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/rule/builder/dialect/java/JavaExprAnalyzer.java
@@ -21,7 +21,6 @@ import org.antlr.runtime.CharStream;
 import org.antlr.runtime.CommonTokenStream;
 import org.antlr.runtime.RecognitionException;
 import org.antlr.runtime.TokenStream;
-import org.drools.core.base.EvaluatorWrapper;
 import org.drools.compiler.compiler.BoundIdentifiers;
 import org.drools.compiler.rule.builder.dialect.java.parser.JavaLexer;
 import org.drools.compiler.rule.builder.dialect.java.parser.JavaLocalDeclarationDescr;
@@ -29,9 +28,6 @@ import org.drools.compiler.rule.builder.dialect.java.parser.JavaParser;
 
 import java.util.HashMap;
 import java.util.HashSet;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.Set;
 
 /**
  * Expression analyzer.
@@ -73,8 +69,8 @@ public class JavaExprAnalyzer {
         JavaAnalysisResult result = new JavaAnalysisResult();
         result.setAnalyzedExpr(expr);
         result.setIdentifiers(new HashSet<String>( parser.getIdentifiers() ) );
-        return analyze( result,
-                        availableIdentifiers );
+        return availableIdentifiers.analyze( result,
+                this);
     }
 
     @SuppressWarnings("unchecked")
@@ -96,8 +92,8 @@ public class JavaExprAnalyzer {
         }
         result.setBlockDescrs( parser.getRootBlockDescr() );
 
-        return analyze( result,
-                        availableIdentifiers );
+        return availableIdentifiers.analyze( result,
+                this);
     }
 
     private JavaParser parse(final String expr) {
@@ -107,59 +103,4 @@ public class JavaExprAnalyzer {
         return new JavaParser( tokenStream );
     }
 
-    /**
-     * Analyze an expression.
-     * 
-     * @param availableIdentifiers
-     *            Total set of declarations available.
-     * @param result
-     *            The AST for the expression.
-     * 
-     * @return The <code>Set</code> of declarations used by the expression.
-     * 
-     * @throws RecognitionException
-     *             If an error occurs in the parser.
-     */
-    private JavaAnalysisResult analyze(JavaAnalysisResult result,
-                                       BoundIdentifiers availableIdentifiers) throws RecognitionException {
-        final Set<String> identifiers = result.getIdentifiers();
-        final Set<String> notBound = new HashSet<String>( identifiers );
-        
-        Map<String, Class<?>> usedDecls = new HashMap<String, Class<?>>();
-        Map<String, Class<?>> usedGlobals = new HashMap<String, Class<?>>();
-        Map<String, EvaluatorWrapper> usedOperators = new HashMap<String, EvaluatorWrapper>();
- 
-        for ( Entry<String, Class<?>> entry : availableIdentifiers.getDeclrClasses().entrySet() ) {
-            if ( identifiers.contains( entry.getKey() ) ) {
-                usedDecls.put( entry.getKey(), entry.getValue() );
-                notBound.remove( entry.getKey() );
-            }
-        }
-
-        for ( String identifier : identifiers ) {
-            Class<?> type = availableIdentifiers.resolveVarType( identifier );
-            if (type != null) {
-                usedGlobals.put( identifier, type );
-                notBound.remove( identifier );
-            }
-        }
-
-        for ( Map.Entry<String, EvaluatorWrapper> op : availableIdentifiers.getOperators().entrySet() ) {
-            if ( identifiers.contains( op.getKey() ) ) {
-                usedOperators.put( op.getKey(), op.getValue() );
-                notBound.remove( op.getKey() );
-            }
-        }
-
-        BoundIdentifiers boundIdentifiers = new BoundIdentifiers( usedDecls,
-                                                                  availableIdentifiers.getContext(),
-                                                                  usedOperators,
-                                                                  availableIdentifiers.getThisClass() );
-        boundIdentifiers.setGlobals( usedGlobals );
-
-        result.setBoundIdentifiers( boundIdentifiers );
-        result.setNotBoundedIdentifiers( notBound );
-
-        return result;
-    }
 }
diff --git a/drools-compiler/src/test/java/org/drools/compiler/builder/impl/KnowledgeBuilderTest.java b/drools-compiler/src/test/java/org/drools/compiler/builder/impl/KnowledgeBuilderTest.java
index e2459e6..271591b 100644
--- a/drools-compiler/src/test/java/org/drools/compiler/builder/impl/KnowledgeBuilderTest.java
+++ b/drools-compiler/src/test/java/org/drools/compiler/builder/impl/KnowledgeBuilderTest.java
@@ -1062,8 +1062,8 @@ public class KnowledgeBuilderTest extends DroolsTestCase {
         TypeFieldDescr f2 = new TypeFieldDescr( "age",
                                                 new PatternDescr( "int" ) );
 
-        typeDescr.addField( f1 );
-        typeDescr.addField( f2 );
+        f1.addField();
+        f2.addField();
 
         pkgDescr.addTypeDeclaration( typeDescr );
 
@@ -1097,7 +1097,7 @@ public class KnowledgeBuilderTest extends DroolsTestCase {
         TypeFieldDescr f1 = new TypeFieldDescr( "field",
                                                 new PatternDescr( "String" ) );
         f1.addAnnotation("custom", null);
-        typeDescr.addField( f1 );
+        f1.addField();
 
         pkgDescr.addTypeDeclaration( typeDescr );
 
diff --git a/drools-compiler/src/test/java/org/drools/compiler/compiler/DrlParserTest.java b/drools-compiler/src/test/java/org/drools/compiler/compiler/DrlParserTest.java
index ed2e2c2..c97dd02 100644
--- a/drools-compiler/src/test/java/org/drools/compiler/compiler/DrlParserTest.java
+++ b/drools-compiler/src/test/java/org/drools/compiler/compiler/DrlParserTest.java
@@ -70,7 +70,7 @@ public class DrlParserTest {
         }
 
         DrlParser parser = new DrlParser(LanguageLevelOption.DRL5);
-        String result = parser.getExpandedDRL( drl, resolver);
+        String result = resolver.getExpandedDRL( drl, parser);
         Assertions.assertThat("rule 'foo' " + NL + " when " + NL + " Something() " + NL + " then " + NL + " another(); " + NL + "end")
                   .isEqualToIgnoringWhitespace(result);
     }
diff --git a/drools-compiler/src/test/java/org/drools/compiler/phreak/Scenario.java b/drools-compiler/src/test/java/org/drools/compiler/phreak/Scenario.java
index b6ca1b3..53f7cb7 100644
--- a/drools-compiler/src/test/java/org/drools/compiler/phreak/Scenario.java
+++ b/drools-compiler/src/test/java/org/drools/compiler/phreak/Scenario.java
@@ -176,15 +176,15 @@ public class Scenario {
         actualResultLeftTuples = new TupleSetsImpl<LeftTuple>();
         
         if ( phreakNode == PhreakJoinNode.class ) {
-            new PhreakJoinNode().doNode( (JoinNode) betaNode, sinkNode,
-                                          bm, wm, leftTuples, actualResultLeftTuples, previousResultTuples );
+            ((JoinNode) betaNode).doNode(sinkNode,
+                                          bm, wm, leftTuples, actualResultLeftTuples, previousResultTuples, new PhreakJoinNode());
             
         } else if ( phreakNode == PhreakNotNode.class ) {
-            new PhreakNotNode().doNode( (NotNode) betaNode, sinkNode,
-                                        bm, wm, leftTuples, actualResultLeftTuples, previousResultTuples );            
+            bm.doNode( (NotNode) betaNode, sinkNode,
+                    wm, leftTuples, actualResultLeftTuples, previousResultTuples, new PhreakNotNode());
         } else if ( phreakNode == PhreakExistsNode.class ) {
-            new PhreakExistsNode().doNode( (ExistsNode) betaNode, sinkNode,
-                                           bm, wm, leftTuples, actualResultLeftTuples, previousResultTuples );            
+            ((ExistsNode) betaNode).doNode(sinkNode,
+                                           bm, wm, leftTuples, actualResultLeftTuples, previousResultTuples, new PhreakExistsNode());
         }
         
         if ( expectedResultBuilder != null ) {
diff --git a/drools-core/src/main/java/org/drools/core/base/ClassFieldAccessorCache.java b/drools-core/src/main/java/org/drools/core/base/ClassFieldAccessorCache.java
index 36b6c0c..c0acf59 100644
--- a/drools-core/src/main/java/org/drools/core/base/ClassFieldAccessorCache.java
+++ b/drools-core/src/main/java/org/drools/core/base/ClassFieldAccessorCache.java
@@ -46,13 +46,6 @@ public class ClassFieldAccessorCache {
         return this.classLoader;
     }
 
-    public ClassObjectType getClassObjectType(ClassObjectType objectType, boolean lookupClass) {
-        // lookup the class when the ClassObjectType might refer to the class from another ClassLoader
-        Class cls = lookupClass ? getClass( objectType.getClassName() ) : objectType.getClassType();
-        CacheEntry cache = getCacheEntry( cls );
-        return cache.getClassObjectType( cls, objectType );
-    }
-
     public static class ClassObjectTypeKey {
         private Class   cls;
         private boolean event;
diff --git a/drools-core/src/main/java/org/drools/core/base/ClassFieldAccessorStore.java b/drools-core/src/main/java/org/drools/core/base/ClassFieldAccessorStore.java
index 4419535..d7bd0a8 100644
--- a/drools-core/src/main/java/org/drools/core/base/ClassFieldAccessorStore.java
+++ b/drools-core/src/main/java/org/drools/core/base/ClassFieldAccessorStore.java
@@ -199,7 +199,7 @@ public class ClassFieldAccessorStore
                                            AccessorKey.AccessorType.ClassObjectType );
 
         ClassObjectTypeLookupEntry entry = (ClassObjectTypeLookupEntry) this.lookup.computeIfAbsent( key, k ->
-                new ClassObjectTypeLookupEntry( cache.getClassObjectType( (ClassObjectType) objectType, false ) ) );
+                new ClassObjectTypeLookupEntry( ((ClassObjectType) objectType).getClassObjectType(false, cache) ) );
 
         if ( target != null ) {
             target.setClassObjectType( entry.getClassObjectType() );
@@ -248,7 +248,7 @@ public class ClassFieldAccessorStore
                 case ClassObjectType : {
                     ClassObjectTypeLookupEntry lookupEntry = (ClassObjectTypeLookupEntry) this.lookup.computeIfAbsent( entry.getKey(), e -> {
                         ClassObjectType oldObjectType = ((ClassObjectTypeLookupEntry) entry.getValue()).getClassObjectType();
-                        ClassObjectType newObjectType = cache.getClassObjectType( oldObjectType, true );
+                        ClassObjectType newObjectType = oldObjectType.getClassObjectType(true, cache);
                         oldObjectType.setClassType( newObjectType.getClassType() );
                         return new ClassObjectTypeLookupEntry( newObjectType );
                     });
diff --git a/drools-core/src/main/java/org/drools/core/base/ClassObjectType.java b/drools-core/src/main/java/org/drools/core/base/ClassObjectType.java
index 147c51c..f86fa14 100644
--- a/drools-core/src/main/java/org/drools/core/base/ClassObjectType.java
+++ b/drools-core/src/main/java/org/drools/core/base/ClassObjectType.java
@@ -218,4 +218,11 @@ public class ClassObjectType
         String key = modifiedClass.getName() + ":" + modificationMask;
         transformedMasks.put(key, transforedMask);
     }
+
+    public ClassObjectType getClassObjectType(boolean lookupClass, ClassFieldAccessorCache classFieldAccessorCache) {
+        // lookup the class when the ClassObjectType might refer to the class from another ClassLoader
+        Class cls = lookupClass ? classFieldAccessorCache.getClass( getClassName() ) : getClassType();
+        ClassFieldAccessorCache.CacheEntry cache = classFieldAccessorCache.getCacheEntry( cls );
+        return cache.getClassObjectType( cls, this);
+    }
 }
diff --git a/drools-core/src/main/java/org/drools/core/base/accumulators/MVELAccumulatorFunctionExecutor.java b/drools-core/src/main/java/org/drools/core/base/accumulators/MVELAccumulatorFunctionExecutor.java
index 580782f..bc03962 100644
--- a/drools-core/src/main/java/org/drools/core/base/accumulators/MVELAccumulatorFunctionExecutor.java
+++ b/drools-core/src/main/java/org/drools/core/base/accumulators/MVELAccumulatorFunctionExecutor.java
@@ -166,7 +166,7 @@ public class MVELAccumulatorFunctionExecutor
     }
 
     public void replaceDeclaration( Declaration declaration, Declaration resolved ) {
-        unit.replaceDeclaration( declaration, resolved );
+        declaration.replaceDeclaration(resolved, unit);
     }
 
     private static class MVELAccumulatorFunctionContext
diff --git a/drools-core/src/main/java/org/drools/core/base/dataproviders/MVELDataProvider.java b/drools-core/src/main/java/org/drools/core/base/dataproviders/MVELDataProvider.java
index 7140d30..e6af418 100644
--- a/drools-core/src/main/java/org/drools/core/base/dataproviders/MVELDataProvider.java
+++ b/drools-core/src/main/java/org/drools/core/base/dataproviders/MVELDataProvider.java
@@ -118,8 +118,8 @@ public class MVELDataProvider
 
     public void replaceDeclaration(Declaration declaration,
                                    Declaration resolved) {
-        this.unit.replaceDeclaration( declaration,
-                                      resolved );
+        declaration.replaceDeclaration(
+                resolved, this.unit);
     }
 
     public Object createContext() {
diff --git a/drools-core/src/main/java/org/drools/core/base/evaluators/EvaluatorRegistry.java b/drools-core/src/main/java/org/drools/core/base/evaluators/EvaluatorRegistry.java
index eaaffb9..de36780 100644
--- a/drools-core/src/main/java/org/drools/core/base/evaluators/EvaluatorRegistry.java
+++ b/drools-core/src/main/java/org/drools/core/base/evaluators/EvaluatorRegistry.java
@@ -212,34 +212,6 @@ public class EvaluatorRegistry
      *
      * @param operator the operator that evaluator implements
      *
-     * @param parameterText some evaluators support parameters and these
-     *                      parameters are defined as a String that is
-     *                      parsed by the evaluator itself.
-     *
-     * @return an Evaluator instance capable of evaluating expressions
-     *         between values of the given type, or null in case the type
-     *         is not supported.
-     */
-    public Evaluator getEvaluator( ValueType type,
-                                   Operator operator,
-                                   String parameterText ) {
-        return this.getEvaluatorDefinition( operator ).getEvaluator( type,
-                                                                     operator,
-                                                                     parameterText );
-    }
-
-    /**
-     * Returns the evaluator instance for the given type and the
-     * defined parameterText
-     *
-     * @param type the type of the attributes this evaluator will
-     *             operate on. This is important because the evaluator
-     *             may do optimizations and type coercion based on the
-     *             types it is evaluating. It is also possible that
-     *             this evaluator does not support a given type.
-     *
-     * @param operator the operator that evaluator implements
-     *
      * @return an Evaluator instance capable of evaluating expressions
      *         between values of the given type, or null in case the type
      *         is not supported.
diff --git a/drools-core/src/main/java/org/drools/core/base/evaluators/Operator.java b/drools-core/src/main/java/org/drools/core/base/evaluators/Operator.java
index 4ebbe9b..57540e6 100644
--- a/drools-core/src/main/java/org/drools/core/base/evaluators/Operator.java
+++ b/drools-core/src/main/java/org/drools/core/base/evaluators/Operator.java
@@ -16,6 +16,9 @@
 
 package org.drools.core.base.evaluators;
 
+import org.drools.core.base.ValueType;
+import org.drools.core.spi.Evaluator;
+
 import java.io.Externalizable;
 import java.io.IOException;
 import java.io.ObjectInput;
@@ -187,4 +190,29 @@ public class Operator
         return true;
     }
 
+    /**
+     * Returns the evaluator instance for the given type and the
+     * defined parameterText
+     *
+     * @param type the type of the attributes this evaluator will
+     *             operate on. This is important because the evaluator
+     *             may do optimizations and type coercion based on the
+     *             types it is evaluating. It is also possible that
+     *             this evaluator does not support a given type.
+     *
+     * @param parameterText some evaluators support parameters and these
+     *                      parameters are defined as a String that is
+     *                      parsed by the evaluator itself.
+     *
+     * @param evaluatorRegistry
+     * @return an Evaluator instance capable of evaluating expressions
+     *         between values of the given type, or null in case the type
+     *         is not supported.
+     */
+    public Evaluator getEvaluator(ValueType type,
+                                  String parameterText, EvaluatorRegistry evaluatorRegistry) {
+        return evaluatorRegistry.getEvaluatorDefinition(this).getEvaluator( type,
+                this,
+                                                                     parameterText );
+    }
 }
diff --git a/drools-core/src/main/java/org/drools/core/base/mvel/MVELCompilationUnit.java b/drools-core/src/main/java/org/drools/core/base/mvel/MVELCompilationUnit.java
index 93d67de..322b2a2 100644
--- a/drools-core/src/main/java/org/drools/core/base/mvel/MVELCompilationUnit.java
+++ b/drools-core/src/main/java/org/drools/core/base/mvel/MVELCompilationUnit.java
@@ -466,24 +466,6 @@ public class MVELCompilationUnit
         return cls;
     }
 
-    public void replaceDeclaration( Declaration declaration,
-                                    Declaration resolved ) {
-        if ( previousDeclarations != null ) {
-            for ( int i = 0; i < previousDeclarations.length; i++ ) {
-                if ( previousDeclarations[i].equals( declaration ) ) {
-                    previousDeclarations[i] = resolved;
-                }
-            }
-        }
-        if ( localDeclarations != null ) {
-            for ( int i = 0; i < localDeclarations.length; i++ ) {
-                if ( localDeclarations[i].equals( declaration ) ) {
-                    localDeclarations[i] = resolved;
-                }
-            }
-        }
-    }
-
     @Override
     public MVELCompilationUnit clone() {
         Declaration[] clonedPreviousDeclarations = null;
diff --git a/drools-core/src/main/java/org/drools/core/base/mvel/MVELEvalExpression.java b/drools-core/src/main/java/org/drools/core/base/mvel/MVELEvalExpression.java
index 08f13e3..2dc1458 100644
--- a/drools-core/src/main/java/org/drools/core/base/mvel/MVELEvalExpression.java
+++ b/drools-core/src/main/java/org/drools/core/base/mvel/MVELEvalExpression.java
@@ -111,8 +111,8 @@ public class MVELEvalExpression
 
     public void replaceDeclaration(Declaration declaration,
                                    Declaration resolved) {
-        this.unit.replaceDeclaration( declaration,
-                                      resolved );
+        declaration.replaceDeclaration(
+                resolved, this.unit);
     }
 
     public MVELEvalExpression clone() {
diff --git a/drools-core/src/main/java/org/drools/core/base/mvel/MVELReturnValueExpression.java b/drools-core/src/main/java/org/drools/core/base/mvel/MVELReturnValueExpression.java
index 6f406f5..1781c12 100644
--- a/drools-core/src/main/java/org/drools/core/base/mvel/MVELReturnValueExpression.java
+++ b/drools-core/src/main/java/org/drools/core/base/mvel/MVELReturnValueExpression.java
@@ -144,8 +144,8 @@ public class MVELReturnValueExpression
 
     public void replaceDeclaration(Declaration declaration,
                                    Declaration resolved) {
-        this.unit.replaceDeclaration( declaration,
-                                      resolved );
+        declaration.replaceDeclaration(
+                resolved, this.unit);
     }
 
 }
diff --git a/drools-core/src/main/java/org/drools/core/common/BaseNode.java b/drools-core/src/main/java/org/drools/core/common/BaseNode.java
index 64a73db..39dea06 100644
--- a/drools-core/src/main/java/org/drools/core/common/BaseNode.java
+++ b/drools-core/src/main/java/org/drools/core/common/BaseNode.java
@@ -21,14 +21,12 @@ import java.io.ObjectInput;
 import java.io.ObjectOutput;
 import java.util.Collection;
 
-import org.drools.core.reteoo.EntryPointNode;
-import org.drools.core.reteoo.LeftTupleSource;
-import org.drools.core.reteoo.ObjectSource;
-import org.drools.core.reteoo.ObjectTypeNode;
-import org.drools.core.reteoo.ReteooBuilder;
-import org.drools.core.reteoo.RuleRemovalContext;
-import org.drools.core.reteoo.Sink;
+import org.drools.core.reteoo.*;
 import org.drools.core.reteoo.builder.BuildContext;
+import org.drools.core.reteoo.builder.BuildUtils;
+import org.drools.core.rule.constraint.MvelConstraint;
+import org.drools.core.spi.AlphaNodeFieldConstraint;
+import org.drools.core.spi.BetaNodeFieldConstraint;
 import org.drools.core.util.Bag;
 import org.kie.api.definition.rule.Rule;
 
@@ -240,4 +238,21 @@ public abstract class BaseNode
         }
         return sinks;
     }
+
+    public void mergeNodes(BaseNode duplicate, BuildUtils buildUtils) {
+        if (this instanceof AlphaNode) {
+            AlphaNodeFieldConstraint alphaConstraint = ((AlphaNode) this).getConstraint();
+            if (alphaConstraint instanceof MvelConstraint) {
+                ((MvelConstraint)alphaConstraint).addPackageNames(((MvelConstraint)((AlphaNode) duplicate).getConstraint()).getPackageNames());
+            }
+        } else if (this instanceof BetaNode) {
+            BetaNodeFieldConstraint[] betaConstraints = ((BetaNode) this).getConstraints();
+            int i = 0;
+            for (BetaNodeFieldConstraint betaConstraint : betaConstraints) {
+                if (betaConstraint instanceof MvelConstraint) {
+                    ((MvelConstraint) betaConstraint).addPackageNames(((MvelConstraint) ((BetaNode) duplicate).getConstraints()[i++]).getPackageNames());
+                }
+            }
+        }
+    }
 }
diff --git a/drools-core/src/main/java/org/drools/core/common/EqualityKey.java b/drools-core/src/main/java/org/drools/core/common/EqualityKey.java
index 6e07675..fbad7f5 100644
--- a/drools-core/src/main/java/org/drools/core/common/EqualityKey.java
+++ b/drools-core/src/main/java/org/drools/core/common/EqualityKey.java
@@ -22,6 +22,8 @@ import java.io.ObjectInput;
 import java.io.ObjectOutput;
 
 import org.drools.core.beliefsystem.BeliefSet;
+import org.drools.core.reteoo.ObjectTypeConf;
+import org.drools.core.spi.PropagationContext;
 import org.drools.core.util.LinkedList;
 
 /**
@@ -168,4 +170,23 @@ public class EqualityKey extends LinkedList<DefaultFactHandle>
         return this.getFirst().getObject().equals( object );
     }
 
+    public void deleteFromTMS(InternalFactHandle handle, ObjectTypeConf typeConf, PropagationContext propagationContext, NamedEntryPoint namedEntryPoint) {
+        if ( typeConf.isTMSEnabled() && this != null ) { // key can be null if we're expiring an event that has been already deleted
+            TruthMaintenanceSystem tms = namedEntryPoint.getTruthMaintenanceSystem();
+
+            // Update the equality key, which maintains a list of stated FactHandles
+            removeFactHandle( handle );
+            handle.setEqualityKey( null );
+
+            // If the equality key is now empty, then remove it, as it's no longer state either
+            if ( isEmpty() && getLogicalFactHandle() == null ) {
+                tms.remove(this);
+            } else if ( getLogicalFactHandle() != null ) {
+                // The justified set can be unstaged, now that the last stated has been deleted
+                final InternalFactHandle justifiedHandle = getLogicalFactHandle();
+                BeliefSet bs = justifiedHandle.getEqualityKey().getBeliefSet();
+                bs.getBeliefSystem().unstage( propagationContext, bs );
+            }
+        }
+    }
 }
diff --git a/drools-core/src/main/java/org/drools/core/common/EventFactHandle.java b/drools-core/src/main/java/org/drools/core/common/EventFactHandle.java
index ae06018..f73b942 100644
--- a/drools-core/src/main/java/org/drools/core/common/EventFactHandle.java
+++ b/drools-core/src/main/java/org/drools/core/common/EventFactHandle.java
@@ -17,6 +17,7 @@
 package org.drools.core.common;
 
 import org.drools.core.WorkingMemoryEntryPoint;
+import org.drools.core.rule.SlidingTimeWindow;
 import org.drools.core.time.JobHandle;
 import org.drools.core.time.TimerService;
 import org.drools.core.util.LinkedList;
@@ -334,4 +335,8 @@ public class EventFactHandle extends DefaultFactHandle implements Comparable<Eve
             }
         }
     }
+
+    public boolean isExpiredOther(final long currentTime, SlidingTimeWindow slidingTimeWindow) {
+        return getStartTimestamp() + slidingTimeWindow.getExpirationOffset() <= currentTime;
+    }
 }
diff --git a/drools-core/src/main/java/org/drools/core/common/NamedEntryPoint.java b/drools-core/src/main/java/org/drools/core/common/NamedEntryPoint.java
index 9c41c21..649b291 100644
--- a/drools-core/src/main/java/org/drools/core/common/NamedEntryPoint.java
+++ b/drools-core/src/main/java/org/drools/core/common/NamedEntryPoint.java
@@ -515,31 +515,11 @@ public class NamedEntryPoint
 
         PropagationContext propagationContext = delete( handle, object, typeConf, rule, null, terminalNode );
 
-        deleteFromTMS( handle, key, typeConf, propagationContext );
+        key.deleteFromTMS( handle, typeConf, propagationContext, this);
 
         this.handleFactory.destroyFactHandle( handle );
     }
 
-    private void deleteFromTMS( InternalFactHandle handle, EqualityKey key, ObjectTypeConf typeConf, PropagationContext propagationContext ) {
-        if ( typeConf.isTMSEnabled() && key != null ) { // key can be null if we're expiring an event that has been already deleted
-            TruthMaintenanceSystem tms = getTruthMaintenanceSystem();
-
-            // Update the equality key, which maintains a list of stated FactHandles
-            key.removeFactHandle( handle );
-            handle.setEqualityKey( null );
-
-            // If the equality key is now empty, then remove it, as it's no longer state either
-            if ( key.isEmpty() && key.getLogicalFactHandle() == null ) {
-                tms.remove( key );
-            } else if ( key.getLogicalFactHandle() != null ) {
-                // The justified set can be unstaged, now that the last stated has been deleted
-                final InternalFactHandle justifiedHandle = key.getLogicalFactHandle();
-                BeliefSet bs = justifiedHandle.getEqualityKey().getBeliefSet();
-                bs.getBeliefSystem().unstage( propagationContext, bs );
-            }
-        }
-    }
-
     private void deleteLogical(EqualityKey key) {
         if ( key != null && key.getStatus() == EqualityKey.JUSTIFIED ) {
             getTruthMaintenanceSystem().delete( key.getLogicalFactHandle() );
@@ -579,7 +559,7 @@ public class NamedEntryPoint
     public void removeFromObjectStore(InternalFactHandle handle) {
         this.objectStore.removeHandle( handle );
         ObjectTypeConf typeConf = getObjectTypeConfigurationRegistry().getObjectTypeConf( this.entryPoint, handle.getObject() );
-        deleteFromTMS( handle, handle.getEqualityKey(), typeConf, null );
+        handle.getEqualityKey().deleteFromTMS( handle, typeConf, null, this);
     }
 
     protected void addPropertyChangeListener(final InternalFactHandle handle, final boolean dynamicFlag ) {
diff --git a/drools-core/src/main/java/org/drools/core/common/TruthMaintenanceSystem.java b/drools-core/src/main/java/org/drools/core/common/TruthMaintenanceSystem.java
index 762438a..293b683 100644
--- a/drools-core/src/main/java/org/drools/core/common/TruthMaintenanceSystem.java
+++ b/drools-core/src/main/java/org/drools/core/common/TruthMaintenanceSystem.java
@@ -17,9 +17,7 @@
 package org.drools.core.common;
 
 import org.drools.core.RuleBaseConfiguration.AssertBehaviour;
-import org.drools.core.beliefsystem.BeliefSet;
 import org.drools.core.beliefsystem.BeliefSystem;
-import org.drools.core.beliefsystem.simple.SimpleMode;
 import org.drools.core.definitions.rule.impl.RuleImpl;
 import org.drools.core.impl.StatefulKnowledgeSessionImpl;
 import org.drools.core.reteoo.ObjectTypeConf;
@@ -27,7 +25,6 @@ import org.drools.core.spi.Activation;
 import org.drools.core.spi.PropagationContext;
 import org.drools.core.util.ObjectHashMap;
 import org.kie.api.runtime.rule.FactHandle;
-import org.kie.api.internal.runtime.beliefs.Mode;
 
 import java.util.Iterator;
 
@@ -191,7 +188,7 @@ public class TruthMaintenanceSystem {
                                       final PropagationContext context,
                                       final RuleImpl rule,
                                       final ObjectTypeConf typeConf) {
-        addLogicalDependency( handle, object, value, activation, context, rule, typeConf, true );
+        rule.addLogicalDependency( handle, object, value, activation, context, typeConf, true, this);
     }
 
     public InternalFactHandle addLogicalDependency(final InternalFactHandle handle,
@@ -201,45 +198,7 @@ public class TruthMaintenanceSystem {
                                                    final PropagationContext context,
                                                    final RuleImpl rule,
                                                    final ObjectTypeConf typeConf) {
-        return addLogicalDependency( handle, object, value, activation, context, rule, typeConf, false );
-    }
-
-    public InternalFactHandle addLogicalDependency(final InternalFactHandle handle,
-                                                   final Object object,
-                                                   final Object value,
-                                                   final Activation activation,
-                                                   final PropagationContext context,
-                                                   final RuleImpl rule,
-                                                   final ObjectTypeConf typeConf,
-                                                   final boolean read) {
-        BeliefSystem beliefSystem = defaultBeliefSystem;
-        if ( value != null && value instanceof Mode & !( value instanceof SimpleMode ) ) {
-            Mode mode = (Mode) value;
-            beliefSystem = (BeliefSystem) mode.getBeliefSystem();
-        }
-
-        BeliefSet beliefSet = handle.getEqualityKey().getBeliefSet();
-        if ( beliefSet == null ) {
-            if ( context.getType() == PropagationContext.Type.MODIFICATION ) {
-                // if this was a  update, chances  are its trying  to retract a logical assertion
-            }
-            beliefSet = beliefSystem.newBeliefSet( handle );
-            handle.getEqualityKey().setBeliefSet( beliefSet );
-        }
-
-        final LogicalDependency node = beliefSystem.newLogicalDependency( activation, beliefSet, object, value );
-        activation.getRule().setHasLogicalDependency( true );
-
-        activation.addLogicalDependency( node );
-
-
-        if ( read ) {
-            // used when deserialising
-            beliefSystem.read( node, beliefSet, context, typeConf );
-        } else {
-            beliefSet = beliefSystem.insert( node, beliefSet, context, typeConf );
-        }
-        return beliefSet.getFactHandle();
+        return rule.addLogicalDependency( handle, object, value, activation, context, typeConf, false, this);
     }
 
     public void clear() {
diff --git a/drools-core/src/main/java/org/drools/core/definitions/rule/impl/RuleImpl.java b/drools-core/src/main/java/org/drools/core/definitions/rule/impl/RuleImpl.java
index a87641c..73c3149 100644
--- a/drools-core/src/main/java/org/drools/core/definitions/rule/impl/RuleImpl.java
+++ b/drools-core/src/main/java/org/drools/core/definitions/rule/impl/RuleImpl.java
@@ -34,6 +34,13 @@ import java.util.Map;
 import org.drools.core.WorkingMemory;
 import org.drools.core.base.EnabledBoolean;
 import org.drools.core.base.SalienceInteger;
+import org.drools.core.beliefsystem.BeliefSet;
+import org.drools.core.beliefsystem.BeliefSystem;
+import org.drools.core.beliefsystem.simple.SimpleMode;
+import org.drools.core.common.InternalFactHandle;
+import org.drools.core.common.LogicalDependency;
+import org.drools.core.common.TruthMaintenanceSystem;
+import org.drools.core.reteoo.ObjectTypeConf;
 import org.drools.core.reteoo.RuleTerminalNode;
 import org.drools.core.rule.ConsequenceMetaData;
 import org.drools.core.rule.Declaration;
@@ -44,16 +51,11 @@ import org.drools.core.rule.InvalidPatternException;
 import org.drools.core.rule.LogicTransformer;
 import org.drools.core.rule.QueryImpl;
 import org.drools.core.rule.RuleConditionElement;
-import org.drools.core.spi.AgendaGroup;
-import org.drools.core.spi.Consequence;
-import org.drools.core.spi.Enabled;
-import org.drools.core.spi.KnowledgeHelper;
-import org.drools.core.spi.Salience;
-import org.drools.core.spi.Tuple;
-import org.drools.core.spi.Wireable;
+import org.drools.core.spi.*;
 import org.drools.core.time.impl.Timer;
 import org.drools.core.util.StringUtils;
 import org.kie.api.definition.rule.Query;
+import org.kie.api.internal.runtime.beliefs.Mode;
 import org.kie.api.io.Resource;
 import org.kie.api.runtime.rule.RuleUnit;
 import org.kie.internal.definition.rule.InternalRule;
@@ -873,6 +875,43 @@ public class RuleImpl implements Externalizable,
         return ruleUnitClassName != null;
     }
 
+    public InternalFactHandle addLogicalDependency(final InternalFactHandle handle,
+                                                   final Object object,
+                                                   final Object value,
+                                                   final Activation activation,
+                                                   final PropagationContext context,
+                                                   final ObjectTypeConf typeConf,
+                                                   final boolean read, TruthMaintenanceSystem truthMaintenanceSystem) {
+        BeliefSystem beliefSystem = truthMaintenanceSystem.getBeliefSystem();
+        if ( value != null && value instanceof Mode & !( value instanceof SimpleMode) ) {
+            Mode mode = (Mode) value;
+            beliefSystem = (BeliefSystem) mode.getBeliefSystem();
+        }
+
+        BeliefSet beliefSet = handle.getEqualityKey().getBeliefSet();
+        if ( beliefSet == null ) {
+            if ( context.getType() == PropagationContext.Type.MODIFICATION ) {
+                // if this was a  update, chances  are its trying  to retract a logical assertion
+            }
+            beliefSet = beliefSystem.newBeliefSet( handle );
+            handle.getEqualityKey().setBeliefSet( beliefSet );
+        }
+
+        final LogicalDependency node = beliefSystem.newLogicalDependency( activation, beliefSet, object, value );
+        activation.getRule().setHasLogicalDependency( true );
+
+        activation.addLogicalDependency( node );
+
+
+        if ( read ) {
+            // used when deserialising
+            beliefSystem.read( node, beliefSet, context, typeConf );
+        } else {
+            beliefSet = beliefSystem.insert( node, beliefSet, context, typeConf );
+        }
+        return beliefSet.getFactHandle();
+    }
+
     public static class SafeSalience implements Salience, Serializable {
         private static final long serialVersionUID = 1L;
         private final Salience delegate;
diff --git a/drools-core/src/main/java/org/drools/core/factmodel/ClassDefinition.java b/drools-core/src/main/java/org/drools/core/factmodel/ClassDefinition.java
index 8e5d960..39667cc 100755
--- a/drools-core/src/main/java/org/drools/core/factmodel/ClassDefinition.java
+++ b/drools-core/src/main/java/org/drools/core/factmodel/ClassDefinition.java
@@ -30,6 +30,7 @@ import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 
+import org.drools.core.factmodel.traits.TraitRegistry;
 import org.drools.core.phreak.Reactive;
 import org.drools.core.util.ClassUtils;
 import org.kie.api.definition.type.Annotation;
@@ -43,6 +44,16 @@ public class ClassDefinition
     implements
     FactType {
 
+    public Collection<String> getTraitInterfaces(TraitRegistry traitRegistry) {
+        List<String> intfs = new ArrayList<String>();
+        for ( String s : getInterfaces() ) {
+            if ( traitRegistry.getTraits().containsKey( s ) ) {
+                intfs.add( s );
+            }
+        }
+        return intfs;
+    }
+
     public static enum TRAITING_MODE { NONE, BASIC, LOGICAL }
 
     private String                       className;
diff --git a/drools-core/src/main/java/org/drools/core/factmodel/EnumClassDefinition.java b/drools-core/src/main/java/org/drools/core/factmodel/EnumClassDefinition.java
index 6ee62f5..d8ad36f 100755
--- a/drools-core/src/main/java/org/drools/core/factmodel/EnumClassDefinition.java
+++ b/drools-core/src/main/java/org/drools/core/factmodel/EnumClassDefinition.java
@@ -20,7 +20,6 @@ import java.io.IOException;
 import java.io.ObjectInput;
 import java.io.ObjectOutput;
 import java.util.List;
-import java.util.ArrayList;
 import java.util.Collections;
 
 /**
@@ -60,10 +59,4 @@ public class EnumClassDefinition
         this.enumLiterals = enumLiterals;
     }
 
-    public void addLiteral(EnumLiteralDefinition enumLiteralDefinition) {
-        if ( enumLiterals == Collections.EMPTY_LIST ) {
-            enumLiterals = new ArrayList<EnumLiteralDefinition>();
-        }
-        enumLiterals.add( enumLiteralDefinition );
-    }
 }
diff --git a/drools-core/src/main/java/org/drools/core/factmodel/EnumLiteralDefinition.java b/drools-core/src/main/java/org/drools/core/factmodel/EnumLiteralDefinition.java
index bd50970..78dc0fc 100755
--- a/drools-core/src/main/java/org/drools/core/factmodel/EnumLiteralDefinition.java
+++ b/drools-core/src/main/java/org/drools/core/factmodel/EnumLiteralDefinition.java
@@ -22,6 +22,7 @@ import java.io.IOException;
 import java.io.ObjectInput;
 import java.io.ObjectOutput;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
 /**
@@ -108,4 +109,11 @@ public class EnumLiteralDefinition implements Externalizable {
                 ", constructorArgs=" + constructorArgs +
                 '}';
     }
+
+    public void addLiteral(EnumClassDefinition enumClassDefinition) {
+        if ( enumClassDefinition.getEnumLiterals() == Collections.EMPTY_LIST ) {
+            enumClassDefinition.setEnumLiterals(new ArrayList<EnumLiteralDefinition>());
+        }
+        enumClassDefinition.getEnumLiterals().add(this);
+    }
 }
diff --git a/drools-core/src/main/java/org/drools/core/factmodel/FieldDefinition.java b/drools-core/src/main/java/org/drools/core/factmodel/FieldDefinition.java
index 4f4bd13..f9b8b95 100755
--- a/drools-core/src/main/java/org/drools/core/factmodel/FieldDefinition.java
+++ b/drools-core/src/main/java/org/drools/core/factmodel/FieldDefinition.java
@@ -27,10 +27,14 @@ import java.util.Map;
 
 import org.drools.core.base.ClassFieldAccessor;
 import org.drools.core.factmodel.traits.Alias;
+import org.drools.core.factmodel.traits.TraitClassBuilderImpl;
 import org.drools.core.util.MVELSafeHelper;
 import org.drools.core.util.StringUtils;
 import org.kie.api.definition.type.Annotation;
 import org.kie.api.definition.type.FactField;
+import org.mvel2.asm.ClassWriter;
+import org.mvel2.asm.MethodVisitor;
+import org.mvel2.asm.Opcodes;
 
 /**
  * Declares a field to be dynamically generated.
@@ -554,4 +558,15 @@ public class FieldDefinition
 	public void setSetterName( String setterName ) {
 		this.setterName = setterName;
 	}
+
+    public void buildSetter(ClassWriter cw, String name, String type, String generic, TraitClassBuilderImpl traitClassBuilder) {
+
+        MethodVisitor mv = cw.visitMethod(Opcodes.ACC_PUBLIC + Opcodes.ACC_ABSTRACT,
+                                          BuildUtils.setterName(name, type),
+                                          "(" + BuildUtils.getTypeDescriptor(type) + ")V",
+                                          generic == null ? null :
+                                                  "(" + BuildUtils.getTypeDescriptor(type).replace(";", "<" + BuildUtils.getTypeDescriptor(generic) + ">;") + ")V",
+                                          null);
+        mv.visitEnd();
+    }
 }
diff --git a/drools-core/src/main/java/org/drools/core/factmodel/traits/TraitClassBuilderImpl.java b/drools-core/src/main/java/org/drools/core/factmodel/traits/TraitClassBuilderImpl.java
index 20f4b03..3e8711d 100644
--- a/drools-core/src/main/java/org/drools/core/factmodel/traits/TraitClassBuilderImpl.java
+++ b/drools-core/src/main/java/org/drools/core/factmodel/traits/TraitClassBuilderImpl.java
@@ -99,18 +99,7 @@ public class TraitClassBuilderImpl implements TraitClassBuilder,
 
         buildGetter(cw, field, name, type, null);
 
-        buildSetter(cw, field, name, type, null);
-    }
-
-    protected void buildSetter(ClassWriter cw, FieldDefinition field, String name, String type, String generic) {
-
-        MethodVisitor mv = cw.visitMethod(ACC_PUBLIC + ACC_ABSTRACT,
-                                          BuildUtils.setterName(name, type),
-                                          "(" + BuildUtils.getTypeDescriptor(type) + ")V",
-                                          generic == null ? null :
-                                                  "(" + BuildUtils.getTypeDescriptor(type).replace(";", "<" + BuildUtils.getTypeDescriptor(generic) + ">;") + ")V",
-                                          null);
-        mv.visitEnd();
+        field.buildSetter(cw, name, type, null, this);
     }
 
     protected void buildGetter(ClassWriter cw, FieldDefinition field, String name, String type, String generic) {
diff --git a/drools-core/src/main/java/org/drools/core/factmodel/traits/TraitField.java b/drools-core/src/main/java/org/drools/core/factmodel/traits/TraitField.java
index 0b40150..d528c37 100644
--- a/drools-core/src/main/java/org/drools/core/factmodel/traits/TraitField.java
+++ b/drools-core/src/main/java/org/drools/core/factmodel/traits/TraitField.java
@@ -120,22 +120,6 @@ public class TraitField implements Serializable, Externalizable {
         return value;
     }
 
-    public Object get( TypeWrapper klass ) {
-        if ( value == null ) {
-            return null;
-        } else if ( klass.getKlass() != null && klass.getKlass().isInstance( value ) ) {
-            return value;
-        } else if ( value instanceof TraitableBean ) {
-            return ( (TraitableBean) value ).getTrait( klass.getName() );
-        } else if ( value instanceof TraitProxy ) {
-            return ( (TraitProxy) value ).getObject();
-        } else if ( klass.getKlass() == null ) {
-            // possible during deserialization, when
-            return value;
-        }
-        return null;
-    }
-
     private boolean ensureType( Object value, Class<?> range, WorkingMemory wm ) {
 
         if ( range.isInstance( value ) ) {
diff --git a/drools-core/src/main/java/org/drools/core/factmodel/traits/TraitFieldTMSImpl.java b/drools-core/src/main/java/org/drools/core/factmodel/traits/TraitFieldTMSImpl.java
index c0b4715..a3a3397 100644
--- a/drools-core/src/main/java/org/drools/core/factmodel/traits/TraitFieldTMSImpl.java
+++ b/drools-core/src/main/java/org/drools/core/factmodel/traits/TraitFieldTMSImpl.java
@@ -68,7 +68,7 @@ public class TraitFieldTMSImpl implements TraitFieldTMS, Externalizable {
     }
 
     public Object get( String name, Class klass ) {
-        return fieldTMS.get( name ).get( getKlass( klass ) );
+        return getKlass( klass ).get(fieldTMS.get( name ));
     }
 
     public boolean isManagingField( String name ) {
diff --git a/drools-core/src/main/java/org/drools/core/factmodel/traits/TraitProxy.java b/drools-core/src/main/java/org/drools/core/factmodel/traits/TraitProxy.java
index a6eb28b..738b526 100644
--- a/drools-core/src/main/java/org/drools/core/factmodel/traits/TraitProxy.java
+++ b/drools-core/src/main/java/org/drools/core/factmodel/traits/TraitProxy.java
@@ -16,6 +16,7 @@
 
 package org.drools.core.factmodel.traits;
 
+import org.drools.core.reteoo.TraitObjectTypeNode;
 import org.drools.core.util.HierarchyEncoderImpl;
 import org.drools.core.util.Triple;
 import org.drools.core.util.TripleFactory;
@@ -25,11 +26,7 @@ import java.io.Externalizable;
 import java.io.IOException;
 import java.io.ObjectInput;
 import java.io.ObjectOutput;
-import java.util.BitSet;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.Map;
-import java.util.Set;
+import java.util.*;
 
 public abstract class TraitProxy implements Externalizable, TraitType, Comparable<TraitProxy> {
 
@@ -202,6 +199,38 @@ public abstract class TraitProxy implements Externalizable, TraitType, Comparabl
         }
         return otns.contains( typeCode );
     }
+
+    /**
+     *  Edge case: due to the way traits are encoded, consider this hierarchy:
+     *  A    B
+     *    C
+     *    D
+     *  On don/insertion of C, C may be vetoed by its parents, but might have been
+     *  already covered by one of its descendants (D)
+     * @param typeMask
+     * @param traitObjectTypeNode
+     */
+    public boolean sameAndNotCoveredByDescendants(BitSet typeMask, TraitObjectTypeNode traitObjectTypeNode) {
+        boolean isSameType = typeMask.equals( _getTypeCode() );
+        if ( isSameType ) {
+            TraitTypeMap<String,Thing<?>,?> ttm = (TraitTypeMap<String,Thing<?>,?>) getObject()._getTraitMap();
+            Collection<Thing<?>> descs = ttm.lowerDescendants( typeMask );
+            // we have to exclude the "mock" bottom proxy
+            if ( descs == null || descs.isEmpty() ) {
+                return true;
+            } else {
+                for ( Thing sub : descs ) {
+                    TraitType tt = (TraitType) sub;
+                    if ( tt != this && tt._hasTypeCode( typeMask ) ) {
+                        return false;
+                    }
+                }
+                return true;
+            }
+        } else {
+            return false;
+        }
+    }
 }
 
 
diff --git a/drools-core/src/main/java/org/drools/core/factmodel/traits/TraitRegistry.java b/drools-core/src/main/java/org/drools/core/factmodel/traits/TraitRegistry.java
index d77a2d3..871405b 100644
--- a/drools-core/src/main/java/org/drools/core/factmodel/traits/TraitRegistry.java
+++ b/drools-core/src/main/java/org/drools/core/factmodel/traits/TraitRegistry.java
@@ -23,7 +23,6 @@ import java.io.ObjectOutput;
 import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.BitSet;
-import java.util.Collection;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
@@ -171,17 +170,7 @@ public class TraitRegistry implements Externalizable {
             traits = new HashMap<String, ClassDefinition>();
         }
         this.traits.put( className, trait );
-        getHierarchy().encode( className, getTraitInterfaces( trait ) );
-    }
-
-    private Collection<String> getTraitInterfaces( ClassDefinition trait ) {
-        List<String> intfs = new ArrayList<String>();
-        for ( String s : trait.getInterfaces() ) {
-            if ( traits.containsKey( s ) ) {
-                intfs.add( s );
-            }
-        }
-        return intfs;
+        getHierarchy().encode( className, trait.getTraitInterfaces(this) );
     }
 
     public void addTraitable( ClassDefinition traitable ) {
diff --git a/drools-core/src/main/java/org/drools/core/factmodel/traits/TypeWrapper.java b/drools-core/src/main/java/org/drools/core/factmodel/traits/TypeWrapper.java
index d1f735c..4bd083f 100644
--- a/drools-core/src/main/java/org/drools/core/factmodel/traits/TypeWrapper.java
+++ b/drools-core/src/main/java/org/drools/core/factmodel/traits/TypeWrapper.java
@@ -74,4 +74,20 @@ public class TypeWrapper implements Externalizable {
     public String toString() {
         return "Wrapper{" + name + "}";
     }
+
+    public Object get(TraitField traitField) {
+        if ( traitField.get() == null ) {
+            return null;
+        } else if ( getKlass() != null && getKlass().isInstance(traitField.get()) ) {
+            return traitField.get();
+        } else if ( traitField.get() instanceof TraitableBean ) {
+            return ( (TraitableBean) traitField.get()).getTrait( getName() );
+        } else if ( traitField.get() instanceof TraitProxy ) {
+            return ( (TraitProxy) traitField.get()).getObject();
+        } else if ( getKlass() == null ) {
+            // possible during deserialization, when
+            return traitField.get();
+        }
+        return null;
+    }
 }
diff --git a/drools-core/src/main/java/org/drools/core/impl/KnowledgeBaseImpl.java b/drools-core/src/main/java/org/drools/core/impl/KnowledgeBaseImpl.java
index 0db4d4a..4050daa 100644
--- a/drools-core/src/main/java/org/drools/core/impl/KnowledgeBaseImpl.java
+++ b/drools-core/src/main/java/org/drools/core/impl/KnowledgeBaseImpl.java
@@ -356,20 +356,13 @@ public class KnowledgeBaseImpl
     public StatefulKnowledgeSessionImpl createSession(long id, FactHandleFactory handleFactory, long propagationContext, SessionConfiguration config, InternalAgenda agenda, Environment environment) {
         StatefulKnowledgeSessionImpl session = ( StatefulKnowledgeSessionImpl ) kieComponentFactory.getWorkingMemoryFactory()
                 .createWorkingMemory( id, this, handleFactory, propagationContext, config, agenda, environment );
-        return internalInitSession( config, session );
+        return session.internalInitSession( config, this);
     }
 
     public StatefulKnowledgeSessionImpl internalCreateStatefulKnowledgeSession( Environment environment, SessionConfiguration sessionConfig ) {
         StatefulKnowledgeSessionImpl session = ( StatefulKnowledgeSessionImpl ) kieComponentFactory.getWorkingMemoryFactory()
                 .createWorkingMemory( nextWorkingMemoryCounter(), this, sessionConfig, environment );
-        return internalInitSession( sessionConfig, session );
-    }
-
-    private StatefulKnowledgeSessionImpl internalInitSession( SessionConfiguration sessionConfig, StatefulKnowledgeSessionImpl session ) {
-        if ( sessionConfig.isKeepReference() ) {
-            addStatefulSession(session);
-        }
-        return session;
+        return session.internalInitSession( sessionConfig, this);
     }
 
     public Collection<? extends KieSession> getKieSessions() {
diff --git a/drools-core/src/main/java/org/drools/core/impl/StatefulKnowledgeSessionImpl.java b/drools-core/src/main/java/org/drools/core/impl/StatefulKnowledgeSessionImpl.java
index 6512bfa..095a4ea 100644
--- a/drools-core/src/main/java/org/drools/core/impl/StatefulKnowledgeSessionImpl.java
+++ b/drools-core/src/main/java/org/drools/core/impl/StatefulKnowledgeSessionImpl.java
@@ -601,6 +601,13 @@ public class StatefulKnowledgeSessionImpl extends AbstractRuntime
                                        ObjectStoreWrapper.OBJECT );
     }
 
+    public StatefulKnowledgeSessionImpl internalInitSession(SessionConfiguration sessionConfig, KnowledgeBaseImpl knowledgeBase) {
+        if ( sessionConfig.isKeepReference() ) {
+            knowledgeBase.addStatefulSession(this);
+        }
+        return this;
+    }
+
     public static abstract class AbstractImmutableCollection
             implements
             Collection {
diff --git a/drools-core/src/main/java/org/drools/core/phreak/AddRemoveRule.java b/drools-core/src/main/java/org/drools/core/phreak/AddRemoveRule.java
index 86d244d..74b42c7 100644
--- a/drools-core/src/main/java/org/drools/core/phreak/AddRemoveRule.java
+++ b/drools-core/src/main/java/org/drools/core/phreak/AddRemoveRule.java
@@ -678,9 +678,9 @@ public class AddRemoveRule {
                              wm.getNodeMemory((AbstractTerminalNode) pmem.getPathEndNode().getPathEndNodes()[0]);
 
         InternalAgenda agenda = pmem.getActualAgenda( wm );
-        RuleNetworkEvaluator.INSTANCE.outerEval(pmem, node, bit, mem, smems, sm.getPos(), leftTupleSets, agenda,
+        pmem.outerEval(node, bit, mem, smems, sm.getPos(), leftTupleSets, agenda,
                                                 new LinkedList<StackEntry>(),
-                                                true, rtnPmem.getOrCreateRuleAgendaItem(agenda).getRuleExecutor());
+                                                true, rtnPmem.getOrCreateRuleAgendaItem(agenda).getRuleExecutor(), RuleNetworkEvaluator.INSTANCE);
     }
 
 
diff --git a/drools-core/src/main/java/org/drools/core/phreak/PhreakAccumulateNode.java b/drools-core/src/main/java/org/drools/core/phreak/PhreakAccumulateNode.java
index 66b10cb..4bd7b01 100644
--- a/drools-core/src/main/java/org/drools/core/phreak/PhreakAccumulateNode.java
+++ b/drools-core/src/main/java/org/drools/core/phreak/PhreakAccumulateNode.java
@@ -30,8 +30,6 @@ import org.drools.core.reteoo.RightTuple;
 import org.drools.core.reteoo.TupleMemory;
 import org.drools.core.rule.Accumulate;
 import org.drools.core.rule.ContextEntry;
-import org.drools.core.spi.AlphaNodeFieldConstraint;
-import org.drools.core.spi.PropagationContext;
 import org.drools.core.util.AbstractHashTable;
 import org.drools.core.util.FastIterator;
 
@@ -94,18 +92,18 @@ public class PhreakAccumulateNode {
         // LeftTuple retracts are already on the trgLeftTuples
         for (LeftTuple leftTuple = tempLeftTuples.getInsertFirst(); leftTuple != null; ) {
             LeftTuple next = leftTuple.getStagedNext();
-            evaluateResultConstraints(accNode, sink, accumulate, leftTuple, leftTuple.getPropagationContext(),
+            accNode.evaluateResultConstraints(sink, accumulate, leftTuple, leftTuple.getPropagationContext(),
                                       wm, am, (AccumulateContext) leftTuple.getContextObject(),
-                                      trgLeftTuples, stagedLeftTuples);
+                                      trgLeftTuples, stagedLeftTuples, this);
             leftTuple.clearStaged();
             leftTuple = next;
         }
 
         for (LeftTuple leftTuple = tempLeftTuples.getUpdateFirst(); leftTuple != null; ) {
             LeftTuple next = leftTuple.getStagedNext();
-            evaluateResultConstraints( accNode, sink, accumulate, leftTuple, leftTuple.getPropagationContext(),
+            accNode.evaluateResultConstraints(sink, accumulate, leftTuple, leftTuple.getPropagationContext(),
                                        wm, am, (AccumulateContext) leftTuple.getContextObject(),
-                                       trgLeftTuples, stagedLeftTuples );
+                                       trgLeftTuples, stagedLeftTuples, this);
             leftTuple.clearStaged();
             leftTuple = next;
         }
@@ -640,88 +638,6 @@ public class PhreakAccumulateNode {
         }
     }
 
-    private void evaluateResultConstraints(final AccumulateNode accNode,
-                                           final LeftTupleSink sink,
-                                           final Accumulate accumulate,
-                                           final LeftTuple leftTuple,
-                                           final PropagationContext context,
-                                           final InternalWorkingMemory workingMemory,
-                                           final AccumulateMemory memory,
-                                           final AccumulateContext accctx,
-                                           final TupleSets<LeftTuple> trgLeftTuples,
-                                           final TupleSets<LeftTuple> stagedLeftTuples) {
-        // get the actual result
-        Object result = accumulate.getResult(memory.workingMemoryContext,
-                                             accctx.context,
-                                             leftTuple,
-                                             workingMemory);
-        if (result == null) {
-            return;
-        }
-
-        if (accctx.getResultFactHandle() == null) {
-            final InternalFactHandle handle = accNode.createResultFactHandle(context,
-                                                                             workingMemory,
-                                                                             leftTuple,
-                                                                             result);
-
-            accctx.setResultFactHandle(handle);
-
-            accctx.setResultLeftTuple(sink.createLeftTuple(handle, leftTuple, sink));
-        } else {
-            accctx.getResultFactHandle().setObject(result);
-        }
-
-        // First alpha node filters
-        AlphaNodeFieldConstraint[] resultConstraints = accNode.getResultConstraints();
-        BetaConstraints resultBinder = accNode.getResultBinder();
-        boolean isAllowed = true;
-        for ( AlphaNodeFieldConstraint resultConstraint : resultConstraints ) {
-            if ( !resultConstraint.isAllowed( accctx.resultFactHandle,
-                                              workingMemory ) ) {
-                isAllowed = false;
-                break;
-            }
-        }
-        if (isAllowed) {
-            resultBinder.updateFromTuple(memory.resultsContext,
-                                         workingMemory,
-                                         leftTuple);
-            if (!resultBinder.isAllowedCachedLeft(memory.resultsContext,
-                                                  accctx.getResultFactHandle())) {
-                isAllowed = false;
-            }
-            resultBinder.resetTuple(memory.resultsContext);
-        }
-
-
-        LeftTuple childLeftTuple = accctx.getResultLeftTuple();
-        if (accctx.getPropagationContext() != null) {
-            childLeftTuple.setPropagationContext(accctx.getPropagationContext());
-            accctx.setPropagationContext(null);
-        } else {
-            childLeftTuple.setPropagationContext(leftTuple.getPropagationContext());
-        }
-
-        if (accctx.propagated) {
-            normalizeStagedTuples( stagedLeftTuples, childLeftTuple );
-
-            if (isAllowed) {
-                // modify
-                trgLeftTuples.addUpdate(childLeftTuple);
-            } else {
-                // retract
-                trgLeftTuples.addDelete(childLeftTuple);
-                accctx.propagated = false;
-            }
-        } else if (isAllowed) {
-            // assert
-            trgLeftTuples.addInsert(childLeftTuple);
-            accctx.propagated = true;
-        }
-
-    }
-
     private static void addMatch(final AccumulateNode accNode,
                                  final Accumulate accumulate,
                                  final LeftTuple leftTuple,
diff --git a/drools-core/src/main/java/org/drools/core/phreak/PhreakAsyncSendNode.java b/drools-core/src/main/java/org/drools/core/phreak/PhreakAsyncSendNode.java
index 332e045..f04fda7 100644
--- a/drools-core/src/main/java/org/drools/core/phreak/PhreakAsyncSendNode.java
+++ b/drools-core/src/main/java/org/drools/core/phreak/PhreakAsyncSendNode.java
@@ -131,7 +131,7 @@ public class PhreakAsyncSendNode {
                            BetaConstraints betaConstraints,
                            ContextEntry[] context ) {
         if (betaConstraints.isAllowedCachedLeft(context, factHandle)) {
-            AsyncMessagesCoordinator.get().propagate( node.getMessageId(), new AsyncMessage( wm, factHandle.getObject() ) );
+            new AsyncMessage( wm, factHandle.getObject() ).propagate( node.getMessageId(), AsyncMessagesCoordinator.get());
         }
     }
 }
diff --git a/drools-core/src/main/java/org/drools/core/phreak/PhreakBranchNode.java b/drools-core/src/main/java/org/drools/core/phreak/PhreakBranchNode.java
index 77fa745..bc050e2 100644
--- a/drools-core/src/main/java/org/drools/core/phreak/PhreakBranchNode.java
+++ b/drools-core/src/main/java/org/drools/core/phreak/PhreakBranchNode.java
@@ -29,29 +29,6 @@ import static org.drools.core.phreak.RuleNetworkEvaluator.normalizeStagedTuples;
 
 
 public class PhreakBranchNode {
-    public void doNode(ConditionalBranchNode branchNode,
-                       ConditionalBranchMemory cbm,
-                       LeftTupleSink sink,
-                       InternalAgenda agenda,
-                       TupleSets<LeftTuple> srcLeftTuples,
-                       TupleSets<LeftTuple> trgLeftTuples,
-                       TupleSets<LeftTuple> stagedLeftTuples,
-                       RuleExecutor executor) {
-
-        if (srcLeftTuples.getDeleteFirst() != null) {
-            doLeftDeletes(sink, agenda, srcLeftTuples, trgLeftTuples, stagedLeftTuples, executor);
-        }
-
-        if (srcLeftTuples.getUpdateFirst() != null) {
-            doLeftUpdates(branchNode, cbm, sink, agenda, srcLeftTuples, trgLeftTuples, stagedLeftTuples, executor);
-        }
-
-        if (srcLeftTuples.getInsertFirst() != null) {
-            doLeftInserts(branchNode, cbm, sink, agenda, srcLeftTuples, trgLeftTuples, executor);
-        }
-
-        srcLeftTuples.resetAll();
-    }
 
     public void doLeftInserts(ConditionalBranchNode branchNode,
                               ConditionalBranchMemory cbm,
diff --git a/drools-core/src/main/java/org/drools/core/phreak/PhreakEvalNode.java b/drools-core/src/main/java/org/drools/core/phreak/PhreakEvalNode.java
index 1c27a5e..15a249e 100644
--- a/drools-core/src/main/java/org/drools/core/phreak/PhreakEvalNode.java
+++ b/drools-core/src/main/java/org/drools/core/phreak/PhreakEvalNode.java
@@ -36,29 +36,6 @@ public class PhreakEvalNode {
 
     private static final String EVAL_LEFT_TUPLE_DELETED = "EVAL_LEFT_TUPLE_DELETED";
 
-    public void doNode(EvalConditionNode evalNode,
-                       EvalMemory em,
-                       LeftTupleSink sink,
-                       InternalWorkingMemory wm,
-                       TupleSets<LeftTuple> srcLeftTuples,
-                       TupleSets<LeftTuple> trgLeftTuples,
-                       TupleSets<LeftTuple> stagedLeftTuples) {
-
-        if (srcLeftTuples.getDeleteFirst() != null) {
-            doLeftDeletes(srcLeftTuples, trgLeftTuples, stagedLeftTuples);
-        }
-
-        if (srcLeftTuples.getUpdateFirst() != null) {
-            doLeftUpdates(evalNode, em, sink, wm, srcLeftTuples, trgLeftTuples, stagedLeftTuples);
-        }
-
-        if (srcLeftTuples.getInsertFirst() != null) {
-            doLeftInserts(evalNode, em, sink, wm, srcLeftTuples, trgLeftTuples);
-        }
-
-        srcLeftTuples.resetAll();
-    }
-
     public void doLeftInserts(EvalConditionNode evalNode,
                               EvalMemory em,
                               LeftTupleSink sink,
diff --git a/drools-core/src/main/java/org/drools/core/phreak/PhreakExistsNode.java b/drools-core/src/main/java/org/drools/core/phreak/PhreakExistsNode.java
index 951e556..b23ddec 100644
--- a/drools-core/src/main/java/org/drools/core/phreak/PhreakExistsNode.java
+++ b/drools-core/src/main/java/org/drools/core/phreak/PhreakExistsNode.java
@@ -38,59 +38,6 @@ import static org.drools.core.phreak.PhreakJoinNode.updateChildLeftTuple;
 * To change this template use File | Settings | File Templates.
 */
 public class PhreakExistsNode {
-    public void doNode(ExistsNode existsNode,
-                       LeftTupleSink sink,
-                       BetaMemory bm,
-                       InternalWorkingMemory wm,
-                       TupleSets<LeftTuple> srcLeftTuples,
-                       TupleSets<LeftTuple> trgLeftTuples,
-                       TupleSets<LeftTuple> stagedLeftTuples) {
-
-        TupleSets<RightTuple> srcRightTuples = bm.getStagedRightTuples().takeAll();
-
-        if (srcLeftTuples.getDeleteFirst() != null) {
-            doLeftDeletes(bm, srcLeftTuples, trgLeftTuples, stagedLeftTuples);
-        }
-
-        if (srcLeftTuples.getUpdateFirst() != null )  {
-            RuleNetworkEvaluator.doUpdatesExistentialReorderLeftMemory(bm,
-                                                                       srcLeftTuples);
-        }
-
-        if ( srcRightTuples.getUpdateFirst() != null ) {
-            RuleNetworkEvaluator.doUpdatesExistentialReorderRightMemory(bm,
-                                                                        existsNode,
-                                                                        srcRightTuples); // this also preserves the next rightTuple
-        }
-
-        if (srcRightTuples.getInsertFirst() != null) {
-            // left deletes must come before right deletes. Otherwise right deletes could
-            // stage a deletion, that is later deleted in the rightDelete, causing potential problems
-            doRightInserts(existsNode, sink, bm, wm, srcRightTuples, trgLeftTuples);
-        }
-
-        if (srcRightTuples.getUpdateFirst() != null) {
-            // must come after rightInserts and before rightDeletes, to avoid staging clash
-            doRightUpdates(existsNode, sink, bm, wm, srcRightTuples, trgLeftTuples, stagedLeftTuples);
-        }
-
-        if (srcRightTuples.getDeleteFirst() != null) {
-            // must come after rightUpdetes, to avoid staging clash
-            doRightDeletes(existsNode, bm, wm, srcRightTuples, trgLeftTuples, stagedLeftTuples);
-        }
-
-
-        if (srcLeftTuples.getUpdateFirst() != null) {
-            doLeftUpdates(existsNode, sink, bm, wm, srcLeftTuples, trgLeftTuples, stagedLeftTuples);
-        }
-
-        if (srcLeftTuples.getInsertFirst() != null) {
-            doLeftInserts(existsNode, sink, bm, wm, srcLeftTuples, trgLeftTuples);
-        }
-
-        srcRightTuples.resetAll();
-        srcLeftTuples.resetAll();
-    }
 
     public void doLeftInserts(ExistsNode existsNode,
                               LeftTupleSink sink,
diff --git a/drools-core/src/main/java/org/drools/core/phreak/PhreakJoinNode.java b/drools-core/src/main/java/org/drools/core/phreak/PhreakJoinNode.java
index 44eae65..9fa15a7 100644
--- a/drools-core/src/main/java/org/drools/core/phreak/PhreakJoinNode.java
+++ b/drools-core/src/main/java/org/drools/core/phreak/PhreakJoinNode.java
@@ -29,51 +29,6 @@ import org.drools.core.util.AbstractHashTable;
 import org.drools.core.util.FastIterator;
 
 public class PhreakJoinNode {
-    public void doNode(JoinNode joinNode,
-                       LeftTupleSink sink,
-                       BetaMemory bm,
-                       InternalWorkingMemory wm,
-                       TupleSets<LeftTuple> srcLeftTuples,
-                       TupleSets<LeftTuple> trgLeftTuples,
-                       TupleSets<LeftTuple> stagedLeftTuples) {
-
-        TupleSets<RightTuple> srcRightTuples = bm.getStagedRightTuples().takeAll();
-
-        if (srcRightTuples.getDeleteFirst() != null) {
-            doRightDeletes(bm, srcRightTuples, trgLeftTuples, stagedLeftTuples);
-        }
-
-        if (srcLeftTuples.getDeleteFirst() != null) {
-            doLeftDeletes(bm, srcLeftTuples, trgLeftTuples, stagedLeftTuples);
-        }
-
-        if (srcRightTuples.getUpdateFirst() != null) {
-            RuleNetworkEvaluator.doUpdatesReorderRightMemory(bm, srcRightTuples);
-        }
-
-        if (srcLeftTuples.getUpdateFirst() != null ) {
-            RuleNetworkEvaluator.doUpdatesReorderLeftMemory(bm, srcLeftTuples);
-        }
-
-        if (srcRightTuples.getUpdateFirst() != null) {
-            doRightUpdates(joinNode, sink, bm, wm, srcRightTuples, trgLeftTuples, stagedLeftTuples);
-        }
-
-        if (srcLeftTuples.getUpdateFirst() != null ) {
-            doLeftUpdates(joinNode, sink, bm, wm, srcLeftTuples, trgLeftTuples, stagedLeftTuples);
-        }
-
-        if (srcRightTuples.getInsertFirst() != null) {
-            doRightInserts(joinNode, sink, bm, wm, srcRightTuples, trgLeftTuples);
-        }
-
-        if (srcLeftTuples.getInsertFirst() != null) {
-            doLeftInserts(joinNode, sink, bm, wm, srcLeftTuples, trgLeftTuples);
-        }
-
-        srcRightTuples.resetAll();
-        srcLeftTuples.resetAll();
-    }
 
     public void doLeftInserts(JoinNode joinNode,
                               LeftTupleSink sink,
diff --git a/drools-core/src/main/java/org/drools/core/phreak/PhreakNotNode.java b/drools-core/src/main/java/org/drools/core/phreak/PhreakNotNode.java
index b5f5227..29aec9f 100644
--- a/drools-core/src/main/java/org/drools/core/phreak/PhreakNotNode.java
+++ b/drools-core/src/main/java/org/drools/core/phreak/PhreakNotNode.java
@@ -31,63 +31,6 @@ import org.drools.core.util.FastIterator;
 import static org.drools.core.phreak.PhreakJoinNode.updateChildLeftTuple;
 
 public class PhreakNotNode {
-    public void doNode(NotNode notNode,
-                       LeftTupleSink sink,
-                       BetaMemory bm,
-                       InternalWorkingMemory wm,
-                       TupleSets<LeftTuple> srcLeftTuples,
-                       TupleSets<LeftTuple> trgLeftTuples,
-                       TupleSets<LeftTuple> stagedLeftTuples) {
-
-        TupleSets<RightTuple> srcRightTuples = bm.getStagedRightTuples().takeAll();
-
-        if (srcLeftTuples.getDeleteFirst() != null) {
-            // left deletes must come before right deletes. Otherwise right deletes could
-            // stage an insertion, that is later deleted in the rightDelete, causing potential problems
-            doLeftDeletes(bm, srcLeftTuples, trgLeftTuples, stagedLeftTuples);
-        }
-
-
-        if (srcLeftTuples.getUpdateFirst() != null) {
-            // must happen before right inserts, so it can find left tuples to block.
-            RuleNetworkEvaluator.doUpdatesExistentialReorderLeftMemory(bm,
-                                                                       srcLeftTuples);
-        }
-
-        if ( srcRightTuples.getUpdateFirst() != null) {
-            RuleNetworkEvaluator.doUpdatesExistentialReorderRightMemory(bm,
-                                                                        notNode,
-                                                                        srcRightTuples); // this also preserves the next rightTuple
-        }
-
-        if (srcRightTuples.getInsertFirst() != null) {
-            // must come before right updates and inserts, as they might cause insert propagation, while this causes delete propagations, resulting in staging clash.
-            doRightInserts(notNode, bm, wm, srcRightTuples, trgLeftTuples, stagedLeftTuples);
-        }
-
-
-
-        if (srcRightTuples.getUpdateFirst() != null) {
-            // must come after rightInserts and before rightDeletes, to avoid staging clash
-            doRightUpdates(notNode, sink, bm, wm, srcRightTuples, trgLeftTuples, stagedLeftTuples);
-        }
-
-        if (srcRightTuples.getDeleteFirst() != null) {
-            // must come after rightUpdates, to avoid staging clash
-            doRightDeletes(notNode, sink, bm, wm, srcRightTuples, trgLeftTuples);
-        }
-
-        if (srcLeftTuples.getUpdateFirst() != null) {
-            doLeftUpdates(notNode, sink, bm, wm, srcLeftTuples, trgLeftTuples, stagedLeftTuples);
-        }
-
-        if (srcLeftTuples.getInsertFirst() != null) {
-            doLeftInserts(notNode, sink, bm, wm, srcLeftTuples, trgLeftTuples);
-        }
-
-        srcRightTuples.resetAll();
-        srcLeftTuples.resetAll();
-    }
 
     public void doLeftInserts(NotNode notNode,
                               LeftTupleSink sink,
diff --git a/drools-core/src/main/java/org/drools/core/phreak/PhreakQueryNode.java b/drools-core/src/main/java/org/drools/core/phreak/PhreakQueryNode.java
index 6122f2b..e888810 100644
--- a/drools-core/src/main/java/org/drools/core/phreak/PhreakQueryNode.java
+++ b/drools-core/src/main/java/org/drools/core/phreak/PhreakQueryNode.java
@@ -28,28 +28,6 @@ import org.drools.core.reteoo.SegmentMemory;
 import org.drools.core.spi.PropagationContext;
 
 public class PhreakQueryNode {
-    public void doNode(QueryElementNode queryNode,
-                       QueryElementNodeMemory qmem,
-                       StackEntry stackEntry,
-                       InternalWorkingMemory wm,
-                       TupleSets<LeftTuple> srcLeftTuples,
-                       TupleSets<LeftTuple> trgLeftTuples,
-                       TupleSets<LeftTuple> stagedLeftTuples) {
-
-        if (srcLeftTuples.getDeleteFirst() != null) {
-            doLeftDeletes(qmem, wm, srcLeftTuples, trgLeftTuples, stagedLeftTuples);
-        }
-
-        if (srcLeftTuples.getUpdateFirst() != null) {
-            doLeftUpdates(queryNode, qmem, wm, srcLeftTuples);
-        }
-
-        if (srcLeftTuples.getInsertFirst() != null) {
-            doLeftInserts(queryNode, qmem, stackEntry, wm, srcLeftTuples);
-        }
-
-        srcLeftTuples.resetAll();
-    }
 
     public void doLeftInserts(QueryElementNode queryNode,
                               QueryElementNodeMemory qmem,
diff --git a/drools-core/src/main/java/org/drools/core/phreak/PhreakQueryTerminalNode.java b/drools-core/src/main/java/org/drools/core/phreak/PhreakQueryTerminalNode.java
index daf9bdb..a0359a5 100644
--- a/drools-core/src/main/java/org/drools/core/phreak/PhreakQueryTerminalNode.java
+++ b/drools-core/src/main/java/org/drools/core/phreak/PhreakQueryTerminalNode.java
@@ -38,24 +38,6 @@ import java.util.List;
 * To change this template use File | Settings | File Templates.
 */
 public class PhreakQueryTerminalNode {
-    public void doNode(QueryTerminalNode qtnNode,
-                       InternalAgenda agenda,
-                       TupleSets<LeftTuple> srcLeftTuples,
-                       LinkedList<StackEntry> stack) {
-        if (srcLeftTuples.getDeleteFirst() != null) {
-            doLeftDeletes(qtnNode, agenda, srcLeftTuples, stack);
-        }
-
-        if (srcLeftTuples.getUpdateFirst() != null) {
-            doLeftUpdates(qtnNode, agenda, srcLeftTuples, stack);
-        }
-
-        if (srcLeftTuples.getInsertFirst() != null) {
-            doLeftInserts(qtnNode, agenda, srcLeftTuples, stack);
-        }
-
-        srcLeftTuples.resetAll();
-    }
 
     public void doLeftInserts(QueryTerminalNode qtnNode,
                               InternalAgenda agenda,
diff --git a/drools-core/src/main/java/org/drools/core/phreak/PhreakTimerNode.java b/drools-core/src/main/java/org/drools/core/phreak/PhreakTimerNode.java
index 5053df1..13688c0 100644
--- a/drools-core/src/main/java/org/drools/core/phreak/PhreakTimerNode.java
+++ b/drools-core/src/main/java/org/drools/core/phreak/PhreakTimerNode.java
@@ -230,7 +230,7 @@ public class PhreakTimerNode {
                                    final TupleSets<LeftTuple> stagedLeftTuples) {
         InternalWorkingMemory wm = agenda.getWorkingMemory();
         if ( leftTuple.getPropagationContext().getReaderContext() == null ) {
-            final Trigger trigger = createTrigger( timerNode, wm, timer, timestamp, calendarNames, calendars, leftTuple );
+            final Trigger trigger = timerNode.createTrigger(wm, timer, timestamp, calendarNames, calendars, leftTuple, this);
 
             // regular propagation
             scheduleTimer( timerNode, tm, smem, sink, wm, timerService, timestamp, leftTuple, trgLeftTuples, stagedLeftTuples, trigger );
@@ -244,7 +244,7 @@ public class PhreakTimerNode {
                 }
                 @Override
                 public Trigger getTrigger() {
-                    return createTrigger( timerNode, wm, timer, timestamp, calendarNames, calendars, leftTuple );
+                    return timerNode.createTrigger(wm, timer, timestamp, calendarNames, calendars, leftTuple, PhreakTimerNode.this);
                 }
             };
             TupleKey key = PersisterHelper.createTupleKey( leftTuple );
@@ -253,18 +253,6 @@ public class PhreakTimerNode {
         }
     }
 
-    private Trigger createTrigger(final TimerNode timerNode,
-                                  final InternalWorkingMemory wm,
-                                  final Timer timer,
-                                  final long timestamp,
-                                  final String[] calendarNames,
-                                  final Calendars calendars,
-                                  final LeftTuple leftTuple) {
-        Object obj = leftTuple.getContextObject();
-        DefaultJobHandle jobHandle = obj instanceof DefaultJobHandle ? (DefaultJobHandle) obj : null;
-        return timer.createTrigger( timestamp, leftTuple, jobHandle, calendarNames, calendars, timerNode.getDeclarations(), wm );
-    }
-
     public interface Scheduler {
         void schedule( Trigger t );
         Trigger getTrigger();
@@ -465,10 +453,10 @@ public class PhreakTimerNode {
             bit = bit << 1;
         }
 
-        RuleNetworkEvaluator.INSTANCE.outerEval(pmem, sink, bit, tm,
+        pmem.outerEval(sink, bit, tm,
                                                 smems, smemIndex, trgLeftTuples,
                                                 agenda, new LinkedList<>(), true,
-                                                pmem.getRuleAgendaItem().getRuleExecutor());
+                                                pmem.getRuleAgendaItem().getRuleExecutor(), RuleNetworkEvaluator.INSTANCE);
     }
 
     public static class TimerNodeJobContext
diff --git a/drools-core/src/main/java/org/drools/core/phreak/PropagationEntry.java b/drools-core/src/main/java/org/drools/core/phreak/PropagationEntry.java
index 86c4e77..c93939a 100644
--- a/drools-core/src/main/java/org/drools/core/phreak/PropagationEntry.java
+++ b/drools-core/src/main/java/org/drools/core/phreak/PropagationEntry.java
@@ -257,10 +257,9 @@ public interface PropagationEntry {
             ObjectTypeNode[] cachedNodes = objectTypeConf.getObjectTypeNodes();
             for ( int i = 0, length = cachedNodes.length; i < length; i++ ) {
                 ObjectTypeNode otn = cachedNodes[i];
-                ( (CompositePartitionAwareObjectSinkAdapter) otn.getObjectSinkPropagator() )
-                        .propagateModifyObjectForPartition( handle, modifyPreviousTuples,
-                                                            context.adaptModificationMaskForObjectType(otn.getObjectType(), wm),
-                                                            wm, partition );
+                modifyPreviousTuples.propagateModifyObjectForPartition( handle,
+                        context.adaptModificationMaskForObjectType(otn.getObjectType(), wm),
+                                                            wm, partition, ( (CompositePartitionAwareObjectSinkAdapter) otn.getObjectSinkPropagator() ));
                 if (i < cachedNodes.length - 1) {
                     EntryPointNode.removeRightTuplesMatchingOTN( context, wm, modifyPreviousTuples, otn, partition );
                 }
diff --git a/drools-core/src/main/java/org/drools/core/phreak/RuleExecutor.java b/drools-core/src/main/java/org/drools/core/phreak/RuleExecutor.java
index 2a0d31c..7958618 100644
--- a/drools-core/src/main/java/org/drools/core/phreak/RuleExecutor.java
+++ b/drools-core/src/main/java/org/drools/core/phreak/RuleExecutor.java
@@ -123,7 +123,7 @@ public class RuleExecutor {
 
                 //check if the rule is not effective or
                 // if the current Rule is no-loop and the origin rule is the same then return
-                if (cancelAndContinue(wm, rtn, rule, tuple, filter)) {
+                if (rtn.cancelAndContinue(wm, rule, tuple, filter, this)) {
                     continue;
                 }
 
@@ -218,28 +218,6 @@ public class RuleExecutor {
         return ruleAgendaItem;
     }
 
-    private boolean cancelAndContinue(InternalWorkingMemory wm,
-            RuleTerminalNode rtn,
-            RuleImpl rule,
-            Tuple leftTuple,
-            AgendaFilter filter) {
-        // NB. stopped setting the LT.object to Boolean.TRUE, that Reteoo did.
-        if ( !rule.isEffective(leftTuple, rtn, wm) ) {
-            return true;
-        }
-
-        if (rule.getCalendars() != null) {
-            long timestamp = wm.getSessionClock().getCurrentTime();
-            for (String cal : rule.getCalendars()) {
-                if (!wm.getCalendars().get(cal).isTimeIncluded(timestamp)) {
-                    return true;
-                }
-            }
-        }
-
-        return filter != null && !filter.accept((Activation) leftTuple);
-    }
-
     private boolean haltRuleFiring(int fireCount,
                                    int fireLimit,
                                    int localFireCount,
diff --git a/drools-core/src/main/java/org/drools/core/phreak/RuleNetworkEvaluator.java b/drools-core/src/main/java/org/drools/core/phreak/RuleNetworkEvaluator.java
index c9156d5..e0380d1 100644
--- a/drools-core/src/main/java/org/drools/core/phreak/RuleNetworkEvaluator.java
+++ b/drools-core/src/main/java/org/drools/core/phreak/RuleNetworkEvaluator.java
@@ -130,7 +130,7 @@ public class RuleNetworkEvaluator {
         if (log.isTraceEnabled()) {
             log.trace("Rule[name={}] segments={} {}", ((TerminalNode)pmem.getPathEndNode()).getRule().getName(), smems.length, srcTuples.toStringSizes());
         }
-        outerEval(pmem, node, bit, nodeMem, smems, smemIndex, srcTuples, agenda, stack, true, executor);
+        pmem.outerEval(node, bit, nodeMem, smems, smemIndex, srcTuples, agenda, stack, true, executor, this);
     }
 
     public static String indent(int size) {
@@ -161,29 +161,6 @@ public class RuleNetworkEvaluator {
         return offset;
     }
 
-    public void outerEval(PathMemory pmem,
-                          NetworkNode node,
-                          long bit,
-                          Memory nodeMem,
-                          SegmentMemory[] smems,
-                          int smemIndex,
-                          TupleSets<LeftTuple> trgTuples,
-                          InternalAgenda agenda,
-                          LinkedList<StackEntry> stack,
-                          boolean processRian,
-                          RuleExecutor executor) {
-        innerEval(pmem, node, bit, nodeMem, smems, smemIndex, trgTuples, agenda, stack, processRian, executor);
-        while (true) {
-            // eval
-            if (!stack.isEmpty()) {
-                StackEntry entry = stack.removeLast();
-                evalStackEntry(entry, stack, executor, agenda);
-            } else {
-                return; // stack is empty return;
-            }
-        }
-    }
-
     public void evalStackEntry(StackEntry entry, LinkedList<StackEntry> stack, RuleExecutor executor, InternalAgenda agenda) {
         NetworkNode node = entry.getNode();
         Memory nodeMem = entry.getNodeMem();
@@ -321,7 +298,7 @@ public class RuleNetworkEvaluator {
                     pRtNode.doNode(( TerminalNode ) node, agenda, srcTuples, executor);
                     break;
                 case NodeTypeEnums.QueryTerminalNode:
-                    pQtNode.doNode((QueryTerminalNode) node, agenda, srcTuples, stack);
+                    ((QueryTerminalNode) node).doNode(agenda, srcTuples, stack, pQtNode);
                     break;
                 case NodeTypeEnums.RightInputAdaterNode:
                     doRiaNode2(agenda.getWorkingMemory(), srcTuples, (RightInputAdapterNode) node);
@@ -384,8 +361,8 @@ public class RuleNetworkEvaluator {
             boolean exitInnerEval = false;
             switch (node.getType()) {
                 case NodeTypeEnums.EvalConditionNode: {
-                    pEvalNode.doNode((EvalConditionNode) node, (EvalMemory) nodeMem, sink,
-                                     agenda.getWorkingMemory(), srcTuples, trgTuples, stagedLeftTuples);
+                    ((EvalConditionNode) node).doNode((EvalMemory) nodeMem, sink,
+                                     agenda.getWorkingMemory(), srcTuples, trgTuples, stagedLeftTuples, pEvalNode);
                     break;
 
                 }
@@ -409,8 +386,8 @@ public class RuleNetworkEvaluator {
                     break;
                 }
                 case NodeTypeEnums.ConditionalBranchNode: {
-                    pBranchNode.doNode((ConditionalBranchNode) node, (ConditionalBranchMemory) nodeMem, sink,
-                                       agenda, srcTuples, trgTuples, stagedLeftTuples, executor);
+                    ((ConditionalBranchNode) node).doNode((ConditionalBranchMemory) nodeMem, sink,
+                                       agenda, srcTuples, trgTuples, stagedLeftTuples, executor, pBranchNode);
                     break;
                 }
                 case NodeTypeEnums.AsyncSendNode: {
@@ -479,8 +456,8 @@ public class RuleNetworkEvaluator {
 
             stack.add(stackEntry);
 
-            pQueryNode.doNode(qnode, (QueryElementNodeMemory) nodeMem, stackEntry,
-                              wm, srcTuples, trgTuples, stagedLeftTuples);
+            stackEntry.doNode(qnode, (QueryElementNodeMemory) nodeMem,
+                    wm, srcTuples, trgTuples, stagedLeftTuples, pQueryNode);
 
             SegmentMemory qsmem = ((QueryElementNodeMemory) nodeMem).getQuerySegmentMemory();
             List<PathMemory> qpmems = qsmem.getPathMemories();
@@ -563,18 +540,18 @@ public class RuleNetworkEvaluator {
 
         switch (node.getType()) {
             case NodeTypeEnums.JoinNode: {
-                pJoinNode.doNode((JoinNode) node, sink, bm,
-                                 wm, srcTuples, trgTuples, stagedLeftTuples);
+                ((JoinNode) node).doNode(sink, bm,
+                                 wm, srcTuples, trgTuples, stagedLeftTuples, pJoinNode);
                 break;
             }
             case NodeTypeEnums.NotNode: {
-                pNotNode.doNode((NotNode) node, sink, bm,
-                                wm, srcTuples, trgTuples, stagedLeftTuples);
+                bm.doNode((NotNode) node, sink,
+                        wm, srcTuples, trgTuples, stagedLeftTuples, pNotNode);
                 break;
             }
             case NodeTypeEnums.ExistsNode: {
-                pExistsNode.doNode((ExistsNode) node, sink, bm,
-                                   wm, srcTuples, trgTuples, stagedLeftTuples);
+                ((ExistsNode) node).doNode(sink, bm,
+                                   wm, srcTuples, trgTuples, stagedLeftTuples, pExistsNode);
                 break;
             }
             case NodeTypeEnums.AccumulateNode: {
diff --git a/drools-core/src/main/java/org/drools/core/phreak/StackEntry.java b/drools-core/src/main/java/org/drools/core/phreak/StackEntry.java
index eb5f2d8..4ac9b13 100644
--- a/drools-core/src/main/java/org/drools/core/phreak/StackEntry.java
+++ b/drools-core/src/main/java/org/drools/core/phreak/StackEntry.java
@@ -15,14 +15,11 @@
 
 package org.drools.core.phreak;
 
+import org.drools.core.common.InternalWorkingMemory;
 import org.drools.core.common.Memory;
 import org.drools.core.common.NetworkNode;
 import org.drools.core.common.TupleSets;
-import org.drools.core.reteoo.LeftInputAdapterNode;
-import org.drools.core.reteoo.LeftTuple;
-import org.drools.core.reteoo.LeftTupleSinkNode;
-import org.drools.core.reteoo.PathMemory;
-import org.drools.core.reteoo.SegmentMemory;
+import org.drools.core.reteoo.*;
 import org.drools.core.util.AbstractBaseLinkedListNode;
 
 /**
@@ -107,4 +104,26 @@ public class StackEntry extends AbstractBaseLinkedListNode<StackEntry> {
     public boolean isProcessRian() {
         return processRian;
     }
+
+    public void doNode(QueryElementNode queryNode,
+                       QueryElementNode.QueryElementNodeMemory qmem,
+                       InternalWorkingMemory wm,
+                       TupleSets<LeftTuple> srcLeftTuples,
+                       TupleSets<LeftTuple> trgLeftTuples,
+                       TupleSets<LeftTuple> stagedLeftTuples, PhreakQueryNode phreakQueryNode) {
+
+        if (srcLeftTuples.getDeleteFirst() != null) {
+            phreakQueryNode.doLeftDeletes(qmem, wm, srcLeftTuples, trgLeftTuples, stagedLeftTuples);
+        }
+
+        if (srcLeftTuples.getUpdateFirst() != null) {
+            phreakQueryNode.doLeftUpdates(queryNode, qmem, wm, srcLeftTuples);
+        }
+
+        if (srcLeftTuples.getInsertFirst() != null) {
+            phreakQueryNode.doLeftInserts(queryNode, qmem, this, wm, srcLeftTuples);
+        }
+
+        srcLeftTuples.resetAll();
+    }
 }
diff --git a/drools-core/src/main/java/org/drools/core/reteoo/AccumulateNode.java b/drools-core/src/main/java/org/drools/core/reteoo/AccumulateNode.java
index abfd508..1cd0247 100644
--- a/drools-core/src/main/java/org/drools/core/reteoo/AccumulateNode.java
+++ b/drools-core/src/main/java/org/drools/core/reteoo/AccumulateNode.java
@@ -27,17 +27,14 @@ import java.util.Map;
 
 import org.drools.core.RuleBaseConfiguration;
 import org.drools.core.base.ClassObjectType;
-import org.drools.core.common.BetaConstraints;
-import org.drools.core.common.InternalFactHandle;
-import org.drools.core.common.InternalWorkingMemory;
-import org.drools.core.common.Memory;
-import org.drools.core.common.WorkingMemoryAction;
+import org.drools.core.common.*;
 import org.drools.core.impl.InternalKnowledgeBase;
 import org.drools.core.marshalling.impl.PersisterHelper;
 import org.drools.core.marshalling.impl.ProtobufInputMarshaller;
 import org.drools.core.marshalling.impl.ProtobufInputMarshaller.TupleKey;
 import org.drools.core.marshalling.impl.ProtobufMessages;
 import org.drools.core.marshalling.impl.ProtobufMessages.FactHandle;
+import org.drools.core.phreak.PhreakAccumulateNode;
 import org.drools.core.reteoo.builder.BuildContext;
 import org.drools.core.rule.Accumulate;
 import org.drools.core.rule.ContextEntry;
@@ -51,6 +48,7 @@ import org.drools.core.spi.PropagationContext;
 import org.drools.core.util.AbstractBaseLinkedListNode;
 import org.drools.core.util.bitmask.BitMask;
 
+import static org.drools.core.phreak.RuleNetworkEvaluator.normalizeStagedTuples;
 import static org.drools.core.reteoo.PropertySpecificUtil.calculatePositiveMask;
 
 /**
@@ -239,6 +237,87 @@ public class AccumulateNode extends BetaNode {
         return memory;
     }
 
+    public void evaluateResultConstraints(final LeftTupleSink sink,
+                                          final Accumulate accumulate,
+                                          final LeftTuple leftTuple,
+                                          final PropagationContext context,
+                                          final InternalWorkingMemory workingMemory,
+                                          final AccumulateMemory memory,
+                                          final AccumulateContext accctx,
+                                          final TupleSets<LeftTuple> trgLeftTuples,
+                                          final TupleSets<LeftTuple> stagedLeftTuples, PhreakAccumulateNode phreakAccumulateNode) {
+        // get the actual result
+        Object result = accumulate.getResult(memory.workingMemoryContext,
+                                             accctx.context,
+                                             leftTuple,
+                                             workingMemory);
+        if (result == null) {
+            return;
+        }
+
+        if (accctx.getResultFactHandle() == null) {
+            final InternalFactHandle handle = createResultFactHandle(context,
+                                                                             workingMemory,
+                                                                             leftTuple,
+                                                                             result);
+
+            accctx.setResultFactHandle(handle);
+
+            accctx.setResultLeftTuple(sink.createLeftTuple(handle, leftTuple, sink));
+        } else {
+            accctx.getResultFactHandle().setObject(result);
+        }
+
+        // First alpha node filters
+        AlphaNodeFieldConstraint[] resultConstraints = getResultConstraints();
+        BetaConstraints resultBinder = getResultBinder();
+        boolean isAllowed = true;
+        for ( AlphaNodeFieldConstraint resultConstraint : resultConstraints ) {
+            if ( !resultConstraint.isAllowed( accctx.resultFactHandle,
+                                              workingMemory ) ) {
+                isAllowed = false;
+                break;
+            }
+        }
+        if (isAllowed) {
+            resultBinder.updateFromTuple(memory.resultsContext,
+                                         workingMemory,
+                                         leftTuple);
+            if (!resultBinder.isAllowedCachedLeft(memory.resultsContext,
+                                                  accctx.getResultFactHandle())) {
+                isAllowed = false;
+            }
+            resultBinder.resetTuple(memory.resultsContext);
+        }
+
+
+        LeftTuple childLeftTuple = accctx.getResultLeftTuple();
+        if (accctx.getPropagationContext() != null) {
+            childLeftTuple.setPropagationContext(accctx.getPropagationContext());
+            accctx.setPropagationContext(null);
+        } else {
+            childLeftTuple.setPropagationContext(leftTuple.getPropagationContext());
+        }
+
+        if (accctx.propagated) {
+            normalizeStagedTuples( stagedLeftTuples, childLeftTuple );
+
+            if (isAllowed) {
+                // modify
+                trgLeftTuples.addUpdate(childLeftTuple);
+            } else {
+                // retract
+                trgLeftTuples.addDelete(childLeftTuple);
+                accctx.propagated = false;
+            }
+        } else if (isAllowed) {
+            // assert
+            trgLeftTuples.addInsert(childLeftTuple);
+            accctx.propagated = true;
+        }
+
+    }
+
     public static abstract class AccumulateMemory extends AbstractBaseLinkedListNode<Memory>
         implements
         SegmentNodeMemory {
diff --git a/drools-core/src/main/java/org/drools/core/reteoo/AsyncMessage.java b/drools-core/src/main/java/org/drools/core/reteoo/AsyncMessage.java
index 542b118..d59ea7a 100644
--- a/drools-core/src/main/java/org/drools/core/reteoo/AsyncMessage.java
+++ b/drools-core/src/main/java/org/drools/core/reteoo/AsyncMessage.java
@@ -18,6 +18,8 @@ package org.drools.core.reteoo;
 
 import org.drools.core.common.InternalWorkingMemory;
 
+import java.util.Collections;
+
 public class AsyncMessage {
 
     private final InternalWorkingMemory workingMemory;
@@ -35,4 +37,8 @@ public class AsyncMessage {
     public Object getObject() {
         return object;
     }
+
+    public void propagate(String messageId, AsyncMessagesCoordinator asyncMessagesCoordinator) {
+        asyncMessagesCoordinator.getListeners().getOrDefault( messageId, Collections.emptyList() ).forEach(c -> c.accept(this) );
+    }
 }
diff --git a/drools-core/src/main/java/org/drools/core/reteoo/AsyncMessagesCoordinator.java b/drools-core/src/main/java/org/drools/core/reteoo/AsyncMessagesCoordinator.java
index a0f66bf..f428bf7 100644
--- a/drools-core/src/main/java/org/drools/core/reteoo/AsyncMessagesCoordinator.java
+++ b/drools-core/src/main/java/org/drools/core/reteoo/AsyncMessagesCoordinator.java
@@ -17,7 +17,6 @@
 package org.drools.core.reteoo;
 
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -37,10 +36,6 @@ public class AsyncMessagesCoordinator {
 
     private final Map<String, List<Consumer<AsyncMessage>>> listeners = new HashMap<>();
 
-    public void propagate(String messageId, AsyncMessage leftTuple) {
-        listeners.getOrDefault( messageId, Collections.emptyList() ).forEach( c -> c.accept( leftTuple ) );
-    }
-
     synchronized void registerReceiver(String messageId, Consumer<AsyncMessage> receiver) {
         listeners.computeIfAbsent( messageId, s -> new ArrayList<>() ).add( receiver );
     }
diff --git a/drools-core/src/main/java/org/drools/core/reteoo/BetaMemory.java b/drools-core/src/main/java/org/drools/core/reteoo/BetaMemory.java
index 9b37429..0bfd75e 100644
--- a/drools-core/src/main/java/org/drools/core/reteoo/BetaMemory.java
+++ b/drools-core/src/main/java/org/drools/core/reteoo/BetaMemory.java
@@ -20,6 +20,8 @@ import org.drools.core.common.InternalWorkingMemory;
 import org.drools.core.common.Memory;
 import org.drools.core.common.TupleSets;
 import org.drools.core.common.TupleSetsImpl;
+import org.drools.core.phreak.PhreakNotNode;
+import org.drools.core.phreak.RuleNetworkEvaluator;
 import org.drools.core.rule.ContextEntry;
 import org.drools.core.util.AbstractBaseLinkedListNode;
 
@@ -172,4 +174,61 @@ public class BetaMemory extends AbstractBaseLinkedListNode<Memory>
         stagedRightTuples.resetAll();
         counter = 0;
     }
+
+    public void doNode(NotNode notNode,
+                       LeftTupleSink sink,
+                       InternalWorkingMemory wm,
+                       TupleSets<LeftTuple> srcLeftTuples,
+                       TupleSets<LeftTuple> trgLeftTuples,
+                       TupleSets<LeftTuple> stagedLeftTuples, PhreakNotNode phreakNotNode) {
+
+        TupleSets<RightTuple> srcRightTuples = getStagedRightTuples().takeAll();
+
+        if (srcLeftTuples.getDeleteFirst() != null) {
+            // left deletes must come before right deletes. Otherwise right deletes could
+            // stage an insertion, that is later deleted in the rightDelete, causing potential problems
+            phreakNotNode.doLeftDeletes(this, srcLeftTuples, trgLeftTuples, stagedLeftTuples);
+        }
+
+
+        if (srcLeftTuples.getUpdateFirst() != null) {
+            // must happen before right inserts, so it can find left tuples to block.
+            RuleNetworkEvaluator.doUpdatesExistentialReorderLeftMemory(this,
+                                                                       srcLeftTuples);
+        }
+
+        if ( srcRightTuples.getUpdateFirst() != null) {
+            RuleNetworkEvaluator.doUpdatesExistentialReorderRightMemory(this,
+                                                                        notNode,
+                                                                        srcRightTuples); // this also preserves the next rightTuple
+        }
+
+        if (srcRightTuples.getInsertFirst() != null) {
+            // must come before right updates and inserts, as they might cause insert propagation, while this causes delete propagations, resulting in staging clash.
+            phreakNotNode.doRightInserts(notNode, this, wm, srcRightTuples, trgLeftTuples, stagedLeftTuples);
+        }
+
+
+
+        if (srcRightTuples.getUpdateFirst() != null) {
+            // must come after rightInserts and before rightDeletes, to avoid staging clash
+            phreakNotNode.doRightUpdates(notNode, sink, this, wm, srcRightTuples, trgLeftTuples, stagedLeftTuples);
+        }
+
+        if (srcRightTuples.getDeleteFirst() != null) {
+            // must come after rightUpdates, to avoid staging clash
+            phreakNotNode.doRightDeletes(notNode, sink, this, wm, srcRightTuples, trgLeftTuples);
+        }
+
+        if (srcLeftTuples.getUpdateFirst() != null) {
+            phreakNotNode.doLeftUpdates(notNode, sink, this, wm, srcLeftTuples, trgLeftTuples, stagedLeftTuples);
+        }
+
+        if (srcLeftTuples.getInsertFirst() != null) {
+            phreakNotNode.doLeftInserts(notNode, sink, this, wm, srcLeftTuples, trgLeftTuples);
+        }
+
+        srcRightTuples.resetAll();
+        srcLeftTuples.resetAll();
+    }
 }
diff --git a/drools-core/src/main/java/org/drools/core/reteoo/BetaNode.java b/drools-core/src/main/java/org/drools/core/reteoo/BetaNode.java
index 8b847bd..4174413 100644
--- a/drools-core/src/main/java/org/drools/core/reteoo/BetaNode.java
+++ b/drools-core/src/main/java/org/drools/core/reteoo/BetaNode.java
@@ -142,17 +142,11 @@ public abstract class BetaNode extends LeftTupleSource
 
         initMasks(context, leftInput);
 
-        setStreamMode( context.isStreamMode() && getObjectTypeNode(context).getObjectType().isEvent() );
+        setStreamMode( context.isStreamMode() && context.getObjectTypeNode(this).getObjectType().isEvent() );
 
         hashcode = calculateHashCode();
     }
 
-    private ObjectTypeNode getObjectTypeNode(BuildContext context) {
-        ObjectTypeNode otn = getObjectTypeNode();
-        // getObjectTypeNode() can return null if the BetaNode is in a subnetwork
-        return otn != null ? otn : context.getRootObjectTypeNode();
-    }
-
     @Override
     protected void initDeclaredMask(BuildContext context,
                                     LeftTupleSource leftInput) {
diff --git a/drools-core/src/main/java/org/drools/core/reteoo/ClassObjectTypeConf.java b/drools-core/src/main/java/org/drools/core/reteoo/ClassObjectTypeConf.java
index cec3efb..6535a44 100644
--- a/drools-core/src/main/java/org/drools/core/reteoo/ClassObjectTypeConf.java
+++ b/drools-core/src/main/java/org/drools/core/reteoo/ClassObjectTypeConf.java
@@ -101,9 +101,9 @@ public class ClassObjectTypeConf
 
         isTrait = determineTraitStatus();
 
-        this.objectType = kBase.getClassFieldAccessorCache().getClassObjectType( new ClassObjectType( clazz, isEvent ), false );
+        this.objectType = new ClassObjectType( clazz, isEvent ).getClassObjectType(false, kBase.getClassFieldAccessorCache());
 
-        this.concreteObjectTypeNode = kBase.getRete().getObjectTypeNodes( entryPoint ).get( objectType );
+        this.concreteObjectTypeNode = entryPoint.getObjectTypeNodes(kBase.getRete()).get( objectType );
 
         Traitable ttbl = cls.getAnnotation( Traitable.class );
         this.traitTmsEnabled = ttbl != null && ttbl.logical();
@@ -152,7 +152,7 @@ public class ClassObjectTypeConf
 
     public ObjectTypeNode getConcreteObjectTypeNode() {
         if (concreteObjectTypeNode == null) {
-            concreteObjectTypeNode = kBase.getRete().getObjectTypeNodes( entryPoint ).get( objectType );
+            concreteObjectTypeNode = entryPoint.getObjectTypeNodes(kBase.getRete()).get( objectType );
         }
         return concreteObjectTypeNode;
     }
@@ -193,7 +193,7 @@ public class ClassObjectTypeConf
     private ObjectTypeNode[] getMatchingObjectTypes(final Class<?> clazz) {
         final List<ObjectTypeNode> cache = new ArrayList<ObjectTypeNode>();
 
-        for ( ObjectTypeNode node : kBase.getRete().getObjectTypeNodes( this.entryPoint ).values() ) {
+        for ( ObjectTypeNode node : this.entryPoint.getObjectTypeNodes(kBase.getRete()).values() ) {
             if ( clazz == DroolsQuery.class ) {
                 // for query objects only add direct matches
                 if ( ((ClassObjectType)node.getObjectType()).getClassType() == clazz ) {
diff --git a/drools-core/src/main/java/org/drools/core/reteoo/CompositePartitionAwareObjectSinkAdapter.java b/drools-core/src/main/java/org/drools/core/reteoo/CompositePartitionAwareObjectSinkAdapter.java
index 49e91de..1f10372 100644
--- a/drools-core/src/main/java/org/drools/core/reteoo/CompositePartitionAwareObjectSinkAdapter.java
+++ b/drools-core/src/main/java/org/drools/core/reteoo/CompositePartitionAwareObjectSinkAdapter.java
@@ -206,10 +206,6 @@ public class CompositePartitionAwareObjectSinkAdapter implements ObjectSinkPropa
         throw new UnsupportedOperationException("propagateModifyObject has to be executed by partitions");
     }
 
-    public void propagateModifyObjectForPartition( InternalFactHandle handle, ModifyPreviousTuples modifyPreviousTuples, PropagationContext context, InternalWorkingMemory wm, int partition ) {
-        partitionedPropagators[partition].propagateModifyObject(handle, modifyPreviousTuples, context, wm);
-    }
-
     @Override
     public void byPassModifyToBetaNode( InternalFactHandle factHandle, ModifyPreviousTuples modifyPreviousTuples, PropagationContext context, InternalWorkingMemory workingMemory ) {
         throw new UnsupportedOperationException("This sink is only used for OTNs, it cannot be the sink for a beta");
diff --git a/drools-core/src/main/java/org/drools/core/reteoo/ConditionalBranchNode.java b/drools-core/src/main/java/org/drools/core/reteoo/ConditionalBranchNode.java
index 45b765b..f36f4f5 100644
--- a/drools-core/src/main/java/org/drools/core/reteoo/ConditionalBranchNode.java
+++ b/drools-core/src/main/java/org/drools/core/reteoo/ConditionalBranchNode.java
@@ -22,11 +22,9 @@ import java.io.ObjectOutput;
 import java.util.Collection;
 
 import org.drools.core.RuleBaseConfiguration;
-import org.drools.core.common.InternalFactHandle;
-import org.drools.core.common.InternalWorkingMemory;
-import org.drools.core.common.Memory;
-import org.drools.core.common.MemoryFactory;
-import org.drools.core.common.UpdateContext;
+import org.drools.core.common.*;
+import org.drools.core.phreak.PhreakBranchNode;
+import org.drools.core.phreak.RuleExecutor;
 import org.drools.core.reteoo.builder.BuildContext;
 import org.drools.core.spi.PropagationContext;
 import org.drools.core.util.AbstractBaseLinkedListNode;
@@ -208,6 +206,29 @@ public class ConditionalBranchNode extends LeftTupleSource implements LeftTupleS
         return new EvalNodeLeftTuple(leftTuple, rightTuple, currentLeftChild, currentRightChild, sink, leftTupleMemoryEnabled );
     }
 
+    public void doNode(ConditionalBranchMemory cbm,
+                       LeftTupleSink sink,
+                       InternalAgenda agenda,
+                       TupleSets<LeftTuple> srcLeftTuples,
+                       TupleSets<LeftTuple> trgLeftTuples,
+                       TupleSets<LeftTuple> stagedLeftTuples,
+                       RuleExecutor executor, PhreakBranchNode phreakBranchNode) {
+
+        if (srcLeftTuples.getDeleteFirst() != null) {
+            phreakBranchNode.doLeftDeletes(sink, agenda, srcLeftTuples, trgLeftTuples, stagedLeftTuples, executor);
+        }
+
+        if (srcLeftTuples.getUpdateFirst() != null) {
+            phreakBranchNode.doLeftUpdates(this, cbm, sink, agenda, srcLeftTuples, trgLeftTuples, stagedLeftTuples, executor);
+        }
+
+        if (srcLeftTuples.getInsertFirst() != null) {
+            phreakBranchNode.doLeftInserts(this, cbm, sink, agenda, srcLeftTuples, trgLeftTuples, executor);
+        }
+
+        srcLeftTuples.resetAll();
+    }
+
     public static class ConditionalBranchMemory extends AbstractBaseLinkedListNode<Memory>
             implements
             Externalizable,
diff --git a/drools-core/src/main/java/org/drools/core/reteoo/EvalConditionNode.java b/drools-core/src/main/java/org/drools/core/reteoo/EvalConditionNode.java
index 0b831ce..77b17a7 100644
--- a/drools-core/src/main/java/org/drools/core/reteoo/EvalConditionNode.java
+++ b/drools-core/src/main/java/org/drools/core/reteoo/EvalConditionNode.java
@@ -25,11 +25,8 @@ import java.util.HashMap;
 import java.util.Map;
 
 import org.drools.core.RuleBaseConfiguration;
-import org.drools.core.common.InternalFactHandle;
-import org.drools.core.common.InternalWorkingMemory;
-import org.drools.core.common.Memory;
-import org.drools.core.common.MemoryFactory;
-import org.drools.core.common.UpdateContext;
+import org.drools.core.common.*;
+import org.drools.core.phreak.PhreakEvalNode;
 import org.drools.core.reteoo.builder.BuildContext;
 import org.drools.core.rule.EvalCondition;
 import org.drools.core.spi.PropagationContext;
@@ -231,8 +228,30 @@ public class EvalConditionNode extends LeftTupleSource
                                      Sink sink,
                                      boolean leftTupleMemoryEnabled) {
         return new EvalNodeLeftTuple(leftTuple, rightTuple, currentLeftChild, currentRightChild, sink, leftTupleMemoryEnabled );        
-    }        
-    
+    }
+
+    public void doNode(EvalMemory em,
+                       LeftTupleSink sink,
+                       InternalWorkingMemory wm,
+                       TupleSets<LeftTuple> srcLeftTuples,
+                       TupleSets<LeftTuple> trgLeftTuples,
+                       TupleSets<LeftTuple> stagedLeftTuples, PhreakEvalNode phreakEvalNode) {
+
+        if (srcLeftTuples.getDeleteFirst() != null) {
+            phreakEvalNode.doLeftDeletes(srcLeftTuples, trgLeftTuples, stagedLeftTuples);
+        }
+
+        if (srcLeftTuples.getUpdateFirst() != null) {
+            phreakEvalNode.doLeftUpdates(this, em, sink, wm, srcLeftTuples, trgLeftTuples, stagedLeftTuples);
+        }
+
+        if (srcLeftTuples.getInsertFirst() != null) {
+            phreakEvalNode.doLeftInserts(this, em, sink, wm, srcLeftTuples, trgLeftTuples);
+        }
+
+        srcLeftTuples.resetAll();
+    }
+
     public static class EvalMemory extends AbstractBaseLinkedListNode<Memory>
         implements
         Externalizable,
diff --git a/drools-core/src/main/java/org/drools/core/reteoo/ExistsNode.java b/drools-core/src/main/java/org/drools/core/reteoo/ExistsNode.java
index 744d666..2f593d6 100644
--- a/drools-core/src/main/java/org/drools/core/reteoo/ExistsNode.java
+++ b/drools-core/src/main/java/org/drools/core/reteoo/ExistsNode.java
@@ -21,6 +21,9 @@ import java.util.Collection;
 import org.drools.core.common.BetaConstraints;
 import org.drools.core.common.InternalFactHandle;
 import org.drools.core.common.InternalWorkingMemory;
+import org.drools.core.common.TupleSets;
+import org.drools.core.phreak.PhreakExistsNode;
+import org.drools.core.phreak.RuleNetworkEvaluator;
 import org.drools.core.reteoo.builder.BuildContext;
 import org.drools.core.spi.PropagationContext;
 
@@ -136,4 +139,57 @@ public class ExistsNode extends BetaNode {
     public boolean isLeftUpdateOptimizationAllowed() {
         return getRawConstraints().isLeftUpdateOptimizationAllowed();
     }
+
+    public void doNode(LeftTupleSink sink,
+                       BetaMemory bm,
+                       InternalWorkingMemory wm,
+                       TupleSets<LeftTuple> srcLeftTuples,
+                       TupleSets<LeftTuple> trgLeftTuples,
+                       TupleSets<LeftTuple> stagedLeftTuples, PhreakExistsNode phreakExistsNode) {
+
+        TupleSets<RightTuple> srcRightTuples = bm.getStagedRightTuples().takeAll();
+
+        if (srcLeftTuples.getDeleteFirst() != null) {
+            phreakExistsNode.doLeftDeletes(bm, srcLeftTuples, trgLeftTuples, stagedLeftTuples);
+        }
+
+        if (srcLeftTuples.getUpdateFirst() != null )  {
+            RuleNetworkEvaluator.doUpdatesExistentialReorderLeftMemory(bm,
+                                                                       srcLeftTuples);
+        }
+
+        if ( srcRightTuples.getUpdateFirst() != null ) {
+            RuleNetworkEvaluator.doUpdatesExistentialReorderRightMemory(bm,
+                    this,
+                                                                        srcRightTuples); // this also preserves the next rightTuple
+        }
+
+        if (srcRightTuples.getInsertFirst() != null) {
+            // left deletes must come before right deletes. Otherwise right deletes could
+            // stage a deletion, that is later deleted in the rightDelete, causing potential problems
+            phreakExistsNode.doRightInserts(this, sink, bm, wm, srcRightTuples, trgLeftTuples);
+        }
+
+        if (srcRightTuples.getUpdateFirst() != null) {
+            // must come after rightInserts and before rightDeletes, to avoid staging clash
+            phreakExistsNode.doRightUpdates(this, sink, bm, wm, srcRightTuples, trgLeftTuples, stagedLeftTuples);
+        }
+
+        if (srcRightTuples.getDeleteFirst() != null) {
+            // must come after rightUpdetes, to avoid staging clash
+            phreakExistsNode.doRightDeletes(this, bm, wm, srcRightTuples, trgLeftTuples, stagedLeftTuples);
+        }
+
+
+        if (srcLeftTuples.getUpdateFirst() != null) {
+            phreakExistsNode.doLeftUpdates(this, sink, bm, wm, srcLeftTuples, trgLeftTuples, stagedLeftTuples);
+        }
+
+        if (srcLeftTuples.getInsertFirst() != null) {
+            phreakExistsNode.doLeftInserts(this, sink, bm, wm, srcLeftTuples, trgLeftTuples);
+        }
+
+        srcRightTuples.resetAll();
+        srcLeftTuples.resetAll();
+    }
 }
diff --git a/drools-core/src/main/java/org/drools/core/reteoo/FactTemplateTypeConf.java b/drools-core/src/main/java/org/drools/core/reteoo/FactTemplateTypeConf.java
index 40661b0..0a9660e 100644
--- a/drools-core/src/main/java/org/drools/core/reteoo/FactTemplateTypeConf.java
+++ b/drools-core/src/main/java/org/drools/core/reteoo/FactTemplateTypeConf.java
@@ -57,7 +57,7 @@ public class FactTemplateTypeConf
         this.factTemplate = factTemplate;
         this.entryPoint = entryPoint;
         this.objectType = new FactTemplateObjectType( factTemplate );
-        this.concreteObjectTypeNode = (ObjectTypeNode) kBase.getRete().getObjectTypeNodes( entryPoint ).get( objectType );
+        this.concreteObjectTypeNode = (ObjectTypeNode) entryPoint.getObjectTypeNodes(kBase.getRete()).get( objectType );
         this.cache = new ObjectTypeNode[]{this.concreteObjectTypeNode};
     }
 
@@ -80,7 +80,7 @@ public class FactTemplateTypeConf
 
     public ObjectTypeNode getConcreteObjectTypeNode() {
         if (concreteObjectTypeNode == null) {
-            concreteObjectTypeNode = kBase.getRete().getObjectTypeNodes( entryPoint ).get( objectType );
+            concreteObjectTypeNode = entryPoint.getObjectTypeNodes(kBase.getRete()).get( objectType );
         }
         return this.concreteObjectTypeNode;
     }
diff --git a/drools-core/src/main/java/org/drools/core/reteoo/JoinNode.java b/drools-core/src/main/java/org/drools/core/reteoo/JoinNode.java
index 096c322..ce2fd0f 100644
--- a/drools-core/src/main/java/org/drools/core/reteoo/JoinNode.java
+++ b/drools-core/src/main/java/org/drools/core/reteoo/JoinNode.java
@@ -21,6 +21,9 @@ import java.util.Collection;
 import org.drools.core.common.BetaConstraints;
 import org.drools.core.common.InternalFactHandle;
 import org.drools.core.common.InternalWorkingMemory;
+import org.drools.core.common.TupleSets;
+import org.drools.core.phreak.PhreakJoinNode;
+import org.drools.core.phreak.RuleNetworkEvaluator;
 import org.drools.core.reteoo.builder.BuildContext;
 import org.drools.core.spi.PropagationContext;
 
@@ -118,4 +121,49 @@ public class JoinNode extends BetaNode {
         }
         return false;
     }
+
+    public void doNode(LeftTupleSink sink,
+                       BetaMemory bm,
+                       InternalWorkingMemory wm,
+                       TupleSets<LeftTuple> srcLeftTuples,
+                       TupleSets<LeftTuple> trgLeftTuples,
+                       TupleSets<LeftTuple> stagedLeftTuples, PhreakJoinNode phreakJoinNode) {
+
+        TupleSets<RightTuple> srcRightTuples = bm.getStagedRightTuples().takeAll();
+
+        if (srcRightTuples.getDeleteFirst() != null) {
+            phreakJoinNode.doRightDeletes(bm, srcRightTuples, trgLeftTuples, stagedLeftTuples);
+        }
+
+        if (srcLeftTuples.getDeleteFirst() != null) {
+            phreakJoinNode.doLeftDeletes(bm, srcLeftTuples, trgLeftTuples, stagedLeftTuples);
+        }
+
+        if (srcRightTuples.getUpdateFirst() != null) {
+            RuleNetworkEvaluator.doUpdatesReorderRightMemory(bm, srcRightTuples);
+        }
+
+        if (srcLeftTuples.getUpdateFirst() != null ) {
+            RuleNetworkEvaluator.doUpdatesReorderLeftMemory(bm, srcLeftTuples);
+        }
+
+        if (srcRightTuples.getUpdateFirst() != null) {
+            phreakJoinNode.doRightUpdates(this, sink, bm, wm, srcRightTuples, trgLeftTuples, stagedLeftTuples);
+        }
+
+        if (srcLeftTuples.getUpdateFirst() != null ) {
+            phreakJoinNode.doLeftUpdates(this, sink, bm, wm, srcLeftTuples, trgLeftTuples, stagedLeftTuples);
+        }
+
+        if (srcRightTuples.getInsertFirst() != null) {
+            phreakJoinNode.doRightInserts(this, sink, bm, wm, srcRightTuples, trgLeftTuples);
+        }
+
+        if (srcLeftTuples.getInsertFirst() != null) {
+            phreakJoinNode.doLeftInserts(this, sink, bm, wm, srcLeftTuples, trgLeftTuples);
+        }
+
+        srcRightTuples.resetAll();
+        srcLeftTuples.resetAll();
+    }
 }
diff --git a/drools-core/src/main/java/org/drools/core/reteoo/ModifyPreviousTuples.java b/drools-core/src/main/java/org/drools/core/reteoo/ModifyPreviousTuples.java
index f3eb967..b4ed7a6 100644
--- a/drools-core/src/main/java/org/drools/core/reteoo/ModifyPreviousTuples.java
+++ b/drools-core/src/main/java/org/drools/core/reteoo/ModifyPreviousTuples.java
@@ -77,4 +77,8 @@ public class ModifyPreviousTuples {
         rightTuple.setPropagationContext( pctx );
         rightTuple.retractTuple( pctx, wm );
     }
+
+    public void propagateModifyObjectForPartition(InternalFactHandle handle, PropagationContext context, InternalWorkingMemory wm, int partition, CompositePartitionAwareObjectSinkAdapter compositePartitionAwareObjectSinkAdapter) {
+        compositePartitionAwareObjectSinkAdapter.getPartitionedPropagators()[partition].propagateModifyObject(handle, this, context, wm);
+    }
 }
diff --git a/drools-core/src/main/java/org/drools/core/reteoo/ObjectTypeNode.java b/drools-core/src/main/java/org/drools/core/reteoo/ObjectTypeNode.java
index 0ce5cd3..ca13cab 100644
--- a/drools-core/src/main/java/org/drools/core/reteoo/ObjectTypeNode.java
+++ b/drools-core/src/main/java/org/drools/core/reteoo/ObjectTypeNode.java
@@ -219,7 +219,7 @@ public class ObjectTypeNode extends ObjectSource
         // this is here as not all objectTypeNodes used ClassObjectTypes in packages (i.e. rules with those nodes did not exist yet)
         // and thus have no wiring targets
         if (objectType instanceof ClassObjectType) {
-            objectType = ((DroolsObjectInputStream) in).getKnowledgeBase().getClassFieldAccessorCache().getClassObjectType((ClassObjectType) objectType, true);
+            objectType = ((ClassObjectType) objectType).getClassObjectType(true, ((DroolsObjectInputStream) in).getKnowledgeBase().getClassFieldAccessorCache());
         }
 
         objectMemoryEnabled = in.readBoolean();
diff --git a/drools-core/src/main/java/org/drools/core/reteoo/PathMemory.java b/drools-core/src/main/java/org/drools/core/reteoo/PathMemory.java
index 0b3cbc3..abf7d3e 100644
--- a/drools-core/src/main/java/org/drools/core/reteoo/PathMemory.java
+++ b/drools-core/src/main/java/org/drools/core/reteoo/PathMemory.java
@@ -15,15 +15,14 @@
 
 package org.drools.core.reteoo;
 
-import org.drools.core.common.ActivationsFilter;
-import org.drools.core.common.CompositeDefaultAgenda;
-import org.drools.core.common.InternalAgenda;
-import org.drools.core.common.InternalAgendaGroup;
-import org.drools.core.common.InternalWorkingMemory;
-import org.drools.core.common.Memory;
+import org.drools.core.common.*;
 import org.drools.core.definitions.rule.impl.RuleImpl;
 import org.drools.core.phreak.RuleAgendaItem;
+import org.drools.core.phreak.RuleExecutor;
+import org.drools.core.phreak.RuleNetworkEvaluator;
+import org.drools.core.phreak.StackEntry;
 import org.drools.core.util.AbstractBaseLinkedListNode;
+import org.drools.core.util.LinkedList;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -238,4 +237,26 @@ public class PathMemory extends AbstractBaseLinkedListNode<Memory>
                ( (CompositeDefaultAgenda) agenda ).getPartitionedAgendaForNode( getPathEndNode() ) :
                agenda;
     }
+
+    public void outerEval(NetworkNode node,
+                          long bit,
+                          Memory nodeMem,
+                          SegmentMemory[] smems,
+                          int smemIndex,
+                          TupleSets<LeftTuple> trgTuples,
+                          InternalAgenda agenda,
+                          LinkedList<StackEntry> stack,
+                          boolean processRian,
+                          RuleExecutor executor, RuleNetworkEvaluator ruleNetworkEvaluator) {
+        ruleNetworkEvaluator.innerEval(this, node, bit, nodeMem, smems, smemIndex, trgTuples, agenda, stack, processRian, executor);
+        while (true) {
+            // eval
+            if (!stack.isEmpty()) {
+                StackEntry entry = stack.removeLast();
+                ruleNetworkEvaluator.evalStackEntry(entry, stack, executor, agenda);
+            } else {
+                return; // stack is empty return;
+            }
+        }
+    }
 }
diff --git a/drools-core/src/main/java/org/drools/core/reteoo/QueryTerminalNode.java b/drools-core/src/main/java/org/drools/core/reteoo/QueryTerminalNode.java
index b49fa45..3273ceb 100644
--- a/drools-core/src/main/java/org/drools/core/reteoo/QueryTerminalNode.java
+++ b/drools-core/src/main/java/org/drools/core/reteoo/QueryTerminalNode.java
@@ -21,13 +21,18 @@ import java.io.ObjectInput;
 import java.io.ObjectOutput;
 import java.util.Map;
 
+import org.drools.core.common.InternalAgenda;
 import org.drools.core.common.InternalFactHandle;
+import org.drools.core.common.TupleSets;
 import org.drools.core.definitions.rule.impl.RuleImpl;
+import org.drools.core.phreak.PhreakQueryTerminalNode;
+import org.drools.core.phreak.StackEntry;
 import org.drools.core.reteoo.builder.BuildContext;
 import org.drools.core.rule.Declaration;
 import org.drools.core.rule.GroupElement;
 import org.drools.core.rule.QueryImpl;
 import org.drools.core.spi.PropagationContext;
+import org.drools.core.util.LinkedList;
 
 /**
  * Leaf Rete-OO node responsible for enacting <code>Action</code> s on a
@@ -272,4 +277,22 @@ public class QueryTerminalNode extends AbstractTerminalNode implements LeftTuple
         getLeftTupleSource().addTupleSink( this, context );
         addAssociation( context, context.getRule() );
     }
+
+    public void doNode(InternalAgenda agenda,
+                       TupleSets<LeftTuple> srcLeftTuples,
+                       LinkedList<StackEntry> stack, PhreakQueryTerminalNode phreakQueryTerminalNode) {
+        if (srcLeftTuples.getDeleteFirst() != null) {
+            phreakQueryTerminalNode.doLeftDeletes(this, agenda, srcLeftTuples, stack);
+        }
+
+        if (srcLeftTuples.getUpdateFirst() != null) {
+            phreakQueryTerminalNode.doLeftUpdates(this, agenda, srcLeftTuples, stack);
+        }
+
+        if (srcLeftTuples.getInsertFirst() != null) {
+            phreakQueryTerminalNode.doLeftInserts(this, agenda, srcLeftTuples, stack);
+        }
+
+        srcLeftTuples.resetAll();
+    }
 }
diff --git a/drools-core/src/main/java/org/drools/core/reteoo/Rete.java b/drools-core/src/main/java/org/drools/core/reteoo/Rete.java
index 1f1bfe1..33f6ee3 100644
--- a/drools-core/src/main/java/org/drools/core/reteoo/Rete.java
+++ b/drools-core/src/main/java/org/drools/core/reteoo/Rete.java
@@ -20,7 +20,6 @@ import java.io.Externalizable;
 import java.io.IOException;
 import java.io.ObjectInput;
 import java.io.ObjectOutput;
-import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.LinkedList;
@@ -36,7 +35,6 @@ import org.drools.core.common.UpdateContext;
 import org.drools.core.impl.InternalKnowledgeBase;
 import org.drools.core.reteoo.builder.BuildContext;
 import org.drools.core.rule.EntryPointId;
-import org.drools.core.spi.ObjectType;
 import org.drools.core.spi.PropagationContext;
 import org.drools.core.util.bitmask.BitMask;
 
@@ -191,10 +189,6 @@ public class Rete extends ObjectSource
         return allNodes;
     }
 
-    public Map<ObjectType, ObjectTypeNode> getObjectTypeNodes(EntryPointId entryPoint) {
-        return this.entryPoints.get( entryPoint ).getObjectTypeNodes();
-    }
-
     @Override
     public InternalKnowledgeBase getKnowledgeBase() {
         return this.kBase;
diff --git a/drools-core/src/main/java/org/drools/core/reteoo/RuleTerminalNode.java b/drools-core/src/main/java/org/drools/core/reteoo/RuleTerminalNode.java
index 9aa9b6b..d5d4e9a 100644
--- a/drools-core/src/main/java/org/drools/core/reteoo/RuleTerminalNode.java
+++ b/drools-core/src/main/java/org/drools/core/reteoo/RuleTerminalNode.java
@@ -28,6 +28,7 @@ import org.drools.core.base.mvel.MVELEnabledExpression;
 import org.drools.core.base.mvel.MVELSalienceExpression;
 import org.drools.core.common.AgendaItem;
 import org.drools.core.common.InternalFactHandle;
+import org.drools.core.common.InternalWorkingMemory;
 import org.drools.core.common.InternalWorkingMemoryActions;
 import org.drools.core.definitions.rule.impl.RuleImpl;
 import org.drools.core.phreak.PhreakRuleTerminalNode;
@@ -35,8 +36,10 @@ import org.drools.core.phreak.RuleExecutor;
 import org.drools.core.reteoo.builder.BuildContext;
 import org.drools.core.rule.Declaration;
 import org.drools.core.rule.GroupElement;
+import org.drools.core.spi.Activation;
 import org.drools.core.spi.PropagationContext;
 import org.drools.core.spi.Tuple;
+import org.kie.api.runtime.rule.AgendaFilter;
 
 /**
  * Leaf Rete-OO node responsible for enacting <code>Action</code> s on a
@@ -264,6 +267,27 @@ public class RuleTerminalNode extends AbstractTerminalNode {
         }
     }
 
+    public boolean cancelAndContinue(InternalWorkingMemory wm,
+                                     RuleImpl rule,
+                                     Tuple leftTuple,
+                                     AgendaFilter filter, RuleExecutor ruleExecutor) {
+        // NB. stopped setting the LT.object to Boolean.TRUE, that Reteoo did.
+        if ( !rule.isEffective(leftTuple, this, wm) ) {
+            return true;
+        }
+
+        if (rule.getCalendars() != null) {
+            long timestamp = wm.getSessionClock().getCurrentTime();
+            for (String cal : rule.getCalendars()) {
+                if (!wm.getCalendars().get(cal).isTimeIncluded(timestamp)) {
+                    return true;
+                }
+            }
+        }
+
+        return filter != null && !filter.accept((Activation) leftTuple);
+    }
+
 
     public static class SortDeclarations
             implements
diff --git a/drools-core/src/main/java/org/drools/core/reteoo/TimerNode.java b/drools-core/src/main/java/org/drools/core/reteoo/TimerNode.java
index bba346f..cd63ae4 100644
--- a/drools-core/src/main/java/org/drools/core/reteoo/TimerNode.java
+++ b/drools-core/src/main/java/org/drools/core/reteoo/TimerNode.java
@@ -28,13 +28,17 @@ import org.drools.core.common.InternalWorkingMemory;
 import org.drools.core.common.Memory;
 import org.drools.core.common.MemoryFactory;
 import org.drools.core.common.UpdateContext;
+import org.drools.core.phreak.PhreakTimerNode;
 import org.drools.core.reteoo.builder.BuildContext;
 import org.drools.core.rule.Declaration;
 import org.drools.core.rule.Pattern;
 import org.drools.core.spi.PropagationContext;
+import org.drools.core.time.Trigger;
+import org.drools.core.time.impl.DefaultJobHandle;
 import org.drools.core.time.impl.Timer;
 import org.drools.core.util.AbstractBaseLinkedListNode;
 import org.drools.core.util.index.TupleList;
+import org.kie.api.runtime.Calendars;
 
 public class TimerNode extends LeftTupleSource
         implements
@@ -272,6 +276,17 @@ public class TimerNode extends LeftTupleSource
         return leftInput.getObjectTypeNode();
     }
 
+    public Trigger createTrigger(final InternalWorkingMemory wm,
+                                 final Timer timer,
+                                 final long timestamp,
+                                 final String[] calendarNames,
+                                 final Calendars calendars,
+                                 final LeftTuple leftTuple, PhreakTimerNode phreakTimerNode) {
+        Object obj = leftTuple.getContextObject();
+        DefaultJobHandle jobHandle = obj instanceof DefaultJobHandle ? (DefaultJobHandle) obj : null;
+        return timer.createTrigger( timestamp, leftTuple, jobHandle, calendarNames, calendars, getDeclarations(), wm );
+    }
+
     public static class TimerNodeMemory extends AbstractBaseLinkedListNode<Memory>
             implements
             SegmentNodeMemory {
diff --git a/drools-core/src/main/java/org/drools/core/reteoo/TraitObjectTypeNode.java b/drools-core/src/main/java/org/drools/core/reteoo/TraitObjectTypeNode.java
index 66eb5b3..bfc6e3c 100644
--- a/drools-core/src/main/java/org/drools/core/reteoo/TraitObjectTypeNode.java
+++ b/drools-core/src/main/java/org/drools/core/reteoo/TraitObjectTypeNode.java
@@ -20,15 +20,11 @@ import java.io.IOException;
 import java.io.ObjectInput;
 import java.io.ObjectOutput;
 import java.util.BitSet;
-import java.util.Collection;
 
 import org.drools.core.base.ClassObjectType;
 import org.drools.core.common.InternalFactHandle;
 import org.drools.core.common.InternalWorkingMemory;
-import org.drools.core.factmodel.traits.Thing;
 import org.drools.core.factmodel.traits.TraitProxy;
-import org.drools.core.factmodel.traits.TraitType;
-import org.drools.core.factmodel.traits.TraitTypeMap;
 import org.drools.core.reteoo.builder.BuildContext;
 import org.drools.core.spi.ObjectType;
 import org.drools.core.spi.PropagationContext;
@@ -75,7 +71,7 @@ public class TraitObjectTypeNode extends ObjectTypeNode {
                                && ! typeMask.isEmpty()
                                && HierarchyEncoderImpl.supersetOrEqualset( vetoMask, this.typeMask ) );
 
-            boolean allowed = ! vetoed || sameAndNotCoveredByDescendants( (TraitProxy) factHandle.getObject(), typeMask );
+            boolean allowed = ! vetoed || ((TraitProxy) factHandle.getObject()).sameAndNotCoveredByDescendants(typeMask, this);
             if ( allowed ) {
                 //System.err.println(" INSERT PASS !! " + factHandle.getObject() + " " + ( (TraitProxy) factHandle.getObject() )._getTypeCode() + " >> " + vetoMask + " checks in " + typeMask );
                 proxy.assignOtn( this.typeMask );
@@ -87,36 +83,6 @@ public class TraitObjectTypeNode extends ObjectTypeNode {
         return true;
     }
 
-    /**
-     *  Edge case: due to the way traits are encoded, consider this hierarchy:
-     *  A    B
-     *    C
-     *    D
-     *  On don/insertion of C, C may be vetoed by its parents, but might have been
-     *  already covered by one of its descendants (D)
-     */
-    private boolean sameAndNotCoveredByDescendants( TraitProxy proxy, BitSet typeMask ) {
-        boolean isSameType = typeMask.equals( proxy._getTypeCode() );
-        if ( isSameType ) {
-            TraitTypeMap<String,Thing<?>,?> ttm = (TraitTypeMap<String,Thing<?>,?>) proxy.getObject()._getTraitMap();
-            Collection<Thing<?>> descs = ttm.lowerDescendants( typeMask );
-            // we have to exclude the "mock" bottom proxy
-            if ( descs == null || descs.isEmpty() ) {
-                return true;
-            } else {
-                for ( Thing sub : descs ) {
-                    TraitType tt = (TraitType) sub;
-                    if ( tt != proxy && tt._hasTypeCode( typeMask ) ) {
-                        return false;
-                    }
-                }
-                return true;
-            }
-        } else {
-            return false;
-        }
-    }
-
     private boolean isModifyAllowed( InternalFactHandle factHandle ) {
         if ( factHandle.isTraiting() ) {
             TraitProxy proxy = ( (TraitProxy) factHandle.getObject() );
diff --git a/drools-core/src/main/java/org/drools/core/reteoo/WindowTuple.java b/drools-core/src/main/java/org/drools/core/reteoo/WindowTuple.java
index cd00c96..9c3a11d 100644
--- a/drools-core/src/main/java/org/drools/core/reteoo/WindowTuple.java
+++ b/drools-core/src/main/java/org/drools/core/reteoo/WindowTuple.java
@@ -65,4 +65,17 @@ public class WindowTuple extends RightTupleImpl {
         this.windowNext = windowNext;
     }
 
+    public void addFirstWindowTuple(WindowTupleList windowTupleList) {
+        WindowTuple previousFirst = windowTupleList.firstWindowTuple;
+        windowTupleList.firstWindowTuple = this;
+        if ( previousFirst == null ) {
+            setWindowPrevious( null );
+            setWindowNext( null );
+            windowTupleList.lastWindowTuple = this;
+        } else {
+            setWindowPrevious( null );
+            setWindowNext( previousFirst );
+            previousFirst.setWindowPrevious(this);
+        }
+    }
 }
diff --git a/drools-core/src/main/java/org/drools/core/reteoo/WindowTupleList.java b/drools-core/src/main/java/org/drools/core/reteoo/WindowTupleList.java
index b3bfdd9..27c5719 100644
--- a/drools-core/src/main/java/org/drools/core/reteoo/WindowTupleList.java
+++ b/drools-core/src/main/java/org/drools/core/reteoo/WindowTupleList.java
@@ -76,20 +76,6 @@ public class WindowTupleList {
         this.listNext = listNext;
     }
 
-    public void addFirstWindowTuple( WindowTuple windowTuple ) {
-        WindowTuple previousFirst = firstWindowTuple;
-        firstWindowTuple = windowTuple;
-        if ( previousFirst == null ) {
-            windowTuple.setWindowPrevious( null );
-            windowTuple.setWindowNext( null );
-            lastWindowTuple = windowTuple;
-        } else {
-            windowTuple.setWindowPrevious( null );
-            windowTuple.setWindowNext( previousFirst );
-            previousFirst.setWindowPrevious( windowTuple );
-        }
-    }
-
     public void addLastWindowTuple( WindowTuple windowTuple ) {
         WindowTuple previousLast = lastWindowTuple;
         lastWindowTuple = windowTuple;
diff --git a/drools-core/src/main/java/org/drools/core/reteoo/builder/BuildContext.java b/drools-core/src/main/java/org/drools/core/reteoo/builder/BuildContext.java
index ee446b3..7a29f42 100755
--- a/drools-core/src/main/java/org/drools/core/reteoo/builder/BuildContext.java
+++ b/drools-core/src/main/java/org/drools/core/reteoo/builder/BuildContext.java
@@ -29,11 +29,7 @@ import org.drools.core.common.NetworkNode;
 import org.drools.core.common.RuleBasePartitionId;
 import org.drools.core.definitions.rule.impl.RuleImpl;
 import org.drools.core.impl.InternalKnowledgeBase;
-import org.drools.core.reteoo.KieComponentFactory;
-import org.drools.core.reteoo.LeftTupleSource;
-import org.drools.core.reteoo.ObjectSource;
-import org.drools.core.reteoo.ObjectTypeNode;
-import org.drools.core.reteoo.PathEndNode;
+import org.drools.core.reteoo.*;
 import org.drools.core.rule.EntryPointId;
 import org.drools.core.rule.GroupElement;
 import org.drools.core.rule.Pattern;
@@ -506,4 +502,10 @@ public class BuildContext {
     public void setConsequenceName( String consequenceName ) {
         this.consequenceName = consequenceName;
     }
+
+    public ObjectTypeNode getObjectTypeNode(BetaNode betaNode) {
+        ObjectTypeNode otn = betaNode.getObjectTypeNode();
+        // getObjectTypeNode() can return null if the BetaNode is in a subnetwork
+        return otn != null ? otn : getRootObjectTypeNode();
+    }
 }
diff --git a/drools-core/src/main/java/org/drools/core/reteoo/builder/BuildUtils.java b/drools-core/src/main/java/org/drools/core/reteoo/builder/BuildUtils.java
index d548a52..81c5c0f 100755
--- a/drools-core/src/main/java/org/drools/core/reteoo/builder/BuildUtils.java
+++ b/drools-core/src/main/java/org/drools/core/reteoo/builder/BuildUtils.java
@@ -32,8 +32,6 @@ import org.drools.core.common.RuleBasePartitionId;
 import org.drools.core.common.SingleBetaConstraints;
 import org.drools.core.common.TripleBetaConstraints;
 import org.drools.core.definitions.rule.impl.RuleImpl;
-import org.drools.core.reteoo.AlphaNode;
-import org.drools.core.reteoo.BetaNode;
 import org.drools.core.reteoo.EntryPointNode;
 import org.drools.core.reteoo.NodeTypeEnums;
 import org.drools.core.reteoo.ObjectTypeNode;
@@ -44,8 +42,6 @@ import org.drools.core.rule.IntervalProviderConstraint;
 import org.drools.core.rule.InvalidPatternException;
 import org.drools.core.rule.Pattern;
 import org.drools.core.rule.RuleConditionElement;
-import org.drools.core.rule.constraint.MvelConstraint;
-import org.drools.core.spi.AlphaNodeFieldConstraint;
 import org.drools.core.spi.BetaNodeFieldConstraint;
 import org.drools.core.spi.ObjectType;
 import org.drools.core.time.Interval;
@@ -103,7 +99,7 @@ public class BuildUtils {
             partition = RuleBasePartitionId.MAIN_PARTITION;
         } else if ( candidate.getType() == NodeTypeEnums.ObjectTypeNode ) {
             // object type nodes are always shared
-            Map<ObjectType, ObjectTypeNode> map = context.getKnowledgeBase().getRete().getObjectTypeNodes( context.getCurrentEntryPoint() );
+            Map<ObjectType, ObjectTypeNode> map = context.getCurrentEntryPoint().getObjectTypeNodes(context.getKnowledgeBase().getRete());
             if ( map != null ) {
                 ObjectTypeNode otn = map.get( ((ObjectTypeNode) candidate).getObjectType() );
                 if ( otn != null ) {
@@ -149,7 +145,7 @@ public class BuildUtils {
             context.getNodes().add( node );
         } else {
             // shared node found
-            mergeNodes(node, candidate);
+            node.mergeNodes(candidate, this);
             // undo previous id assignment
             context.releaseId( candidate );
             if ( partition == null && context.getPartitionId() == null ) {
@@ -162,23 +158,6 @@ public class BuildUtils {
         return (T)node;
     }
 
-    private void mergeNodes(BaseNode node, BaseNode duplicate) {
-        if (node instanceof AlphaNode) {
-            AlphaNodeFieldConstraint alphaConstraint = ((AlphaNode) node).getConstraint();
-            if (alphaConstraint instanceof MvelConstraint) {
-                ((MvelConstraint)alphaConstraint).addPackageNames(((MvelConstraint)((AlphaNode) duplicate).getConstraint()).getPackageNames());
-            }
-        } else if (node instanceof BetaNode) {
-            BetaNodeFieldConstraint[] betaConstraints = ((BetaNode) node).getConstraints();
-            int i = 0;
-            for (BetaNodeFieldConstraint betaConstraint : betaConstraints) {
-                if (betaConstraint instanceof MvelConstraint) {
-                    ((MvelConstraint) betaConstraint).addPackageNames(((MvelConstraint) ((BetaNode) duplicate).getConstraints()[i++]).getPackageNames());
-                }
-            }
-        }
-    }
-
     /**
      * Utility function to check if sharing is enabled for nodes of the given class
      */
diff --git a/drools-core/src/main/java/org/drools/core/reteoo/compiled/ObjectTypeNodeParser.java b/drools-core/src/main/java/org/drools/core/reteoo/compiled/ObjectTypeNodeParser.java
index 0d1a812..2d191f6 100644
--- a/drools-core/src/main/java/org/drools/core/reteoo/compiled/ObjectTypeNodeParser.java
+++ b/drools-core/src/main/java/org/drools/core/reteoo/compiled/ObjectTypeNodeParser.java
@@ -123,7 +123,7 @@ public class ObjectTypeNodeParser {
     private IndexableConstraint traverseHashedAlphaNodes(ObjectHashMap hashedAlphaNodes, NetworkHandler handler) {
         IndexableConstraint hashedFieldReader = null;
         if (hashedAlphaNodes != null && hashedAlphaNodes.size() > 0) {
-            AlphaNode firstAlpha = getFirstAlphaNode(hashedAlphaNodes);
+            AlphaNode firstAlpha = hashedAlphaNodes.getFirstAlphaNode(this);
             hashedFieldReader = getClassFieldReaderForHashedAlpha(firstAlpha);
 
             // start the hashed alphas
@@ -189,28 +189,6 @@ public class ObjectTypeNodeParser {
     }
 
     /**
-     * Returns the first {@link org.kie.reteoo.AlphaNode} from the specified {@link ObjectHashMap}.
-     *
-     * @param hashedAlphaNodes map of hashed AlphaNodes
-     * @return first alpha from the specified map
-     * @throws IllegalArgumentException thrown if the map doesn't contain any alpha nodes
-     */
-    private AlphaNode getFirstAlphaNode(final ObjectHashMap hashedAlphaNodes) throws IllegalArgumentException {
-        AlphaNode firstAlphaNode;
-
-        final Iterator iter = hashedAlphaNodes.iterator();
-        final ObjectHashMap.ObjectEntry entry = (ObjectHashMap.ObjectEntry) iter.next();
-
-        if (entry != null) {
-            firstAlphaNode = (AlphaNode) entry.getValue();
-        } else {
-            throw new IllegalArgumentException("ObjectHashMap does not contain any hashed AlphaNodes!");
-        }
-
-        return firstAlphaNode;
-    }
-
-    /**
      * Returns the {@link ClassFieldReader} for the hashed AlphaNode. The AlphaNode's constraint has to be a
      * MvelConstraint. This is the only type of hashed alpha currently supported.
      *
diff --git a/drools-core/src/main/java/org/drools/core/rule/Declaration.java b/drools-core/src/main/java/org/drools/core/rule/Declaration.java
index 591a5d4..ac8db45 100644
--- a/drools-core/src/main/java/org/drools/core/rule/Declaration.java
+++ b/drools-core/src/main/java/org/drools/core/rule/Declaration.java
@@ -23,6 +23,7 @@ import java.lang.reflect.Method;
 
 import org.drools.core.base.ClassFieldReader;
 import org.drools.core.base.ValueType;
+import org.drools.core.base.mvel.MVELCompilationUnit;
 import org.drools.core.common.DroolsObjectInputStream;
 import org.drools.core.common.InternalWorkingMemory;
 import org.drools.core.spi.AcceptsReadAccessor;
@@ -357,4 +358,21 @@ public class Declaration
                                              getIdentifier(),
                                              isInternalFact()) );
     }
+
+    public void replaceDeclaration(Declaration resolved, MVELCompilationUnit mvelCompilationUnit) {
+        if ( mvelCompilationUnit.getPreviousDeclarations() != null ) {
+            for (int i = 0; i < mvelCompilationUnit.getPreviousDeclarations().length; i++ ) {
+                if ( mvelCompilationUnit.getPreviousDeclarations()[i].equals(this) ) {
+                    mvelCompilationUnit.getPreviousDeclarations()[i] = resolved;
+                }
+            }
+        }
+        if ( mvelCompilationUnit.getLocalDeclarations() != null ) {
+            for (int i = 0; i < mvelCompilationUnit.getLocalDeclarations().length; i++ ) {
+                if ( mvelCompilationUnit.getLocalDeclarations()[i].equals(this) ) {
+                    mvelCompilationUnit.getLocalDeclarations()[i] = resolved;
+                }
+            }
+        }
+    }
 }
diff --git a/drools-core/src/main/java/org/drools/core/rule/EntryPointId.java b/drools-core/src/main/java/org/drools/core/rule/EntryPointId.java
index 002e82a..40e6d57 100644
--- a/drools-core/src/main/java/org/drools/core/rule/EntryPointId.java
+++ b/drools-core/src/main/java/org/drools/core/rule/EntryPointId.java
@@ -16,6 +16,10 @@
 
 package org.drools.core.rule;
 
+import org.drools.core.reteoo.ObjectTypeNode;
+import org.drools.core.reteoo.Rete;
+import org.drools.core.spi.ObjectType;
+
 import java.io.Externalizable;
 import java.io.IOException;
 import java.io.ObjectInput;
@@ -148,4 +152,8 @@ public class EntryPointId extends ConditionalElement
     public boolean requiresLeftActivation() {
         return false;
     }
+
+    public Map<ObjectType, ObjectTypeNode> getObjectTypeNodes(Rete rete) {
+        return rete.getEntryPointNodes().get(this).getObjectTypeNodes();
+    }
 }
diff --git a/drools-core/src/main/java/org/drools/core/rule/GroupElement.java b/drools-core/src/main/java/org/drools/core/rule/GroupElement.java
index f1126bc..f28f066 100644
--- a/drools-core/src/main/java/org/drools/core/rule/GroupElement.java
+++ b/drools-core/src/main/java/org/drools/core/rule/GroupElement.java
@@ -353,8 +353,23 @@ public class GroupElement extends ConditionalElement
             }
         }
         return false;
-    }    
-    
+    }
+
+    public GroupElement[] splitOr(LogicTransformer logicTransformer) {
+        GroupElement[] ands = new GroupElement[getChildren().size()];
+        int i = 0;
+        for ( final RuleConditionElement branch : getChildren() ) {
+            if ( ( branch instanceof GroupElement ) && ( ( (GroupElement) branch ).isAnd() ) ) {
+                ands[i++] = (GroupElement) branch;
+            } else {
+                ands[i] = GroupElementFactory.newAndInstance();
+                ands[i].addChild( branch );
+                i++;
+            }
+        }
+        return ands;
+    }
+
 
     /**
      * A public enum for CE types
diff --git a/drools-core/src/main/java/org/drools/core/rule/JavaDialectRuntimeData.java b/drools-core/src/main/java/org/drools/core/rule/JavaDialectRuntimeData.java
index 49ff687..b626930 100644
--- a/drools-core/src/main/java/org/drools/core/rule/JavaDialectRuntimeData.java
+++ b/drools-core/src/main/java/org/drools/core/rule/JavaDialectRuntimeData.java
@@ -121,9 +121,8 @@ public class JavaDialectRuntimeData
         byte[] buff = bos.toByteArray();
         stream.writeObject( buff );
         if (helper.isSigned()) {
-            sign( stream,
-                  helper,
-                  buff );
+            helper.sign( stream,
+                    buff, this);
         }
 
         stream.writeInt( this.invokerLookups.size() );
@@ -140,17 +139,6 @@ public class JavaDialectRuntimeData
 
     }
 
-    private void sign( final ObjectOutput stream,
-            KeyStoreHelper helper,
-            byte[] buff ) {
-        try {
-            stream.writeObject( helper.signDataWithPrivateKey( buff ) );
-        } catch (Exception e) {
-            throw new RuntimeException( "Error signing object store: " + e.getMessage(),
-                                        e );
-        }
-    }
-
     /**
      * Handles the read serialization of the PackageCompilationData. Patterns in Rules may reference generated data which cannot be serialized by
      * default methods. The PackageCompilationData holds a reference to the generated bytecode; which must be restored before any Rules.
diff --git a/drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java b/drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java
index a5e2227..47e23d9 100644
--- a/drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java
+++ b/drools-core/src/main/java/org/drools/core/rule/LogicTransformer.java
@@ -83,7 +83,7 @@ public class LogicTransformer {
             ands = new GroupElement[]{cloned};
         } else if ( cloned.isOr() ) {
             // it is an OR, so each child is an AND branch
-            ands = splitOr( cloned );
+            ands = cloned.splitOr(this);
         } else {
             // no, so just wrap into an AND
             final GroupElement wrapper = GroupElementFactory.newAndInstance();
@@ -124,21 +124,6 @@ public class LogicTransformer {
         return result.toArray(new GroupElement[result.size()]);
     }
 
-    protected GroupElement[] splitOr( final GroupElement cloned ) {
-        GroupElement[] ands = new GroupElement[cloned.getChildren().size()];
-        int i = 0;
-        for ( final RuleConditionElement branch : cloned.getChildren() ) {
-            if ( ( branch instanceof GroupElement ) && ( ( (GroupElement) branch ).isAnd() ) ) {
-                ands[i++] = (GroupElement) branch;
-            } else {
-                ands[i] = GroupElementFactory.newAndInstance();
-                ands[i].addChild( branch );
-                i++;
-            }
-        }
-        return ands;
-    }
-
     /**
      * During the logic transformation, we eventually clone CEs, 
      * specially patterns and corresponding declarations. So now
diff --git a/drools-core/src/main/java/org/drools/core/rule/MutableTypeConstraint.java b/drools-core/src/main/java/org/drools/core/rule/MutableTypeConstraint.java
index 4b0acfe..db6bebe 100644
--- a/drools-core/src/main/java/org/drools/core/rule/MutableTypeConstraint.java
+++ b/drools-core/src/main/java/org/drools/core/rule/MutableTypeConstraint.java
@@ -69,4 +69,18 @@ public abstract class MutableTypeConstraint
     public boolean setInUse() {
         return inUse.getAndSet(true);
     }
+
+    public void setConstraintType(Pattern pattern) {
+        final Declaration[] declarations = getRequiredDeclarations();
+
+        boolean isAlphaConstraint = true;
+        for ( int i = 0; isAlphaConstraint && i < declarations.length; i++ ) {
+            if ( !declarations[i].isGlobal() && declarations[i].getPattern() != pattern) {
+                isAlphaConstraint = false;
+            }
+        }
+
+        ConstraintType type = isAlphaConstraint ? ConstraintType.ALPHA : ConstraintType.BETA;
+        setType( type );
+    }
 }
\ No newline at end of file
diff --git a/drools-core/src/main/java/org/drools/core/rule/Pattern.java b/drools-core/src/main/java/org/drools/core/rule/Pattern.java
index ffc4ed8..a296f51 100644
--- a/drools-core/src/main/java/org/drools/core/rule/Pattern.java
+++ b/drools-core/src/main/java/org/drools/core/rule/Pattern.java
@@ -291,7 +291,7 @@ public class Pattern
             this.constraints = new ArrayList<Constraint>( 1 );
         }
         if ( constraint.getType().equals( Constraint.ConstraintType.UNKNOWN ) ) {
-            this.setConstraintType( (MutableTypeConstraint) constraint );
+            ((MutableTypeConstraint) constraint).setConstraintType(this);
         } else if ( constraint.getType().equals( Constraint.ConstraintType.XPATH ) ) {
             this.xPath = (XpathConstraint) constraint;
         }
@@ -304,7 +304,7 @@ public class Pattern
         }
         for (Constraint constraint : constraints) {
             if ( constraint.getType().equals( Constraint.ConstraintType.UNKNOWN ) ) {
-                this.setConstraintType( (MutableTypeConstraint) constraint );
+                ((MutableTypeConstraint) constraint).setConstraintType(this);
             } else if ( constraint.getType().equals( Constraint.ConstraintType.XPATH ) ) {
                 this.xPath = (XpathConstraint) constraint;
             }
@@ -317,7 +317,7 @@ public class Pattern
             this.constraints = new ArrayList<Constraint>( 1 );
         }
         if ( constraint.getType().equals( Constraint.ConstraintType.UNKNOWN ) ) {
-            this.setConstraintType( (MutableTypeConstraint) constraint );
+            ((MutableTypeConstraint) constraint).setConstraintType(this);
         }
         this.constraints.add(constraint);
     }
@@ -488,20 +488,6 @@ public class Pattern
         return true;
     }
 
-    private void setConstraintType(final MutableTypeConstraint constraint) {
-        final Declaration[] declarations = constraint.getRequiredDeclarations();
-
-        boolean isAlphaConstraint = true;
-        for ( int i = 0; isAlphaConstraint && i < declarations.length; i++ ) {
-            if ( !declarations[i].isGlobal() && declarations[i].getPattern() != this ) {
-                isAlphaConstraint = false;
-            }
-        }
-
-        ConstraintType type = isAlphaConstraint ? ConstraintType.ALPHA : ConstraintType.BETA;
-        constraint.setType( type );
-    }
-
     /**
      * @return the behaviors
      */
diff --git a/drools-core/src/main/java/org/drools/core/rule/SlidingTimeWindow.java b/drools-core/src/main/java/org/drools/core/rule/SlidingTimeWindow.java
index 339e0bb..c25fe37 100644
--- a/drools-core/src/main/java/org/drools/core/rule/SlidingTimeWindow.java
+++ b/drools-core/src/main/java/org/drools/core/rule/SlidingTimeWindow.java
@@ -122,7 +122,7 @@ public class SlidingTimeWindow
         final SlidingTimeWindowContext queue = (SlidingTimeWindowContext) context;
         final EventFactHandle handle = (EventFactHandle) fact;
         long currentTime = workingMemory.getTimerService().getCurrentTime();
-        if ( isExpired( currentTime, handle ) ) {
+        if ( handle.isExpiredOther( currentTime, this) ) {
             return false;
         }
 
@@ -171,8 +171,8 @@ public class SlidingTimeWindow
         SlidingTimeWindowContext queue = (SlidingTimeWindowContext) context;
 
         EventFactHandle handle = queue.peek();
-        while ( handle != null && isExpired( currentTime,
-                                             handle ) ) {
+        while ( handle != null && handle.isExpiredOther( currentTime,
+                this) ) {
             queue.setExpiringHandle( handle );
             queue.remove();
             if( handle.isValid()) {
@@ -190,11 +190,6 @@ public class SlidingTimeWindow
                               nodeId );
     }
 
-    protected boolean isExpired(final long currentTime,
-                                final EventFactHandle handle) {
-        return handle.getStartTimestamp() + this.size <= currentTime;
-    }
-
     protected void updateNextExpiration(final InternalFactHandle fact,
                                         final InternalWorkingMemory workingMemory,
                                         final Behavior.Context context,
diff --git a/drools-core/src/main/java/org/drools/core/rule/constraint/MvelConstraint.java b/drools-core/src/main/java/org/drools/core/rule/constraint/MvelConstraint.java
index 3e9c211..c6f5c30 100644
--- a/drools-core/src/main/java/org/drools/core/rule/constraint/MvelConstraint.java
+++ b/drools-core/src/main/java/org/drools/core/rule/constraint/MvelConstraint.java
@@ -389,7 +389,7 @@ public class MvelConstraint extends MutableTypeConstraint implements IndexableCo
         for (int i = 0; i < declarations.length; i++) {
             if (declarations[i].equals(oldDecl)) {
                 if (compilationUnit != null) {
-                    compilationUnit.replaceDeclaration(declarations[i], newDecl);
+                    declarations[i].replaceDeclaration(newDecl, compilationUnit);
                 }
                 declarations[i] = newDecl;
                 break;
diff --git a/drools-core/src/main/java/org/drools/core/time/impl/CronExpression.java b/drools-core/src/main/java/org/drools/core/time/impl/CronExpression.java
index 69ad13b..6e578d5 100644
--- a/drools-core/src/main/java/org/drools/core/time/impl/CronExpression.java
+++ b/drools-core/src/main/java/org/drools/core/time/impl/CronExpression.java
@@ -1582,6 +1582,12 @@ public class CronExpression implements Serializable, Cloneable {
         }
         return copy;
     }
+
+    public void setCronExpression(CronTrigger cronTrigger) {
+        TimeZone origTz = cronTrigger.getTimeZone();
+        cronTrigger.setCronEx(this);
+        cronTrigger.getCronEx().setTimeZone( origTz );
+    }
 }
 
 class ValueSet {
diff --git a/drools-core/src/main/java/org/drools/core/time/impl/CronTrigger.java b/drools-core/src/main/java/org/drools/core/time/impl/CronTrigger.java
index 2d94a5d..ae9366d 100644
--- a/drools-core/src/main/java/org/drools/core/time/impl/CronTrigger.java
+++ b/drools-core/src/main/java/org/drools/core/time/impl/CronTrigger.java
@@ -68,7 +68,7 @@ public class CronTrigger
                        CronExpression cronExpression,
                        String[] calendarNames,
                        Calendars calendars) {
-        setCronExpression( cronExpression );
+        cronExpression.setCronExpression(this);
         
         this.repeatLimit = repeatLimit;
 
@@ -212,7 +212,7 @@ public class CronTrigger
      * <code>CronTrigger</code> will be resolved.
      * </p>
      * 
-     * <p>If {@link #setCronExpression(CronExpression)} is called after this
+     * <p>If {@link CronExpression#setCronExpression(CronTrigger)} is called after this
      * method, the TimeZon setting on the CronExpression will "win".  However
      * if {@link #setCronExpression(String)} is called after this method, the
      * time zone applied by this method will remain in effect, since the 
@@ -226,16 +226,9 @@ public class CronTrigger
     }
 
     public void setCronExpression(String cronExpression) {
-        setCronExpression( determineCronExpression( cronExpression ) );
+        determineCronExpression( cronExpression ).setCronExpression(this);
     }
 
-    public void setCronExpression(CronExpression cronExpression) {
-        TimeZone origTz = getTimeZone();
-        this.cronEx = cronExpression;
-        this.cronEx.setTimeZone( origTz );
-    }
-    
-    
 
     public CronExpression getCronEx() {
         return cronEx;
diff --git a/drools-core/src/main/java/org/drools/core/util/KeyStoreHelper.java b/drools-core/src/main/java/org/drools/core/util/KeyStoreHelper.java
index 44303d1..6b5987e 100755
--- a/drools-core/src/main/java/org/drools/core/util/KeyStoreHelper.java
+++ b/drools-core/src/main/java/org/drools/core/util/KeyStoreHelper.java
@@ -16,6 +16,7 @@
 package org.drools.core.util;
 
 import java.io.IOException;
+import java.io.ObjectOutput;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.security.InvalidKeyException;
@@ -32,6 +33,7 @@ import java.security.cert.CertificateException;
 import javax.crypto.SecretKey;
 
 import org.drools.core.RuleBaseConfiguration;
+import org.drools.core.rule.JavaDialectRuntimeData;
 
 import static org.drools.core.util.KeyStoreConstants.KEY_CERTIFICATE_TYPE;
 import static org.drools.core.util.KeyStoreConstants.KEY_PASSWORD_TYPE;
@@ -250,4 +252,14 @@ public class KeyStoreHelper {
     public KeyStore getPubKeyStore() {
         return pubKeyStore;
     }
+
+    public void sign(final ObjectOutput stream,
+                     byte[] buff, JavaDialectRuntimeData javaDialectRuntimeData) {
+        try {
+            stream.writeObject( signDataWithPrivateKey( buff ) );
+        } catch (Exception e) {
+            throw new RuntimeException( "Error signing object store: " + e.getMessage(),
+                                        e );
+        }
+    }
 }
diff --git a/drools-core/src/main/java/org/drools/core/util/ObjectHashMap.java b/drools-core/src/main/java/org/drools/core/util/ObjectHashMap.java
index e523160..22ee213 100644
--- a/drools-core/src/main/java/org/drools/core/util/ObjectHashMap.java
+++ b/drools-core/src/main/java/org/drools/core/util/ObjectHashMap.java
@@ -16,6 +16,9 @@
 
 package org.drools.core.util;
 
+import org.drools.core.reteoo.AlphaNode;
+import org.drools.core.reteoo.compiled.ObjectTypeNodeParser;
+
 import java.io.Externalizable;
 import java.io.IOException;
 import java.io.ObjectInput;
@@ -140,8 +143,30 @@ public class ObjectHashMap extends AbstractHashTable implements Externalizable {
     public int getResizeHashcode(Entry entry) {
         // ObjectEntry always caches after rehash, so use the cached value
         return ((ObjectEntry)entry).cachedHashCode;
-    }    
-    
+    }
+
+    /**
+     * Returns the first {@link org.kie.reteoo.AlphaNode} from the specified {@link ObjectHashMap}.
+     *
+     *
+     * @param objectTypeNodeParser@return first alpha from the specified map
+     * @throws IllegalArgumentException thrown if the map doesn't contain any alpha nodes
+     */
+    public AlphaNode getFirstAlphaNode(ObjectTypeNodeParser objectTypeNodeParser) throws IllegalArgumentException {
+        AlphaNode firstAlphaNode;
+
+        final Iterator iter = iterator();
+        final ObjectEntry entry = (ObjectEntry) iter.next();
+
+        if (entry != null) {
+            firstAlphaNode = (AlphaNode) entry.getValue();
+        } else {
+            throw new IllegalArgumentException("ObjectHashMap does not contain any hashed AlphaNodes!");
+        }
+
+        return firstAlphaNode;
+    }
+
     public static class ObjectEntry
         implements
         Entry,
diff --git a/drools-core/src/main/java/org/drools/core/util/index/TupleIndexHashTable.java b/drools-core/src/main/java/org/drools/core/util/index/TupleIndexHashTable.java
index b81c58c..b21f286 100644
--- a/drools-core/src/main/java/org/drools/core/util/index/TupleIndexHashTable.java
+++ b/drools-core/src/main/java/org/drools/core/util/index/TupleIndexHashTable.java
@@ -395,7 +395,7 @@ public class TupleIndexHashTable extends AbstractHashTable implements TupleMemor
 
         // search to find an existing entry
         while ( entry != null ) {
-            if ( matches( entry, tuple, hashCode, !left ) ) {
+            if ( entry.matches(tuple, hashCode, !left, this) ) {
                 return entry;
             }
             entry = entry.getNext();
@@ -423,7 +423,7 @@ public class TupleIndexHashTable extends AbstractHashTable implements TupleMemor
         TupleList entry = (TupleList) this.table[index];
 
         while ( entry != null ) {
-            if ( matches(entry, tuple, hashCode, left ) ) {
+            if ( entry.matches(tuple, hashCode, left, this) ) {
                 return entry;
             }
             entry = entry.getNext();
@@ -432,16 +432,6 @@ public class TupleIndexHashTable extends AbstractHashTable implements TupleMemor
         return null;
     }
 
-    private boolean matches( TupleList list, Tuple tuple, int tupleHashCode, boolean left ) {
-        if ( list.hashCode() != tupleHashCode ) {
-            return false;
-        }
-
-        return left ?
-               this.index.equal( list, tuple.getFactHandle().getObject() ) :
-               this.index.equal( list, tuple );
-    }
-
     public int size() {
         return this.factSize;
     }
diff --git a/drools-core/src/main/java/org/drools/core/util/index/TupleList.java b/drools-core/src/main/java/org/drools/core/util/index/TupleList.java
index 245d52b..c538c99 100644
--- a/drools-core/src/main/java/org/drools/core/util/index/TupleList.java
+++ b/drools-core/src/main/java/org/drools/core/util/index/TupleList.java
@@ -196,6 +196,16 @@ public class TupleList implements TupleMemory, Entry<TupleList> {
         return this.iterator;
     }
 
+    public boolean matches(Tuple tuple, int tupleHashCode, boolean left, TupleIndexHashTable tupleIndexHashTable) {
+        if ( hashCode() != tupleHashCode ) {
+            return false;
+        }
+
+        return left ?
+               tupleIndexHashTable.getIndex().equal(this, tuple.getFactHandle().getObject() ) :
+               tupleIndexHashTable.getIndex().equal(this, tuple );
+    }
+
     public static class TupleHashTableIterator
         implements
         Iterator<Tuple> {
diff --git a/drools-core/src/main/java/org/drools/core/xml/BaseAbstractHandler.java b/drools-core/src/main/java/org/drools/core/xml/BaseAbstractHandler.java
index f8f9bc7..c2d5e9e 100644
--- a/drools-core/src/main/java/org/drools/core/xml/BaseAbstractHandler.java
+++ b/drools-core/src/main/java/org/drools/core/xml/BaseAbstractHandler.java
@@ -38,16 +38,6 @@ public abstract class BaseAbstractHandler {
         return this.allowNesting;
     }
 
-    public void emptyAttributeCheck(final String element,
-                                    final String attributeName,
-                                    final String attribute,
-                                    final ExtensibleXmlParser xmlPackageReader) throws SAXException {
-        if ( attribute == null || attribute.trim().equals( "" ) ) {
-            throw new SAXParseException( "<" + element + "> requires a '" + attributeName + "' attribute",
-                                         xmlPackageReader.getLocator() );
-        }
-    }
-
     public void emptyContentCheck(final String element,
                                   final String content,
                                   final ExtensibleXmlParser xmlPackageReader) throws SAXException {
diff --git a/drools-core/src/main/java/org/drools/core/xml/ExtensibleXmlParser.java b/drools-core/src/main/java/org/drools/core/xml/ExtensibleXmlParser.java
index d26da3c..adc561f 100644
--- a/drools-core/src/main/java/org/drools/core/xml/ExtensibleXmlParser.java
+++ b/drools-core/src/main/java/org/drools/core/xml/ExtensibleXmlParser.java
@@ -445,6 +445,15 @@ public class ExtensibleXmlParser extends DefaultHandler {
                                  this );
     }
 
+    public void emptyAttributeCheck(final String element,
+                                    final String attributeName,
+                                    final String attribute, BaseAbstractHandler baseAbstractHandler) throws SAXException {
+        if ( attribute == null || attribute.trim().equals( "" ) ) {
+            throw new SAXParseException( "<" + element + "> requires a '" + attributeName + "' attribute",
+                                         getLocator() );
+        }
+    }
+
     public static class Null {
         public static final Null instance = new Null();
     }
diff --git a/drools-core/src/main/java/org/drools/core/xml/changeset/DecisionTableConfigurationHandler.java b/drools-core/src/main/java/org/drools/core/xml/changeset/DecisionTableConfigurationHandler.java
index 61dee5c..0ee221c 100644
--- a/drools-core/src/main/java/org/drools/core/xml/changeset/DecisionTableConfigurationHandler.java
+++ b/drools-core/src/main/java/org/drools/core/xml/changeset/DecisionTableConfigurationHandler.java
@@ -58,10 +58,10 @@ public class DecisionTableConfigurationHandler extends BaseAbstractHandler
         String type = attrs.getValue( "input-type" );
         String worksheetName = attrs.getValue( "worksheet-name" );
 
-        emptyAttributeCheck( localName,
+        parser.emptyAttributeCheck( localName,
                              "input-type",
                              type,
-                             parser );
+                DecisionTableConfigurationHandler.this);
 
         DecisionTableConfiguration dtConf = new DecisionTableConfigurationImpl();
         dtConf.setInputType( DecisionTableInputType.valueOf( type ) );
diff --git a/drools-core/src/main/java/org/drools/core/xml/changeset/DefinitionHandler.java b/drools-core/src/main/java/org/drools/core/xml/changeset/DefinitionHandler.java
index 7538778..a1da99a 100644
--- a/drools-core/src/main/java/org/drools/core/xml/changeset/DefinitionHandler.java
+++ b/drools-core/src/main/java/org/drools/core/xml/changeset/DefinitionHandler.java
@@ -75,15 +75,15 @@ public class DefinitionHandler extends BaseAbstractHandler
         String packageName = attrs.getValue( "package" );
         String name = attrs.getValue( "name" );
         
-        emptyAttributeCheck( localName,
+        parser.emptyAttributeCheck( localName,
                              "package",
                              packageName,
-                             parser );
+                DefinitionHandler.this);
         
-        emptyAttributeCheck( localName,
+        parser.emptyAttributeCheck( localName,
                              "name",
                              name,
-                             parser );
+                DefinitionHandler.this);
         DefinitionHandler.DefinitionHandlerData data = new DefinitionHandlerData(packageName, name);
         
         return data;
diff --git a/drools-core/src/main/java/org/drools/core/xml/changeset/ResourceHandler.java b/drools-core/src/main/java/org/drools/core/xml/changeset/ResourceHandler.java
index 1f5a4c3..f82082c 100644
--- a/drools-core/src/main/java/org/drools/core/xml/changeset/ResourceHandler.java
+++ b/drools-core/src/main/java/org/drools/core/xml/changeset/ResourceHandler.java
@@ -69,15 +69,15 @@ public class ResourceHandler extends BaseAbstractHandler
         String categories = attrs.getValue( "categories" );
 
         
-        emptyAttributeCheck( localName,
+        parser.emptyAttributeCheck( localName,
                              "source",
                              src,
-                             parser );
+                ResourceHandler.this);
         
-        emptyAttributeCheck( localName,
+        parser.emptyAttributeCheck( localName,
                              "type",
                              type,
-                             parser );
+                ResourceHandler.this);
         InternalResource resource = null;
         
         if ( src.trim().startsWith( "classpath:" ) ) {
diff --git a/drools-core/src/test/java/org/drools/core/reteoo/ReteTest.java b/drools-core/src/test/java/org/drools/core/reteoo/ReteTest.java
index dfc5213..cc5eea0 100644
--- a/drools-core/src/test/java/org/drools/core/reteoo/ReteTest.java
+++ b/drools-core/src/test/java/org/drools/core/reteoo/ReteTest.java
@@ -255,7 +255,7 @@ public class ReteTest extends DroolsTestCase {
 
         // double check that the List reference is the same as the one we created, i.e. engine should try and recreate it
         assertSame(listOtn,
-                   rete.getObjectTypeNodes(EntryPointId.DEFAULT).get(new ClassObjectType(List.class)));
+                   EntryPointId.DEFAULT.getObjectTypeNodes(rete).get(new ClassObjectType(List.class)));
 
         // ArrayConf should match two ObjectTypenodes for List and ArrayList
         ClassObjectTypeConf arrayConf = (ClassObjectTypeConf) ksession.getObjectTypeConfigurationRegistry().getObjectTypeConf(this.entryPoint.getEntryPoint(), new ArrayList());
diff --git a/drools-examples/src/main/java/org/drools/examples/datadriventemplate/DataDrivenTemplateExample.java b/drools-examples/src/main/java/org/drools/examples/datadriventemplate/DataDrivenTemplateExample.java
index 74e520d..1585e48 100644
--- a/drools-examples/src/main/java/org/drools/examples/datadriventemplate/DataDrivenTemplateExample.java
+++ b/drools-examples/src/main/java/org/drools/examples/datadriventemplate/DataDrivenTemplateExample.java
@@ -94,9 +94,8 @@ public class DataDrivenTemplateExample {
         FeeType postage = new FeeType( "Postage" );
         FeeType telex = new FeeType( "Telex" );
 
-        rules.add( createRule( 1,
-                               flat,
-                               "",
+        rules.add( flat.createRule( 1,
+                "",
                                sblc,
                                iss,
                                commission,
@@ -105,10 +104,9 @@ public class DataDrivenTemplateExample {
                                "",
                                0,
                                750,
-                               true ) );
-        rules.add( createRule( 2,
-                               standard,
-                               "Entity Branch 1",
+                               true, this) );
+        rules.add( standard.createRule( 2,
+                "Entity Branch 1",
                                rrc,
                                iss,
                                commission,
@@ -117,10 +115,9 @@ public class DataDrivenTemplateExample {
                                "",
                                0,
                                1600,
-                               false ) );
-        rules.add( createRule( 3,
-                               standard,
-                               "",
+                               false, this) );
+        rules.add( standard.createRule( 3,
+                "",
                                sblc,
                                iss,
                                postage,
@@ -129,10 +126,9 @@ public class DataDrivenTemplateExample {
                                "",
                                0,
                                40,
-                               true ) );
-        rules.add( createRule( 4,
-                               flat,
-                               "",
+                               true, this) );
+        rules.add( flat.createRule( 4,
+                "",
                                sblc,
                                osx,
                                telex,
@@ -141,7 +137,7 @@ public class DataDrivenTemplateExample {
                                "<",
                                30000,
                                45,
-                               false ) );
+                               false, this) );
         TestDataProvider tdp = new TestDataProvider( rules );
         final DataProviderCompiler converter = new DataProviderCompiler();
         final String drl = converter.compile( tdp,
@@ -154,31 +150,4 @@ public class DataDrivenTemplateExample {
         return DataDrivenTemplateExample.class.getResourceAsStream( "FeeScheduleRules.drt" );
     }
 
-    private FeeScheduleRule createRule(long feeEventId,
-                                       FeeScheduleType type,
-                                       String entityBranch,
-                                       ProductType productType,
-                                       ActivityType activityType,
-                                       FeeType feeType,
-                                       String owningParty,
-                                       String currency,
-                                       String comparator,
-                                       long compareAmount,
-                                       long amount,
-                                       boolean logEvent) {
-        FeeScheduleRule rule = new FeeScheduleRule( feeEventId,
-                                                    activityType,
-                                                    productType,
-                                                    type,
-                                                    feeType,
-                                                    owningParty,
-                                                    entityBranch,
-                                                    comparator,
-                                                    compareAmount,
-                                                    amount,
-                                                    currency,
-                                                    logEvent );
-        return rule;
-    }
-
 }
diff --git a/drools-examples/src/main/java/org/drools/examples/templates/FeeScheduleType.java b/drools-examples/src/main/java/org/drools/examples/templates/FeeScheduleType.java
index 7625792..7c6eaf3 100644
--- a/drools-examples/src/main/java/org/drools/examples/templates/FeeScheduleType.java
+++ b/drools-examples/src/main/java/org/drools/examples/templates/FeeScheduleType.java
@@ -15,6 +15,9 @@
  */
 
 package org.drools.examples.templates;
+
+import org.drools.examples.datadriventemplate.DataDrivenTemplateExample;
+
 public class FeeScheduleType {
     private String code;
     
@@ -25,4 +28,30 @@ public class FeeScheduleType {
     public final String getCode() {
         return code;
     }
+
+    public FeeScheduleRule createRule(long feeEventId,
+                                      String entityBranch,
+                                      ProductType productType,
+                                      ActivityType activityType,
+                                      FeeType feeType,
+                                      String owningParty,
+                                      String currency,
+                                      String comparator,
+                                      long compareAmount,
+                                      long amount,
+                                      boolean logEvent, DataDrivenTemplateExample dataDrivenTemplateExample) {
+        FeeScheduleRule rule = new FeeScheduleRule( feeEventId,
+                                                    activityType,
+                                                    productType,
+                this,
+                                                    feeType,
+                                                    owningParty,
+                                                    entityBranch,
+                                                    comparator,
+                                                    compareAmount,
+                                                    amount,
+                                                    currency,
+                                                    logEvent );
+        return rule;
+    }
 }
diff --git a/drools-examples/src/main/java/org/drools/games/adventures/AdventureFrame.java b/drools-examples/src/main/java/org/drools/games/adventures/AdventureFrame.java
index c3fbfe7..149a42c 100644
--- a/drools-examples/src/main/java/org/drools/games/adventures/AdventureFrame.java
+++ b/drools-examples/src/main/java/org/drools/games/adventures/AdventureFrame.java
@@ -330,8 +330,8 @@ public class AdventureFrame extends JFrame {
                 cmd = new ArrayList();
                 cmd.add( LookCommand.class );
                 cmd.add( characterSelectCombo.getSelectedObjects()[0] );
-                gameEngine.receiveMessage( session,
-                                           cmd );
+                session.receiveMessage(
+                        cmd, gameEngine);
                 cmd = null;
             }
         } );
@@ -553,8 +553,8 @@ public class AdventureFrame extends JFrame {
         sendBtn.addActionListener( new ActionListener() {
             public void actionPerformed(ActionEvent e) {
                 //msg.setContent( cmd );
-                gameEngine.receiveMessage( session,
-                                           cmd );
+                session.receiveMessage(
+                        cmd, gameEngine);
                 cmd = null;
                 cmdTextField.setText( "" );
             }
diff --git a/drools-examples/src/main/java/org/drools/games/adventures/GameEngine.java b/drools-examples/src/main/java/org/drools/games/adventures/GameEngine.java
index c79b06b..499da68 100644
--- a/drools-examples/src/main/java/org/drools/games/adventures/GameEngine.java
+++ b/drools-examples/src/main/java/org/drools/games/adventures/GameEngine.java
@@ -17,16 +17,12 @@ package org.drools.games.adventures;
 
 import org.apache.commons.io.IOUtils;
 import org.drools.core.util.IoUtils;
-import org.drools.games.adventures.model.Command;
 import org.kie.api.runtime.KieContainer;
 import org.kie.api.runtime.KieSession;
 import org.mvel2.MVEL;
-import org.mvel2.util.ParseTools;
-import org.mvel2.util.ReflectionUtil;
 
 import java.io.IOException;
 import java.util.HashMap;
-import java.util.List;
 import java.util.Map;
 
 public class GameEngine {
@@ -86,33 +82,6 @@ public class GameEngine {
         return data;
     }
 
-    public void receiveMessage(UserSession session,
-                               List cmdList) {
-        try {
-            Class<Command> cls = (Class<Command>) cmdList.get(0);
-            Class[] constructorParamTypes = new Class[cmdList.size()-1];
-            for ( int i = 1; i < cmdList.size(); i++) {
-                constructorParamTypes[i-1] = cmdList.get(i).getClass();
-            }
-
-            Object[] args = cmdList.subList(1, cmdList.size() ).toArray();
-
-            Class[] params = new Class[args.length];
-            for ( int i = 0; i < params.length; i++ ) {
-                params[i] = args[i].getClass();
-            }
-
-            Command cmd = (Command) ParseTools.getBestConstructorCandidate(args, cls, true).newInstance(args);
-            cmd.setSession( session );
-            ksession.insert( cmd );
-            ksession.fireAllRules();
-        } catch ( Exception e ) {
-            e.printStackTrace();
-            session.getChannels().get( "output" ).send( "Unable to Execute Command: " + cmdList );
-        }
-
-    }
-
     public KieSession getKieSession() {
         return ksession;
     }
diff --git a/drools-examples/src/main/java/org/drools/games/adventures/UserSession.java b/drools-examples/src/main/java/org/drools/games/adventures/UserSession.java
index 5053e8a..cd39a97 100644
--- a/drools-examples/src/main/java/org/drools/games/adventures/UserSession.java
+++ b/drools-examples/src/main/java/org/drools/games/adventures/UserSession.java
@@ -16,13 +16,16 @@
 package org.drools.games.adventures;
 
 import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicInteger;
 import org.drools.games.adventures.model.Character;
 
+import org.drools.games.adventures.model.Command;
 import org.kie.api.definition.type.Position;
 import org.kie.api.definition.type.PropertyReactive;
 import org.kie.api.runtime.Channel;
+import org.mvel2.util.ParseTools;
 
 public class UserSession {
     @Position(0)
@@ -88,4 +91,29 @@ public class UserSession {
         return "UserSession [id=" + id + ", channels=" + channels + "]";
     }
 
+    public void receiveMessage(List cmdList, GameEngine gameEngine) {
+        try {
+            Class<Command> cls = (Class<Command>) cmdList.get(0);
+            Class[] constructorParamTypes = new Class[cmdList.size()-1];
+            for ( int i = 1; i < cmdList.size(); i++) {
+                constructorParamTypes[i-1] = cmdList.get(i).getClass();
+            }
+
+            Object[] args = cmdList.subList(1, cmdList.size() ).toArray();
+
+            Class[] params = new Class[args.length];
+            for ( int i = 0; i < params.length; i++ ) {
+                params[i] = args[i].getClass();
+            }
+
+            Command cmd = (Command) ParseTools.getBestConstructorCandidate(args, cls, true).newInstance(args);
+            cmd.setSession(this);
+            gameEngine.getKieSession().insert( cmd );
+            gameEngine.getKieSession().fireAllRules();
+        } catch ( Exception e ) {
+            e.printStackTrace();
+            getChannels().get( "output" ).send( "Unable to Execute Command: " + cmdList );
+        }
+
+    }
 }
diff --git a/drools-examples/src/main/java/org/drools/games/pong/Ball.java b/drools-examples/src/main/java/org/drools/games/pong/Ball.java
index 624ffd6..0efa4ba 100644
--- a/drools-examples/src/main/java/org/drools/games/pong/Ball.java
+++ b/drools-examples/src/main/java/org/drools/games/pong/Ball.java
@@ -15,6 +15,8 @@
 
 package org.drools.games.pong;
 
+import java.awt.*;
+
 public class Ball {
     private int x;
     private int y;
@@ -84,6 +86,11 @@ public class Ball {
     @Override
     public String toString() {
         return "Ball [x=" + x + ", y=" + y + ", width=" + width + ", dx=" + dx + ", dy=" + dy + ", speed=" + speed + "]";
-    }  
-    
+    }
+
+    public void drawBall(PongUI pongUI) {
+        Graphics g = pongUI.getGraphics();
+        g.setColor( Color.WHITE ); // background
+        g.fillOval( getX(), getY(), getWidth(), getWidth() );
+    }
 }
diff --git a/drools-examples/src/main/java/org/drools/games/pong/PongUI.java b/drools-examples/src/main/java/org/drools/games/pong/PongUI.java
index 474ece7..c74e539 100644
--- a/drools-examples/src/main/java/org/drools/games/pong/PongUI.java
+++ b/drools-examples/src/main/java/org/drools/games/pong/PongUI.java
@@ -16,25 +16,14 @@
 package org.drools.games.pong;
 
 import java.awt.*;
-import java.awt.event.KeyEvent;
-import java.awt.event.KeyListener;
-import java.awt.event.MouseEvent;
-import java.awt.event.MouseListener;
 import java.awt.event.WindowAdapter;
 import java.awt.event.WindowEvent;
-import java.awt.event.WindowListener;
 import java.awt.font.FontRenderContext;
 import java.awt.font.TextLayout;
-import java.awt.image.BufferedImage;
-
-import javax.swing.*;
 
 import org.drools.games.GameConfiguration;
 import org.drools.games.GameUI;
 import org.kie.api.runtime.KieSession;
-import org.kie.internal.runtime.StatefulKnowledgeSession;
-import org.kie.api.runtime.rule.FactHandle;
-import org.kie.api.runtime.rule.EntryPoint;
 
 public class PongUI extends GameUI {
     private PongConfiguration pconf;
@@ -66,7 +55,7 @@ public class PongUI extends GameUI {
         drawScore( p2, pconf.getTableWidth()-120 );
         drawTable();
 
-        drawBall(ball);
+        ball.drawBall(this);
         drawBat(bat1);
         drawBat(bat2);
         repaint();
@@ -94,12 +83,6 @@ public class PongUI extends GameUI {
         }
     }
 
-    public void drawBall(Ball ball) {
-        Graphics g = getGraphics();
-        g.setColor( Color.WHITE ); // background
-        g.fillOval( ball.getX(), ball.getY(), ball.getWidth(), ball.getWidth() );
-    }
-
     public void drawBat(Bat bat) {
         Graphics g = getGraphics();
         g.setColor( Color.WHITE ); // background
diff --git a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/CanonicalKieModule.java b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/CanonicalKieModule.java
index 6005712..c5a7f6c 100644
--- a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/CanonicalKieModule.java
+++ b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/CanonicalKieModule.java
@@ -49,10 +49,7 @@ import org.drools.compiler.kproject.models.KieModuleModelImpl;
 import org.drools.core.RuleBaseConfiguration;
 import org.drools.core.common.ProjectClassLoader;
 import org.drools.core.common.ResourceProvider;
-import org.drools.core.definitions.InternalKnowledgePackage;
-import org.drools.core.definitions.impl.KnowledgePackageImpl;
 import org.drools.core.impl.InternalKnowledgeBase;
-import org.drools.core.io.impl.ByteArrayResource;
 import org.drools.core.util.Drools;
 import org.drools.core.util.IoUtils;
 import org.drools.core.util.StringUtils;
@@ -141,7 +138,7 @@ public class CanonicalKieModule implements InternalKieModule {
         InternalKnowledgeBase kieBase = new KieBaseBuilder(kBaseModel, kBaseConf).createKieBase(kpkgs);
 
         if ( hasNonModelResources( kBaseModel, kieProject ) ) {
-            KnowledgePackagesBuildResult knowledgePackagesBuildResult = (( AbstractKieModule ) internalKieModule).buildKnowledgePackages( kBaseModel, kieProject, messages );
+            KnowledgePackagesBuildResult knowledgePackagesBuildResult = messages.buildKnowledgePackages( kBaseModel, kieProject, (( AbstractKieModule ) internalKieModule));
             if ( knowledgePackagesBuildResult.hasErrors() ) {
                 return null;
             }
@@ -194,19 +191,7 @@ public class CanonicalKieModule implements InternalKieModule {
         }
 
         CanonicalKiePackages canonicalKiePkgs = new KiePackagesBuilder(conf, models).build();
-        return mergeProcesses( processes, canonicalKiePkgs );
-    }
-
-    private CanonicalKiePackages mergeProcesses( List<Process> processes, CanonicalKiePackages canonicalKiePkgs ) {
-        for (Process process : processes) {
-            InternalKnowledgePackage canonicalKiePkg = ( InternalKnowledgePackage ) canonicalKiePkgs.getKiePackage( process.getPackageName() );
-            if ( canonicalKiePkg == null ) {
-                canonicalKiePkg = new KnowledgePackageImpl( process.getPackageName() );
-                canonicalKiePkgs.addKiePackage( canonicalKiePkg );
-            }
-            canonicalKiePkg.addProcess( process );
-        }
-        return canonicalKiePkgs;
+        return canonicalKiePkgs.mergeProcesses( processes, this);
     }
 
     private List<Process> findProcesses( InternalKieModule kieModule, KieBaseModelImpl kBaseModel ) {
diff --git a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/CanonicalKiePackages.java b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/CanonicalKiePackages.java
index 673eb57..f6b9f97 100644
--- a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/CanonicalKiePackages.java
+++ b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/CanonicalKiePackages.java
@@ -17,10 +17,13 @@
 package org.drools.modelcompiler;
 
 import java.util.Collection;
+import java.util.List;
 import java.util.Map;
 
 import org.drools.core.definitions.InternalKnowledgePackage;
+import org.drools.core.definitions.impl.KnowledgePackageImpl;
 import org.kie.api.definition.KiePackage;
+import org.kie.api.definition.process.Process;
 
 public class CanonicalKiePackages {
     private final Map<String, InternalKnowledgePackage> packages;
@@ -40,4 +43,16 @@ public class CanonicalKiePackages {
     public void addKiePackage( InternalKnowledgePackage kiePackage ) {
         packages.put( kiePackage.getName(), kiePackage );
     }
+
+    public CanonicalKiePackages mergeProcesses(List<Process> processes, CanonicalKieModule canonicalKieModule) {
+        for (Process process : processes) {
+            InternalKnowledgePackage canonicalKiePkg = ( InternalKnowledgePackage ) getKiePackage( process.getPackageName() );
+            if ( canonicalKiePkg == null ) {
+                canonicalKiePkg = new KnowledgePackageImpl( process.getPackageName() );
+                addKiePackage( canonicalKiePkg );
+            }
+            canonicalKiePkg.addProcess( process );
+        }
+        return this;
+    }
 }
diff --git a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/RuleContext.java b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/RuleContext.java
index bc5378a..a6b513d 100644
--- a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/RuleContext.java
+++ b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/RuleContext.java
@@ -30,8 +30,10 @@ import com.github.javaparser.ast.expr.MethodCallExpr;
 import com.github.javaparser.ast.expr.NameExpr;
 import org.drools.modelcompiler.builder.PackageModel;
 import org.drools.modelcompiler.builder.errors.UnknownRuleUnitError;
+import org.drools.modelcompiler.builder.generator.visitor.accumulate.AccumulateVisitor;
 import org.kie.api.definition.type.ClassReactive;
 import org.kie.api.definition.type.PropertyReactive;
+import org.kie.api.runtime.rule.AccumulateFunction;
 import org.kie.internal.builder.KnowledgeBuilderResult;
 import org.kie.internal.builder.ResultSeverity;
 import org.kie.internal.builder.conf.PropertySpecificOption;
@@ -76,6 +78,17 @@ public class RuleContext {
     private Deque<Scope> scopesStack = new LinkedList<>();
     private Map<String, String> definedVars = new HashMap<>();
 
+    public void addBindingAsDeclaration(String bindingId, Class<?> declarationClass, AccumulateFunction accumulateFunction, AccumulateVisitor accumulateVisitor) {
+        if (bindingId != null) {
+            Class accumulateFunctionResultType = accumulateFunction.getResultType();
+            if ((accumulateFunctionResultType == Comparable.class || accumulateFunctionResultType == Number.class) &&
+                    (Comparable.class.isAssignableFrom(declarationClass) || declarationClass.isPrimitive())) {
+                accumulateFunctionResultType = declarationClass;
+            }
+            addDeclarationReplacing(new DeclarationSpec(bindingId, accumulateFunctionResultType));
+        }
+    }
+
     public enum RuleDialect {
         JAVA,
         MVEL;
diff --git a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/visitor/accumulate/AccumulateVisitor.java b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/visitor/accumulate/AccumulateVisitor.java
index bd0cb27..5dcb4a4 100644
--- a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/visitor/accumulate/AccumulateVisitor.java
+++ b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/visitor/accumulate/AccumulateVisitor.java
@@ -290,7 +290,7 @@ public abstract class AccumulateVisitor {
                 functionDSL.addArgument(new ClassExpr(toType(accumulateFunction.getClass())));
                 functionDSL.addArgument(context.getVarExpr(nameExpr));
 
-                addBindingAsDeclaration(context, bindingId, declarationClass, accumulateFunction);
+                context.addBindingAsDeclaration(bindingId, declarationClass, accumulateFunction, this);
             } else if (accumulateFunctionParameter instanceof LiteralExpr) {
                 final Class<?> declarationClass = getLiteralExpressionType((LiteralExpr) accumulateFunctionParameter);
 
@@ -305,7 +305,7 @@ public abstract class AccumulateVisitor {
                 functionDSL.addArgument(new ClassExpr(toType(accumulateFunction.getClass())));
                 functionDSL.addArgument(new MethodCallExpr(null, VALUE_OF_CALL, NodeList.nodeList(accumulateFunctionParameter)));
 
-                addBindingAsDeclaration(context, bindingId, declarationClass, accumulateFunction);
+                context.addBindingAsDeclaration(bindingId, declarationClass, accumulateFunction, this);
             } else {
                 context.addCompilationError(new InvalidExpressionErrorResult("Invalid expression " + accumulateFunctionParameterStr));
                 return Optional.empty();
@@ -353,17 +353,6 @@ public abstract class AccumulateVisitor {
         context.addCompilationError(new InvalidExpressionErrorResult(String.format("Unknown accumulate function: '%s' on rule '%s'.", function.getFunction(), context.getRuleDescr().getName())));
     }
 
-    private void addBindingAsDeclaration(RuleContext context, String bindingId, Class<?> declarationClass, AccumulateFunction accumulateFunction) {
-        if (bindingId != null) {
-            Class accumulateFunctionResultType = accumulateFunction.getResultType();
-            if ((accumulateFunctionResultType == Comparable.class || accumulateFunctionResultType == Number.class) &&
-                    (Comparable.class.isAssignableFrom(declarationClass) || declarationClass.isPrimitive())) {
-                accumulateFunctionResultType = declarationClass;
-            }
-            context.addDeclarationReplacing(new DeclarationSpec(bindingId, accumulateFunctionResultType));
-        }
-    }
-
     protected Optional<AccumulateFunction> getAccumulateFunction(AccumulateDescr.AccumulateFunctionCallDescr function, Class<?> methodCallExprType) {
         final String accumulateFunctionName = AccumulateUtil.getFunctionName(() -> methodCallExprType, function.getFunction());
         final Optional<AccumulateFunction> bundledAccumulateFunction = Optional.ofNullable(packageModel.getConfiguration().getAccumulateFunction(accumulateFunctionName));
diff --git a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/visitor/pattern/FlowDSLSimpleConstraint.java b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/visitor/pattern/FlowDSLSimpleConstraint.java
index fdb4cb4..d8c2811 100644
--- a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/visitor/pattern/FlowDSLSimpleConstraint.java
+++ b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/visitor/pattern/FlowDSLSimpleConstraint.java
@@ -23,7 +23,7 @@ class FlowDSLSimpleConstraint implements DSLNode {
     @Override
     public void buildPattern() {
         // need to augment the watch inside drlxParseResult with the look-ahead properties.
-        drlxParseResult.addAllWatchedProperties( context.getRuleDescr().lookAheadFieldsOfIdentifier(pattern) );
+        drlxParseResult.addAllWatchedProperties( pattern.lookAheadFieldsOfIdentifier(context.getRuleDescr()) );
         drlxParseResult.addAllWatchedProperties(DrlxParseUtil.getPatternListenedProperties(pattern) );
 
         if (pattern.isUnification()) {
diff --git a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/visitor/pattern/PatternDSL.java b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/visitor/pattern/PatternDSL.java
index fdd1965..b1026b3 100644
--- a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/visitor/pattern/PatternDSL.java
+++ b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/visitor/pattern/PatternDSL.java
@@ -205,7 +205,7 @@ public abstract class PatternDSL implements DSLNode {
 
     protected Set<String> getSettableWatchedProps() {
         Set<String> watchedProps = new HashSet<>();
-        watchedProps.addAll(context.getRuleDescr().lookAheadFieldsOfIdentifier(pattern));
+        watchedProps.addAll(pattern.lookAheadFieldsOfIdentifier(context.getRuleDescr()));
         watchedProps.addAll(getPatternListenedProperties(pattern));
 
         if (watchedProps.isEmpty()) {
diff --git a/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/marshaller/JPAPlaceholderResolverStrategy.java b/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/marshaller/JPAPlaceholderResolverStrategy.java
index 89c633c..2173410 100644
--- a/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/marshaller/JPAPlaceholderResolverStrategy.java
+++ b/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/marshaller/JPAPlaceholderResolverStrategy.java
@@ -22,15 +22,11 @@ import java.io.IOException;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
 import java.io.Serializable;
-import java.lang.reflect.Field;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
 import java.util.HashSet;
 import java.util.Set;
 
 import javax.persistence.EntityManager;
 import javax.persistence.EntityManagerFactory;
-import javax.persistence.Id;
 import javax.persistence.Persistence;
 import javax.persistence.metamodel.EntityType;
 import javax.persistence.metamodel.Metamodel;
@@ -242,7 +238,7 @@ public class JPAPlaceholderResolverStrategy implements ObjectMarshallingStrategy
 
             MappedVariable mappedVariable = new MappedVariable(((Number)entityId).longValue(), entityType, processContext.getProcessInstanceId(), processContext.getTaskId(), processContext.getWorkItemId());
             if (processContext.getState() == ProcessMarshallerWriteContext.STATE_ACTIVE) {
-                variableEntity.addMappedVariables(mappedVariable);
+                mappedVariable.addMappedVariables(variableEntity);
             } else {
                 MappedVariable toBeRemoved = variableEntity.findMappedVariables(mappedVariable);
                 if (toBeRemoved != null) {
diff --git a/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/marshaller/MappedVariable.java b/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/marshaller/MappedVariable.java
index ed4c5ab..a197ecb 100644
--- a/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/marshaller/MappedVariable.java
+++ b/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/marshaller/MappedVariable.java
@@ -17,6 +17,7 @@
 package org.drools.persistence.jpa.marshaller;
 
 import java.io.Serializable;
+import java.util.HashSet;
 import javax.persistence.Column;
 import javax.persistence.Entity;
 import javax.persistence.GeneratedValue;
@@ -150,4 +151,11 @@ public class MappedVariable implements Serializable {
         result = 31 * result + (workItemId != null ? workItemId.hashCode() : 0);
         return result;
     }
+
+    public void addMappedVariables(VariableEntity variableEntity) {
+        if (variableEntity.getMappedVariables() == null) {
+            variableEntity.setMappedVariables(new HashSet<MappedVariable>());
+        }
+        variableEntity.getMappedVariables().add(this);
+    }
 }
diff --git a/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/marshaller/VariableEntity.java b/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/marshaller/VariableEntity.java
index 1d35280..e9e33a0 100644
--- a/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/marshaller/VariableEntity.java
+++ b/drools-persistence/drools-persistence-jpa/src/main/java/org/drools/persistence/jpa/marshaller/VariableEntity.java
@@ -17,7 +17,6 @@
 package org.drools.persistence.jpa.marshaller;
 
 import java.io.Serializable;
-import java.util.HashSet;
 import java.util.Set;
 import javax.persistence.CascadeType;
 import javax.persistence.JoinColumn;
@@ -40,13 +39,6 @@ public abstract class VariableEntity implements Serializable {
         this.mappedVariables = mappedVariables;
     }
 
-    public void addMappedVariables(MappedVariable mappedVariable) {
-        if (this.mappedVariables == null) {
-            this.mappedVariables = new HashSet<MappedVariable>();
-        }
-        this.mappedVariables.add(mappedVariable);
-    }
-
     public void removeMappedVariables(MappedVariable mappedVariable) {
         if (this.mappedVariables == null) {
             return;
diff --git a/drools-scenario-simulation/drools-scenario-simulation-api/src/main/java/org/drools/scenariosimulation/api/model/ExpressionIdentifier.java b/drools-scenario-simulation/drools-scenario-simulation-api/src/main/java/org/drools/scenariosimulation/api/model/ExpressionIdentifier.java
index 0feb93f..7eaf04c 100644
--- a/drools-scenario-simulation/drools-scenario-simulation-api/src/main/java/org/drools/scenariosimulation/api/model/ExpressionIdentifier.java
+++ b/drools-scenario-simulation/drools-scenario-simulation-api/src/main/java/org/drools/scenariosimulation/api/model/ExpressionIdentifier.java
@@ -25,6 +25,13 @@ public class ExpressionIdentifier {
     private String name;
     private FactMappingType type;
 
+    public FactMappingValue addOrUpdateMappingValue(FactIdentifier factIdentifier, Object value, Scenario scenario) {
+        return scenario.getFactMappingValue(factIdentifier, this).map(e -> {
+            e.setRawValue(value);
+            return e;
+        }).orElseGet(() -> scenario.addMappingValue(factIdentifier, this, value));
+    }
+
     public enum NAME {
         Description,
         Expected,
diff --git a/drools-scenario-simulation/drools-scenario-simulation-api/src/main/java/org/drools/scenariosimulation/api/model/FactIdentifier.java b/drools-scenario-simulation/drools-scenario-simulation-api/src/main/java/org/drools/scenariosimulation/api/model/FactIdentifier.java
index f8146c1..404e3c1 100644
--- a/drools-scenario-simulation/drools-scenario-simulation-api/src/main/java/org/drools/scenariosimulation/api/model/FactIdentifier.java
+++ b/drools-scenario-simulation/drools-scenario-simulation-api/src/main/java/org/drools/scenariosimulation/api/model/FactIdentifier.java
@@ -16,6 +16,7 @@
 package org.drools.scenariosimulation.api.model;
 
 import java.util.Objects;
+import java.util.stream.IntStream;
 
 /**
  * A fact is identified by its name and the canonical name of its class
@@ -82,4 +83,14 @@ public class FactIdentifier {
     public int hashCode() {
         return Objects.hash(name, className);
     }
+
+    public int getIndexByIdentifier(ExpressionIdentifier expressionIdentifier, SimulationDescriptor simulationDescriptor) {
+        return IntStream.range(0, simulationDescriptor.getFactMappings().size()).filter(index -> {
+            FactMapping factMapping = simulationDescriptor.getFactMappings().get(index);
+            return factMapping.getExpressionIdentifier().equals(expressionIdentifier) &&
+                    factMapping.getFactIdentifier().equals(this);
+        }).findFirst().orElseThrow(() -> new IllegalArgumentException(
+                new StringBuilder().append("Impossible to find a FactMapping with factIdentifier '").append(getName())
+                        .append("' and expressionIdentifier '").append(expressionIdentifier.getName()).append("'").toString()));
+    }
 }
diff --git a/drools-scenario-simulation/drools-scenario-simulation-api/src/main/java/org/drools/scenariosimulation/api/model/Scenario.java b/drools-scenario-simulation/drools-scenario-simulation-api/src/main/java/org/drools/scenariosimulation/api/model/Scenario.java
index a83bc46..a7884a8 100644
--- a/drools-scenario-simulation/drools-scenario-simulation-api/src/main/java/org/drools/scenariosimulation/api/model/Scenario.java
+++ b/drools-scenario-simulation/drools-scenario-simulation-api/src/main/java/org/drools/scenariosimulation/api/model/Scenario.java
@@ -76,13 +76,6 @@ public class Scenario {
         return factMappingValue;
     }
 
-    public FactMappingValue addOrUpdateMappingValue(FactIdentifier factIdentifier, ExpressionIdentifier expressionIdentifier, Object value) {
-        return getFactMappingValue(factIdentifier, expressionIdentifier).map(e -> {
-            e.setRawValue(value);
-            return e;
-        }).orElseGet(() -> addMappingValue(factIdentifier, expressionIdentifier, value));
-    }
-
     public Optional<FactMappingValue> getFactMappingValue(FactIdentifier factIdentifier, ExpressionIdentifier expressionIdentifier) {
         return factMappingValues.stream().filter(e -> e.getFactIdentifier().equals(factIdentifier) &&
                 e.getExpressionIdentifier().equals(expressionIdentifier)).findFirst();
@@ -97,7 +90,7 @@ public class Scenario {
     }
 
     public void setDescription(String name) {
-        addOrUpdateMappingValue(FactIdentifier.DESCRIPTION, ExpressionIdentifier.DESCRIPTION, name);
+        ExpressionIdentifier.DESCRIPTION.addOrUpdateMappingValue(FactIdentifier.DESCRIPTION, name, this);
     }
 
     public String getDescription() {
diff --git a/drools-scenario-simulation/drools-scenario-simulation-api/src/main/java/org/drools/scenariosimulation/api/model/SimulationDescriptor.java b/drools-scenario-simulation/drools-scenario-simulation-api/src/main/java/org/drools/scenariosimulation/api/model/SimulationDescriptor.java
index 4cd2205..4f11a93 100644
--- a/drools-scenario-simulation/drools-scenario-simulation-api/src/main/java/org/drools/scenariosimulation/api/model/SimulationDescriptor.java
+++ b/drools-scenario-simulation/drools-scenario-simulation-api/src/main/java/org/drools/scenariosimulation/api/model/SimulationDescriptor.java
@@ -22,7 +22,6 @@ import java.util.Optional;
 import java.util.Set;
 import java.util.function.Predicate;
 import java.util.stream.Collectors;
-import java.util.stream.IntStream;
 
 /**
  * SimulationDescriptor describes a template of a simulation
@@ -173,16 +172,6 @@ public class SimulationDescriptor {
         factMappings.remove(toRemove);
     }
 
-    public int getIndexByIdentifier(FactIdentifier factIdentifier, ExpressionIdentifier expressionIdentifier) {
-        return IntStream.range(0, factMappings.size()).filter(index -> {
-            FactMapping factMapping = factMappings.get(index);
-            return factMapping.getExpressionIdentifier().equals(expressionIdentifier) &&
-                    factMapping.getFactIdentifier().equals(factIdentifier);
-        }).findFirst().orElseThrow(() -> new IllegalArgumentException(
-                new StringBuilder().append("Impossible to find a FactMapping with factIdentifier '").append(factIdentifier.getName())
-                        .append("' and expressionIdentifier '").append(expressionIdentifier.getName()).append("'").toString()));
-    }
-
     public List<FactMapping> getFactMappingsByFactName(String factName) {
         return internalFilter(e -> e.getFactIdentifier().getName().equalsIgnoreCase(factName));
     }
diff --git a/drools-scenario-simulation/drools-scenario-simulation-api/src/test/java/org/drools/scenariosimulation/api/model/ScenarioTest.java b/drools-scenario-simulation/drools-scenario-simulation-api/src/test/java/org/drools/scenariosimulation/api/model/ScenarioTest.java
index 0ad0119..4b64b31 100644
--- a/drools-scenario-simulation/drools-scenario-simulation-api/src/test/java/org/drools/scenariosimulation/api/model/ScenarioTest.java
+++ b/drools-scenario-simulation/drools-scenario-simulation-api/src/test/java/org/drools/scenariosimulation/api/model/ScenarioTest.java
@@ -87,7 +87,7 @@ public class ScenarioTest {
         Object value2 = "Test 2";
         FactMappingValue factMappingValue = scenario.addMappingValue(factIdentifier, expressionIdentifier, value1);
         assertEquals(factMappingValue.getRawValue(), value1);
-        FactMappingValue factMappingValue1 = scenario.addOrUpdateMappingValue(factIdentifier, expressionIdentifier, value2);
+        FactMappingValue factMappingValue1 = expressionIdentifier.addOrUpdateMappingValue(factIdentifier, value2, scenario);
         assertEquals(factMappingValue, factMappingValue1);
         assertEquals(factMappingValue1.getRawValue(), value2);
     }
diff --git a/drools-scenario-simulation/drools-scenario-simulation-api/src/test/java/org/drools/scenariosimulation/api/model/SimulationDescriptorTest.java b/drools-scenario-simulation/drools-scenario-simulation-api/src/test/java/org/drools/scenariosimulation/api/model/SimulationDescriptorTest.java
index 0cf37de..5d5c124 100644
--- a/drools-scenario-simulation/drools-scenario-simulation-api/src/test/java/org/drools/scenariosimulation/api/model/SimulationDescriptorTest.java
+++ b/drools-scenario-simulation/drools-scenario-simulation-api/src/test/java/org/drools/scenariosimulation/api/model/SimulationDescriptorTest.java
@@ -79,10 +79,10 @@ public class SimulationDescriptorTest {
                         .addFactMapping(FactIdentifier.create("test " + i, String.class.getCanonicalName()), this.expressionIdentifier)
                 ).collect(Collectors.toList());
         int indexToCheck = 0;
-        int indexRetrieved = simulationDescriptor.getIndexByIdentifier(originalFactMappings.get(indexToCheck).getFactIdentifier(), this.expressionIdentifier);
+        int indexRetrieved = originalFactMappings.get(indexToCheck).getFactIdentifier().getIndexByIdentifier(this.expressionIdentifier, simulationDescriptor);
         assertEquals(indexToCheck, indexRetrieved);
         indexToCheck = 1;
-        indexRetrieved = simulationDescriptor.getIndexByIdentifier(originalFactMappings.get(indexToCheck).getFactIdentifier(), this.expressionIdentifier);
+        indexRetrieved = originalFactMappings.get(indexToCheck).getFactIdentifier().getIndexByIdentifier(this.expressionIdentifier, simulationDescriptor);
         assertEquals(indexToCheck, indexRetrieved);
     }
 
diff --git a/drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/runner/RuleScenarioRunnerHelperTest.java b/drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/runner/RuleScenarioRunnerHelperTest.java
index fdec627..4860245 100644
--- a/drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/runner/RuleScenarioRunnerHelperTest.java
+++ b/drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/runner/RuleScenarioRunnerHelperTest.java
@@ -132,9 +132,8 @@ public class RuleScenarioRunnerHelperTest {
         List<ScenarioExpect> scenario1Outputs = runnerHelper.extractExpectedValues(scenario1.getUnmodifiableFactMappingValues());
         assertEquals(1, scenario1Outputs.size());
 
-        scenario2.addOrUpdateMappingValue(FactIdentifier.create("TEST", String.class.getCanonicalName()),
-                                          ExpressionIdentifier.create("TEST", FactMappingType.EXPECT),
-                                          "TEST");
+        ExpressionIdentifier.create("TEST", FactMappingType.EXPECT).addOrUpdateMappingValue(FactIdentifier.create("TEST", String.class.getCanonicalName()),
+                "TEST", scenario2);
         List<ScenarioExpect> scenario2Outputs = runnerHelper.extractExpectedValues(scenario2.getUnmodifiableFactMappingValues());
         assertEquals(3, scenario2Outputs.size());
         assertEquals(1, scenario2Outputs.stream().filter(ScenarioExpect::isNewFact).count());
diff --git a/drools-templates/src/main/java/org/drools/template/model/DRLOutput.java b/drools-templates/src/main/java/org/drools/template/model/DRLOutput.java
index a9d326f..5c5d60f 100644
--- a/drools-templates/src/main/java/org/drools/template/model/DRLOutput.java
+++ b/drools-templates/src/main/java/org/drools/template/model/DRLOutput.java
@@ -17,6 +17,7 @@
 package org.drools.template.model;
 
 import java.io.StringWriter;
+import java.util.List;
 
 /**
  * This contains the DRL output that each piece of the parser spreadsheet will contribute to
@@ -46,4 +47,9 @@ public class DRLOutput {
         return getDRL();
     }
 
+    public void renderDRL(final List<? extends DRLJavaEmitter> list, Rule rule) {
+        for (DRLJavaEmitter item : list) {
+            item.renderDRL(this);
+        }
+    }
 }
diff --git a/drools-templates/src/main/java/org/drools/template/model/Rule.java b/drools-templates/src/main/java/org/drools/template/model/Rule.java
index b0a2eff..ef4f322 100644
--- a/drools-templates/src/main/java/org/drools/template/model/Rule.java
+++ b/drools-templates/src/main/java/org/drools/template/model/Rule.java
@@ -87,19 +87,12 @@ public class Rule extends AttributedDRLElement
         super.renderDRL(out);
 
         out.writeLine("\twhen");
-        renderDRL(this._lhs, out);
+        out.renderDRL(this._lhs, this);
         out.writeLine("\tthen");
-        renderDRL(this._rhs, out);
+        out.renderDRL(this._rhs, this);
         out.writeLine("end\n");
     }
 
-    private void renderDRL(final List<? extends DRLJavaEmitter> list,
-                           final DRLOutput out) {
-        for (DRLJavaEmitter item : list) {
-            item.renderDRL(out);
-        }
-    }
-
     public List<String> getMetadata() {
         return this._metadata;
     }
diff --git a/drools-templates/src/main/java/org/drools/template/parser/DefaultTemplateRuleBase.java b/drools-templates/src/main/java/org/drools/template/parser/DefaultTemplateRuleBase.java
index eff8b04..00e1fab 100644
--- a/drools-templates/src/main/java/org/drools/template/parser/DefaultTemplateRuleBase.java
+++ b/drools-templates/src/main/java/org/drools/template/parser/DefaultTemplateRuleBase.java
@@ -92,17 +92,11 @@ public class DefaultTemplateRuleBase implements TemplateRuleBase {
         Condition condition = new Condition();
         condition.setSnippet("r : Row()");
         rule.addCondition(condition);
-        createColumnConditions(template, rule);
+        template.createColumnConditions(rule, this);
         rule.addConsequence(createConsequence(template));
         p.addRule(rule);
     }
 
-    private void createColumnConditions(RuleTemplate template, Rule rule) {
-        for (TemplateColumn column : template.getColumns()) {
-            column.addCondition(rule);
-        }
-    }
-
 
     private void addGlobals(org.drools.template.model.Package p) {
         Global global = new Global();
diff --git a/drools-templates/src/main/java/org/drools/template/parser/RuleTemplate.java b/drools-templates/src/main/java/org/drools/template/parser/RuleTemplate.java
index 8751cff..475e6b8 100644
--- a/drools-templates/src/main/java/org/drools/template/parser/RuleTemplate.java
+++ b/drools-templates/src/main/java/org/drools/template/parser/RuleTemplate.java
@@ -17,6 +17,7 @@
 package org.drools.template.parser;
 
 import org.drools.core.util.StringUtils;
+import org.drools.template.model.Rule;
 
 import java.io.BufferedReader;
 import java.io.IOException;
@@ -132,4 +133,9 @@ public class RuleTemplate {
         return columnNames;
     }
 
+    public void createColumnConditions(Rule rule, DefaultTemplateRuleBase defaultTemplateRuleBase) {
+        for (TemplateColumn column : getColumns()) {
+            column.addCondition(rule);
+        }
+    }
 }
diff --git a/drools-test-coverage/test-compiler-integration/src/test/java/org/drools/compiler/integrationtests/CepEspTest.java b/drools-test-coverage/test-compiler-integration/src/test/java/org/drools/compiler/integrationtests/CepEspTest.java
index 568bb77..cf8caf7 100644
--- a/drools-test-coverage/test-compiler-integration/src/test/java/org/drools/compiler/integrationtests/CepEspTest.java
+++ b/drools-test-coverage/test-compiler-integration/src/test/java/org/drools/compiler/integrationtests/CepEspTest.java
@@ -504,7 +504,7 @@ public class CepEspTest extends AbstractCepEspTest {
 
         final KieBase kbase = KieBaseUtil.getKieBaseFromKieModuleFromDrl("cep-esp-test", kieBaseTestConfiguration, drl);
 
-        final Map<ObjectType, ObjectTypeNode> objectTypeNodes = ((KnowledgeBaseImpl) kbase).getRete().getObjectTypeNodes(EntryPointId.DEFAULT);
+        final Map<ObjectType, ObjectTypeNode> objectTypeNodes = EntryPointId.DEFAULT.getObjectTypeNodes(((KnowledgeBaseImpl) kbase).getRete());
         final ObjectTypeNode node = objectTypeNodes.get(new ClassObjectType(StockTick.class));
 
         assertNotNull(node);
diff --git a/drools-verifier/drools-verifier-core/src/main/java/org/drools/verifier/core/cache/RuleInspectorCache.java b/drools-verifier/drools-verifier-core/src/main/java/org/drools/verifier/core/cache/RuleInspectorCache.java
index cf6e80b..db76413 100644
--- a/drools-verifier/drools-verifier-core/src/main/java/org/drools/verifier/core/cache/RuleInspectorCache.java
+++ b/drools-verifier/drools-verifier-core/src/main/java/org/drools/verifier/core/cache/RuleInspectorCache.java
@@ -129,8 +129,7 @@ public class RuleInspectorCache {
 
         final RuleInspector remove = ruleInspectors.remove(rule);
 
-        index.getRules()
-                .remove(rule);
+        rule.remove(index.getRules());
 
         return remove;
     }
diff --git a/drools-verifier/drools-verifier-core/src/main/java/org/drools/verifier/core/cache/inspectors/RuleInspector.java b/drools-verifier/drools-verifier-core/src/main/java/org/drools/verifier/core/cache/inspectors/RuleInspector.java
index 3a439c7..680877c 100644
--- a/drools-verifier/drools-verifier-core/src/main/java/org/drools/verifier/core/cache/inspectors/RuleInspector.java
+++ b/drools-verifier/drools-verifier-core/src/main/java/org/drools/verifier/core/cache/inspectors/RuleInspector.java
@@ -17,6 +17,7 @@
 package org.drools.verifier.core.cache.inspectors;
 
 import java.util.Collection;
+import java.util.List;
 import java.util.Set;
 
 import org.drools.verifier.core.cache.RuleInspectorCache;
@@ -26,22 +27,13 @@ import org.drools.verifier.core.cache.inspectors.action.BRLActionInspector;
 import org.drools.verifier.core.cache.inspectors.condition.BRLConditionInspector;
 import org.drools.verifier.core.cache.inspectors.condition.ConditionInspector;
 import org.drools.verifier.core.cache.inspectors.condition.ConditionsInspectorMultiMap;
+import org.drools.verifier.core.checks.SingleRangeCheck;
 import org.drools.verifier.core.checks.base.Check;
 import org.drools.verifier.core.checks.base.CheckStorage;
 import org.drools.verifier.core.configuration.AnalyzerConfiguration;
 import org.drools.verifier.core.index.keys.Key;
 import org.drools.verifier.core.index.keys.UUIDKey;
-import org.drools.verifier.core.index.model.Action;
-import org.drools.verifier.core.index.model.ActionSuperType;
-import org.drools.verifier.core.index.model.BRLAction;
-import org.drools.verifier.core.index.model.BRLCondition;
-import org.drools.verifier.core.index.model.Condition;
-import org.drools.verifier.core.index.model.ConditionSuperType;
-import org.drools.verifier.core.index.model.Conditions;
-import org.drools.verifier.core.index.model.Field;
-import org.drools.verifier.core.index.model.FieldCondition;
-import org.drools.verifier.core.index.model.Pattern;
-import org.drools.verifier.core.index.model.Rule;
+import org.drools.verifier.core.index.model.*;
 import org.drools.verifier.core.index.select.AllListener;
 import org.drools.verifier.core.maps.InspectorList;
 import org.drools.verifier.core.maps.util.HasKeys;
@@ -370,4 +362,8 @@ public class RuleInspector
     public Set<Check> clearChecks() {
         return checkStorage.remove(this);
     }
+
+    public List<ConditionInspector> getConditions(ObjectField field, int conditionIndex, SingleRangeCheck singleRangeCheck) {
+        return getConditionsInspectors() != null ? getConditionsInspectors().get(conditionIndex).get(field) : null;
+    }
 }
diff --git a/drools-verifier/drools-verifier-core/src/main/java/org/drools/verifier/core/checks/SingleRangeCheck.java b/drools-verifier/drools-verifier-core/src/main/java/org/drools/verifier/core/checks/SingleRangeCheck.java
index 5f8ffde..f50a48f 100644
--- a/drools-verifier/drools-verifier-core/src/main/java/org/drools/verifier/core/checks/SingleRangeCheck.java
+++ b/drools-verifier/drools-verifier-core/src/main/java/org/drools/verifier/core/checks/SingleRangeCheck.java
@@ -239,19 +239,15 @@ public class SingleRangeCheck extends CheckBase {
     }
 
     private Object getValue(RuleInspector rule, ObjectField field, int conditionIndex) {
-        List<ConditionInspector> conditions = getConditions(rule, field, conditionIndex);
+        List<ConditionInspector> conditions = rule.getConditions(field, conditionIndex, this);
         return conditions != null ? conditions.get(0).getCondition().getValues().iterator().next() : null;
     }
 
     private Stream<ConditionInspector> getConditionStream(RuleInspector rule, ObjectField field, int conditionIndex) {
-        List<ConditionInspector> conditionInspectors = getConditions(rule, field, conditionIndex);
+        List<ConditionInspector> conditionInspectors = rule.getConditions(field, conditionIndex, this);
         return conditionInspectors != null ? conditionInspectors.stream() : Stream.empty();
     }
 
-    private List<ConditionInspector> getConditions(RuleInspector rule, ObjectField field, int conditionIndex) {
-        return rule.getConditionsInspectors() != null ? rule.getConditionsInspectors().get(conditionIndex).get(field) : null;
-    }
-
     private static class PartitionKey {
 
         private static PartitionKey EMPTY_KEY = new PartitionKey(new Object[0]);
diff --git a/drools-verifier/drools-verifier-core/src/main/java/org/drools/verifier/core/index/model/Column.java b/drools-verifier/drools-verifier-core/src/main/java/org/drools/verifier/core/index/model/Column.java
index 211b96f..5972bb9 100644
--- a/drools-verifier/drools-verifier-core/src/main/java/org/drools/verifier/core/index/model/Column.java
+++ b/drools-verifier/drools-verifier-core/src/main/java/org/drools/verifier/core/index/model/Column.java
@@ -89,4 +89,9 @@ public class Column
                           this);
         }
     }
+
+    public void remove(Field field) {
+        field.getConditions().remove(this);
+        field.getActions().remove(this);
+    }
 }
diff --git a/drools-verifier/drools-verifier-core/src/main/java/org/drools/verifier/core/index/model/Field.java b/drools-verifier/drools-verifier-core/src/main/java/org/drools/verifier/core/index/model/Field.java
index d4b02dd..5fe7a8f 100644
--- a/drools-verifier/drools-verifier-core/src/main/java/org/drools/verifier/core/index/model/Field.java
+++ b/drools-verifier/drools-verifier-core/src/main/java/org/drools/verifier/core/index/model/Field.java
@@ -50,8 +50,4 @@ public class Field
         return actions;
     }
 
-    public void remove(final Column column) {
-        this.conditions.remove(column);
-        this.actions.remove(column);
-    }
 }
diff --git a/drools-verifier/drools-verifier-core/src/main/java/org/drools/verifier/core/index/model/Rule.java b/drools-verifier/drools-verifier-core/src/main/java/org/drools/verifier/core/index/model/Rule.java
index debd156..5cc8d5e 100644
--- a/drools-verifier/drools-verifier-core/src/main/java/org/drools/verifier/core/index/model/Rule.java
+++ b/drools-verifier/drools-verifier-core/src/main/java/org/drools/verifier/core/index/model/Rule.java
@@ -176,4 +176,8 @@ public class Rule
     public int hashCode() {
         return uuidKey.hashCode();
     }
+
+    public void remove(Rules rules) {
+        getUuidKey().retract();
+    }
 }
\ No newline at end of file
diff --git a/drools-verifier/drools-verifier-core/src/main/java/org/drools/verifier/core/index/model/Rules.java b/drools-verifier/drools-verifier-core/src/main/java/org/drools/verifier/core/index/model/Rules.java
index 18a6656..0089120 100644
--- a/drools-verifier/drools-verifier-core/src/main/java/org/drools/verifier/core/index/model/Rules.java
+++ b/drools-verifier/drools-verifier-core/src/main/java/org/drools/verifier/core/index/model/Rules.java
@@ -60,10 +60,6 @@ public class Rules {
                 rule.getIndex());
     }
 
-    public void remove(final Rule rule) {
-        rule.getUuidKey().retract();
-    }
-
     public class RulesSelect
             extends Select<Rule> {
 
diff --git a/drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceImpl.java b/drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceImpl.java
index c993e96..a137c74 100644
--- a/drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceImpl.java
+++ b/drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceImpl.java
@@ -609,8 +609,8 @@ public class RuleModelDRLPersistenceImpl
                 buf.append(">");
             }
 
-            final LHSGeneratorContext gctx = generatorContextFactory.newChildGeneratorContext(rootContext,
-                                                                                              pattern);
+            final LHSGeneratorContext gctx = rootContext.newChildGeneratorContext(
+                    pattern, generatorContextFactory);
             preGeneratePattern(gctx);
 
             generateFactPattern(pattern,
@@ -678,8 +678,8 @@ public class RuleModelDRLPersistenceImpl
             }
 
             if (pattern.getFactPattern() != null) {
-                final LHSGeneratorContext gctx = generatorContextFactory.newChildGeneratorContext(rootContext,
-                                                                                                  pattern.getFactPattern());
+                final LHSGeneratorContext gctx = rootContext.newChildGeneratorContext(
+                        pattern.getFactPattern(), generatorContextFactory);
 
                 final boolean _isSubPattern = gctx.getDepth() > 1;
 
@@ -713,8 +713,8 @@ public class RuleModelDRLPersistenceImpl
             }
 
             if (pattern.getFactPattern() != null) {
-                final LHSGeneratorContext gctx = generatorContextFactory.newChildGeneratorContext(rootContext,
-                                                                                                  pattern.getFactPattern());
+                final LHSGeneratorContext gctx = rootContext.newChildGeneratorContext(
+                        pattern.getFactPattern(), generatorContextFactory);
                 generateFactPattern(pattern.getFactPattern(),
                                     gctx);
 
@@ -767,8 +767,8 @@ public class RuleModelDRLPersistenceImpl
             }
 
             if (pattern.getFactPattern() != null) {
-                final LHSGeneratorContext gctx = generatorContextFactory.newChildGeneratorContext(rootContext,
-                                                                                                  pattern.getFactPattern());
+                final LHSGeneratorContext gctx = rootContext.newChildGeneratorContext(
+                        pattern.getFactPattern(), generatorContextFactory);
                 generateFactPattern(pattern.getFactPattern(),
                                     gctx);
 
@@ -850,8 +850,8 @@ public class RuleModelDRLPersistenceImpl
             }
 
             if (pattern.getFactPattern() != null) {
-                final LHSGeneratorContext gctx = generatorContextFactory.newChildGeneratorContext(rootContext,
-                                                                                                  pattern.getFactPattern());
+                final LHSGeneratorContext gctx = rootContext.newChildGeneratorContext(
+                        pattern.getFactPattern(), generatorContextFactory);
                 generateFactPattern(pattern.getFactPattern(),
                                     gctx);
                 buf.append(" from entry-point \"" + pattern.getEntryPointName() + "\"\n");
@@ -880,8 +880,8 @@ public class RuleModelDRLPersistenceImpl
             }
             IFactPattern subPattern = pattern.getPatterns()[subIndex];
             if (subPattern instanceof FactPattern) {
-                final LHSGeneratorContext gctx = generatorContextFactory.newChildGeneratorContext(rootContext,
-                                                                                                  subPattern);
+                final LHSGeneratorContext gctx = rootContext.newChildGeneratorContext(
+                        subPattern, generatorContextFactory);
                 this.generateFactPattern((FactPattern) subPattern,
                                          gctx);
             } else if (subPattern instanceof FromAccumulateCompositeFactPattern) {
@@ -900,7 +900,7 @@ public class RuleModelDRLPersistenceImpl
 
         private void renderExpression(final ExpressionFormLine expression) {
             final ToStringExpressionVisitor visitor = new ToStringExpressionVisitor(constraintValueBuilder);
-            buf.append(expression.getText(visitor));
+            buf.append(visitor.getTextOther(expression));
         }
 
         public void visitDSLSentence(final DSLSentence sentence) {
@@ -1050,7 +1050,7 @@ public class RuleModelDRLPersistenceImpl
                     if (constr instanceof SingleFieldConstraintEBLeftSide) {
                         final SingleFieldConstraintEBLeftSide sfcexp = ((SingleFieldConstraintEBLeftSide) constr);
                         final ToStringExpressionVisitor visitor = new ToStringExpressionVisitor(constraintValueBuilder);
-                        buf.append(sfcexp.getExpressionLeftSide().getText(visitor));
+                        buf.append(visitor.getTextOther(sfcexp.getExpressionLeftSide()));
                     } else {
                         SingleFieldConstraint parent = (SingleFieldConstraint) constr.getParent();
                         StringBuilder parentBuf = new StringBuilder();
@@ -1341,7 +1341,7 @@ public class RuleModelDRLPersistenceImpl
             if (expression != null) {
                 buf.append(" ");
                 final ToStringExpressionVisitor visitor = new ToStringExpressionVisitor(constraintValueBuilder);
-                buf.append(expression.getText(visitor));
+                buf.append(visitor.getTextOther(expression));
                 buf.append(" ");
             }
         }
@@ -1688,8 +1688,8 @@ public class RuleModelDRLPersistenceImpl
                     gctx = generatorContextFactory.newChildGeneratorContext(parentContext,
                                                                             fieldValue);
                 } else {
-                    gctx = generatorContextFactory.newPeerGeneratorContext(gctx,
-                                                                           fieldValue);
+                    gctx = gctx.newPeerGeneratorContext(
+                            fieldValue, generatorContextFactory);
                 }
 
                 preGenerateSetMethodCallParameterValue(gctx,
@@ -2309,7 +2309,7 @@ public class RuleModelDRLPersistenceImpl
             String value = normalizeAttributeValue(entry.getValue().getValue().trim());
             RuleAttribute ruleAttribute = new RuleAttribute(name,
                                                             value);
-            m.addAttribute(ruleAttribute);
+            ruleAttribute.addAttribute(m);
             isJavaDialect |= name.equals("dialect") && value.equals("java");
         }
         return isJavaDialect;
diff --git a/drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/context/GeneratorContextRuleModelVisitor.java b/drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/context/GeneratorContextRuleModelVisitor.java
index 4c72fe7..43f201f 100644
--- a/drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/context/GeneratorContextRuleModelVisitor.java
+++ b/drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/context/GeneratorContextRuleModelVisitor.java
@@ -231,7 +231,7 @@ public class GeneratorContextRuleModelVisitor {
     private void visitFromCompositeFactPattern(final FromCompositeFactPattern pattern) {
         visit(pattern.getFactPattern());
         ToStringExpressionVisitor visitor = new ToStringExpressionVisitor();
-        parseStringPattern(pattern.getExpression().getText(visitor));
+        parseStringPattern(visitor.getTextOther(pattern.getExpression()));
     }
 
     private void visitRuleModel(final RuleModel model) {
diff --git a/drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/context/LHSGeneratorContext.java b/drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/context/LHSGeneratorContext.java
index 407aa17..1f37aed 100644
--- a/drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/context/LHSGeneratorContext.java
+++ b/drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/context/LHSGeneratorContext.java
@@ -122,4 +122,12 @@ public class LHSGeneratorContext {
         return hasNonTemplateOutput;
     }
 
+    public LHSGeneratorContext newChildGeneratorContext(final IPattern pattern, LHSGeneratorContextFactory lhsGeneratorContextFactory) {
+        final LHSGeneratorContext gc = new LHSGeneratorContext(this,
+                                                               pattern,
+                                                               lhsGeneratorContextFactory.getMaximumDepth() + 1,
+                                                               0);
+        lhsGeneratorContextFactory.getGeneratorContexts().add(gc);
+        return gc;
+    }
 }
diff --git a/drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/context/LHSGeneratorContextFactory.java b/drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/context/LHSGeneratorContextFactory.java
index 38449e5..6692e19 100644
--- a/drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/context/LHSGeneratorContextFactory.java
+++ b/drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/context/LHSGeneratorContextFactory.java
@@ -19,7 +19,6 @@ import java.util.ArrayList;
 import java.util.List;
 
 import org.drools.workbench.models.datamodel.rule.FieldConstraint;
-import org.drools.workbench.models.datamodel.rule.IPattern;
 
 /**
  * Factory for Generator Contexts
@@ -35,16 +34,6 @@ public class LHSGeneratorContextFactory {
     }
 
     public LHSGeneratorContext newChildGeneratorContext(final LHSGeneratorContext parent,
-                                                        final IPattern pattern) {
-        final LHSGeneratorContext gc = new LHSGeneratorContext(parent,
-                                                               pattern,
-                                                               getMaximumDepth() + 1,
-                                                               0);
-        contexts.add(gc);
-        return gc;
-    }
-
-    public LHSGeneratorContext newChildGeneratorContext(final LHSGeneratorContext parent,
                                                         final FieldConstraint fieldConstraint) {
         final LHSGeneratorContext gc = new LHSGeneratorContext(parent,
                                                                fieldConstraint,
diff --git a/drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/context/RHSGeneratorContext.java b/drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/context/RHSGeneratorContext.java
index b217eeb..1d4a88e 100644
--- a/drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/context/RHSGeneratorContext.java
+++ b/drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/context/RHSGeneratorContext.java
@@ -117,4 +117,12 @@ public class RHSGeneratorContext {
         return hasNonTemplateOutput;
     }
 
+    public RHSGeneratorContext newPeerGeneratorContext(final ActionFieldValue afv, RHSGeneratorContextFactory rhsGeneratorContextFactory) {
+        final RHSGeneratorContext gc = new RHSGeneratorContext( getParent(),
+                                                                afv,
+                                                                getDepth(),
+                                                                getOffset() + 1 );
+        rhsGeneratorContextFactory.getGeneratorContexts().add( gc );
+        return gc;
+    }
 }
diff --git a/drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/context/RHSGeneratorContextFactory.java b/drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/context/RHSGeneratorContextFactory.java
index 6df3aeb..b8036ac 100644
--- a/drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/context/RHSGeneratorContextFactory.java
+++ b/drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/context/RHSGeneratorContextFactory.java
@@ -54,16 +54,6 @@ public class RHSGeneratorContextFactory {
         return gc;
     }
 
-    public RHSGeneratorContext newPeerGeneratorContext( final RHSGeneratorContext peer,
-                                                        final ActionFieldValue afv ) {
-        final RHSGeneratorContext gc = new RHSGeneratorContext( peer.getParent(),
-                                                                afv,
-                                                                peer.getDepth(),
-                                                                peer.getOffset() + 1 );
-        contexts.add( gc );
-        return gc;
-    }
-
     public List<RHSGeneratorContext> getGeneratorContexts() {
         return contexts;
     }
diff --git a/drools-workbench-models/drools-workbench-models-commons/src/test/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceTest.java b/drools-workbench-models/drools-workbench-models-commons/src/test/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceTest.java
index 8e4e069..359ec4f 100644
--- a/drools-workbench-models/drools-workbench-models-commons/src/test/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceTest.java
+++ b/drools-workbench-models/drools-workbench-models-commons/src/test/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceTest.java
@@ -265,8 +265,8 @@ public class RuleModelDRLPersistenceTest extends BaseRuleModelTest {
         RuleModel m = new RuleModel();
         m.addLhsItem(new FactPattern("Person"));
         m.addLhsItem(new FactPattern("Accident"));
-        m.addAttribute(new RuleAttribute("no-loop",
-                                         "true"));
+        new RuleAttribute("no-loop",
+                                         "true").addAttribute(m);
 
         m.addRhsItem(new ActionInsertFact("Report"));
         m.name = "my rule";
@@ -282,8 +282,8 @@ public class RuleModelDRLPersistenceTest extends BaseRuleModelTest {
         final RuleModel m = new RuleModel();
         m.addLhsItem(new FactPattern("Person"));
         m.addLhsItem(new FactPattern("Accident"));
-        m.addAttribute(new RuleAttribute("no-loop",
-                                         "true"));
+        new RuleAttribute("no-loop",
+                                         "true").addAttribute(m);
 
         m.addRhsItem(new ActionInsertLogicalFact("Report"));
 
@@ -869,12 +869,12 @@ public class RuleModelDRLPersistenceTest extends BaseRuleModelTest {
         m.name = "Complex Rule";
         m.setPackageName("org.test");
 
-        m.addAttribute(new RuleAttribute("no-loop",
-                                         "true"));
-        m.addAttribute(new RuleAttribute("salience",
-                                         "-10"));
-        m.addAttribute(new RuleAttribute("agenda-group",
-                                         "aGroup"));
+        new RuleAttribute("no-loop",
+                                         "true").addAttribute(m);
+        new RuleAttribute("salience",
+                                         "-10").addAttribute(m);
+        new RuleAttribute("agenda-group",
+                                         "aGroup").addAttribute(m);
 
         final FactPattern pat = new FactPattern("Person");
         pat.setBoundName("p1");
@@ -1591,8 +1591,8 @@ public class RuleModelDRLPersistenceTest extends BaseRuleModelTest {
         RuleModel m = new RuleModel();
         m.name = "test literal bigdecimal";
 
-        m.addAttribute(new RuleAttribute("dialect",
-                                         "mvel"));
+        new RuleAttribute("dialect",
+                                         "mvel").addAttribute(m);
 
         FactPattern p = new FactPattern("Person");
         SingleFieldConstraint con = new SingleFieldConstraint();
@@ -1630,8 +1630,8 @@ public class RuleModelDRLPersistenceTest extends BaseRuleModelTest {
         RuleModel m = new RuleModel();
         m.name = "test literal biginteger";
 
-        m.addAttribute(new RuleAttribute("dialect",
-                                         "mvel"));
+        new RuleAttribute("dialect",
+                                         "mvel").addAttribute(m);
 
         FactPattern p = new FactPattern("Person");
         SingleFieldConstraint con = new SingleFieldConstraint();
@@ -1669,8 +1669,8 @@ public class RuleModelDRLPersistenceTest extends BaseRuleModelTest {
         RuleModel m = new RuleModel();
         m.name = "test literal bigdecimal";
 
-        m.addAttribute(new RuleAttribute("dialect",
-                                         "java"));
+        new RuleAttribute("dialect",
+                                         "java").addAttribute(m);
 
         FactPattern p = new FactPattern("Person");
         SingleFieldConstraint con = new SingleFieldConstraint();
@@ -1708,8 +1708,8 @@ public class RuleModelDRLPersistenceTest extends BaseRuleModelTest {
         RuleModel m = new RuleModel();
         m.name = "test literal biginteger";
 
-        m.addAttribute(new RuleAttribute("dialect",
-                                         "java"));
+        new RuleAttribute("dialect",
+                                         "java").addAttribute(m);
 
         FactPattern p = new FactPattern("Person");
         SingleFieldConstraint con = new SingleFieldConstraint();
@@ -2917,8 +2917,8 @@ public class RuleModelDRLPersistenceTest extends BaseRuleModelTest {
         String s = RuleModelDRLPersistenceImpl.getInstance().marshal(m);
         assertTrue(s.indexOf("mvel") > -1);
 
-        m.addAttribute(new RuleAttribute("dialect",
-                                         "goober"));
+        new RuleAttribute("dialect",
+                                         "goober").addAttribute(m);
         s = RuleModelDRLPersistenceImpl.getInstance().marshal(m);
         assertFalse(s.indexOf("mvel") > -1);
         assertTrue(s.indexOf("goober") > -1);
@@ -2928,12 +2928,12 @@ public class RuleModelDRLPersistenceTest extends BaseRuleModelTest {
     public void testLockOnActive() {
         RuleModel m = new RuleModel();
 
-        m.addAttribute(new RuleAttribute("lock-on-active",
-                                         "true"));
-        m.addAttribute(new RuleAttribute("auto-focus",
-                                         "true"));
-        m.addAttribute(new RuleAttribute("duration",
-                                         "42"));
+        new RuleAttribute("lock-on-active",
+                                         "true").addAttribute(m);
+        new RuleAttribute("auto-focus",
+                                         "true").addAttribute(m);
+        new RuleAttribute("duration",
+                                         "42").addAttribute(m);
 
         String s = RuleModelDRLPersistenceImpl.getInstance().marshal(m);
 
@@ -2952,8 +2952,8 @@ public class RuleModelDRLPersistenceTest extends BaseRuleModelTest {
         final RuleModel m = new RuleModel();
         m.addLhsItem(new FactPattern("Person"));
         m.addLhsItem(new FactPattern("Accident"));
-        m.addAttribute(new RuleAttribute("no-loop",
-                                         "true"));
+        new RuleAttribute("no-loop",
+                                         "true").addAttribute(m);
 
         m.addRhsItem(new ActionInsertFact("Report"));
         ActionGlobalCollectionAdd add = new ActionGlobalCollectionAdd();
@@ -3209,8 +3209,8 @@ public class RuleModelDRLPersistenceTest extends BaseRuleModelTest {
 
             RuleModel m = new RuleModel();
             m.name = "RHS SetMethodCallsMethod";
-            m.addAttribute(new RuleAttribute("dialect",
-                                             "mvel"));
+            new RuleAttribute("dialect",
+                                             "mvel").addAttribute(m);
 
             FactPattern p = new FactPattern("Person");
             p.setBoundName("$p");
@@ -3265,8 +3265,8 @@ public class RuleModelDRLPersistenceTest extends BaseRuleModelTest {
 
             RuleModel m = new RuleModel();
             m.name = "RHS SetMethodCallsMethod";
-            m.addAttribute(new RuleAttribute("dialect",
-                                             "java"));
+            new RuleAttribute("dialect",
+                                             "java").addAttribute(m);
 
             FactPattern p = new FactPattern("Person");
             p.setBoundName("$p");
@@ -3861,8 +3861,8 @@ public class RuleModelDRLPersistenceTest extends BaseRuleModelTest {
         final RuleModel m = new RuleModel();
         m.addLhsItem(new FactPattern("Person"));
         m.addLhsItem(new FactPattern("Accident"));
-        m.addAttribute(new RuleAttribute("no-loop",
-                                         "true"));
+        new RuleAttribute("no-loop",
+                                         "true").addAttribute(m);
 
         m.addRhsItem(new ActionInsertFact("Report"));
         ActionGlobalCollectionAdd ag = new ActionGlobalCollectionAdd();
@@ -4169,8 +4169,8 @@ public class RuleModelDRLPersistenceTest extends BaseRuleModelTest {
     public void testRHSFactBindingZeroBound() {
 
         RuleModel m = new RuleModel();
-        m.addAttribute(new RuleAttribute("dialect",
-                                         "mvel"));
+        new RuleAttribute("dialect",
+                                         "mvel").addAttribute(m);
         m.name = "test";
 
         ActionInsertFact ai0 = new ActionInsertFact("Person");
diff --git a/drools-workbench-models/drools-workbench-models-commons/src/test/java/org/drools/workbench/models/commons/backend/rule/RuleModelTest.java b/drools-workbench-models/drools-workbench-models-commons/src/test/java/org/drools/workbench/models/commons/backend/rule/RuleModelTest.java
index a1e41d6..b644e71 100644
--- a/drools-workbench-models/drools-workbench-models-commons/src/test/java/org/drools/workbench/models/commons/backend/rule/RuleModelTest.java
+++ b/drools-workbench-models/drools-workbench-models-commons/src/test/java/org/drools/workbench/models/commons/backend/rule/RuleModelTest.java
@@ -151,7 +151,7 @@ public class RuleModelTest {
         final RuleModel m = new RuleModel();
         final RuleAttribute at = new RuleAttribute( "salience",
                 "42" );
-        m.addAttribute( at );
+        at.addAttribute(m);
         assertEquals( 1,
                 m.attributes.length );
         assertEquals( at,
@@ -159,7 +159,7 @@ public class RuleModelTest {
 
         final RuleAttribute at2 = new RuleAttribute( "agenda-group",
                 "x" );
-        m.addAttribute( at2 );
+        at2.addAttribute(m);
         assertEquals( 2,
                 m.attributes.length );
         assertEquals( at2,
diff --git a/drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/CompositeFactPattern.java b/drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/CompositeFactPattern.java
index c503d99..7023f17 100644
--- a/drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/CompositeFactPattern.java
+++ b/drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/CompositeFactPattern.java
@@ -16,6 +16,8 @@
 
 package org.drools.workbench.models.datamodel.rule;
 
+import org.drools.workbench.models.datamodel.rule.visitors.RuleModelVisitor;
+
 import java.util.Arrays;
 
 /**
@@ -134,4 +136,12 @@ public class CompositeFactPattern
         result = ~~result;
         return result;
     }
+
+    public void visitCompositeFactPattern(RuleModelVisitor ruleModelVisitor) {
+        if (getPatterns() != null) {
+            for (IFactPattern fp : getPatterns()) {
+                ruleModelVisitor.visit(fp);
+            }
+        }
+    }
 }
diff --git a/drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/ExpressionFormLine.java b/drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/ExpressionFormLine.java
index 8ecb55f..c97c226 100644
--- a/drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/ExpressionFormLine.java
+++ b/drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/ExpressionFormLine.java
@@ -20,7 +20,6 @@ import java.util.LinkedList;
 import java.util.List;
 
 import org.drools.workbench.models.datamodel.rule.visitors.CopyExpressionVisitor;
-import org.drools.workbench.models.datamodel.rule.visitors.ToStringExpressionVisitor;
 
 public class ExpressionFormLine
         implements
@@ -53,11 +52,6 @@ public class ExpressionFormLine
         appendPart( part );
     }
 
-    public String getText( final ToStringExpressionVisitor visitor ) {
-        visitor.visit( getRootExpression() );
-        return visitor.getText();
-    }
-
     public int getIndex() {
         return this.index;
     }
diff --git a/drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/ExpressionMethod.java b/drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/ExpressionMethod.java
index 2564a8b..4515c2e 100644
--- a/drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/ExpressionMethod.java
+++ b/drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/ExpressionMethod.java
@@ -16,12 +16,9 @@
 
 package org.drools.workbench.models.datamodel.rule;
 
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
+import org.drools.workbench.models.datamodel.rule.visitors.CopyExpressionVisitor;
+
+import java.util.*;
 
 public class ExpressionMethod extends ExpressionPart {
 
@@ -117,4 +114,14 @@ public class ExpressionMethod extends ExpressionPart {
         result = ~~result;
         return result;
     }
+
+    public void copyMethodParams(ExpressionMethod method, CopyExpressionVisitor copyExpressionVisitor) {
+        Map<ExpressionMethodParameterDefinition, ExpressionFormLine> params = new HashMap<ExpressionMethodParameterDefinition, ExpressionFormLine>();
+        for ( Map.Entry<ExpressionMethodParameterDefinition, ExpressionFormLine> entry : getParams().entrySet() ) {
+            params.put( new ExpressionMethodParameterDefinition( entry.getKey().getIndex(),
+                                                                 entry.getKey().getDataType() ),
+                        new ExpressionFormLine( entry.getValue() ) );
+        }
+        method.setParams( params );
+    }
 }
diff --git a/drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/RuleAttribute.java b/drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/RuleAttribute.java
index e74eca8..53052ed 100644
--- a/drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/RuleAttribute.java
+++ b/drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/RuleAttribute.java
@@ -119,4 +119,17 @@ public class RuleAttribute {
         result = ~~result;
         return result;
     }
+
+    public void addAttribute(RuleModel ruleModel) {
+
+        final RuleAttribute[] list = ruleModel.attributes;
+        final RuleAttribute[] newList = new RuleAttribute[list.length + 1];
+
+        for (int i = 0; i < list.length; i++) {
+            newList[i] = list[i];
+        }
+        newList[list.length] = this;
+
+        ruleModel.attributes = newList;
+    }
 }
diff --git a/drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/RuleModel.java b/drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/RuleModel.java
index 3256327..e78a712 100644
--- a/drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/RuleModel.java
+++ b/drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/RuleModel.java
@@ -636,19 +636,6 @@ public class RuleModel implements HasImports,
         this.rhs = newList;
     }
 
-    public void addAttribute(final RuleAttribute attribute) {
-
-        final RuleAttribute[] list = this.attributes;
-        final RuleAttribute[] newList = new RuleAttribute[list.length + 1];
-
-        for (int i = 0; i < list.length; i++) {
-            newList[i] = list[i];
-        }
-        newList[list.length] = attribute;
-
-        this.attributes = newList;
-    }
-
     public void removeAttribute(final int idx) {
         final RuleAttribute[] newList = new RuleAttribute[this.attributes.length - 1];
         int newIdx = 0;
diff --git a/drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/visitors/CopyExpressionVisitor.java b/drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/visitors/CopyExpressionVisitor.java
index c6a4cc2..53f988a 100644
--- a/drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/visitors/CopyExpressionVisitor.java
+++ b/drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/visitors/CopyExpressionVisitor.java
@@ -15,18 +15,13 @@
  */
 package org.drools.workbench.models.datamodel.rule.visitors;
 
-import java.util.HashMap;
-import java.util.Map;
-
 import org.drools.workbench.models.datamodel.rule.ExpressionCollection;
 import org.drools.workbench.models.datamodel.rule.ExpressionCollectionIndex;
 import org.drools.workbench.models.datamodel.rule.ExpressionField;
 import org.drools.workbench.models.datamodel.rule.ExpressionFieldVariable;
-import org.drools.workbench.models.datamodel.rule.ExpressionFormLine;
 import org.drools.workbench.models.datamodel.rule.ExpressionGlobalVariable;
 import org.drools.workbench.models.datamodel.rule.ExpressionMethod;
 import org.drools.workbench.models.datamodel.rule.ExpressionMethodParameter;
-import org.drools.workbench.models.datamodel.rule.ExpressionMethodParameterDefinition;
 import org.drools.workbench.models.datamodel.rule.ExpressionPart;
 import org.drools.workbench.models.datamodel.rule.ExpressionText;
 import org.drools.workbench.models.datamodel.rule.ExpressionUnboundFact;
@@ -66,8 +61,8 @@ public class CopyExpressionVisitor implements ExpressionVisitor {
                                                         part.getClassType(),
                                                         part.getGenericType(),
                                                         part.getParametricType() );
-        copyMethodParams( part,
-                          method );
+        part.copyMethodParams(
+                method, this);
         add( method );
         moveNext( part );
     }
@@ -102,8 +97,8 @@ public class CopyExpressionVisitor implements ExpressionVisitor {
                                                                           part.getClassType(),
                                                                           part.getGenericType(),
                                                                           part.getParametricType() );
-        copyMethodParams( part,
-                          method );
+        part.copyMethodParams(
+                method, this);
         add( method );
         moveNext( part );
     }
@@ -132,17 +127,6 @@ public class CopyExpressionVisitor implements ExpressionVisitor {
 
     }
 
-    private void copyMethodParams( ExpressionMethod part,
-                                   ExpressionMethod method ) {
-        Map<ExpressionMethodParameterDefinition, ExpressionFormLine> params = new HashMap<ExpressionMethodParameterDefinition, ExpressionFormLine>();
-        for ( Map.Entry<ExpressionMethodParameterDefinition, ExpressionFormLine> entry : part.getParams().entrySet() ) {
-            params.put( new ExpressionMethodParameterDefinition( entry.getKey().getIndex(),
-                                                                 entry.getKey().getDataType() ),
-                        new ExpressionFormLine( entry.getValue() ) );
-        }
-        method.setParams( params );
-    }
-
     private void moveNext( ExpressionPart ep ) {
         if ( ep.getNext() != null ) {
             ep.getNext().accept( this );
diff --git a/drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/visitors/RuleModelVisitor.java b/drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/visitors/RuleModelVisitor.java
index a23eee5..6a287e1 100644
--- a/drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/visitors/RuleModelVisitor.java
+++ b/drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/visitors/RuleModelVisitor.java
@@ -122,7 +122,7 @@ public class RuleModelVisitor {
         } else if (o instanceof SingleFieldConstraint) {
             visitSingleFieldConstraint((SingleFieldConstraint) o);
         } else if (o instanceof CompositeFactPattern) {
-            visitCompositeFactPattern((CompositeFactPattern) o);
+            ((CompositeFactPattern) o).visitCompositeFactPattern(this);
         } else if (o instanceof FreeFormLine) {
             visitFreeFormLine((FreeFormLine) o);
         } else if (o instanceof FromAccumulateCompositeFactPattern) {
@@ -187,14 +187,6 @@ public class RuleModelVisitor {
         }
     }
 
-    private void visitCompositeFactPattern(CompositeFactPattern pattern) {
-        if (pattern.getPatterns() != null) {
-            for (IFactPattern fp : pattern.getPatterns()) {
-                visit(fp);
-            }
-        }
-    }
-
     private void visitCompositeFieldConstraint(CompositeFieldConstraint cfc) {
         if (cfc.getConstraints() != null) {
             for (FieldConstraint fc : cfc.getConstraints()) {
@@ -237,7 +229,7 @@ public class RuleModelVisitor {
     private void visitFromCompositeFactPattern(FromCompositeFactPattern pattern) {
         visit(pattern.getFactPattern());
         ToStringExpressionVisitor visitor = new ToStringExpressionVisitor();
-        parseStringPattern(pattern.getExpression().getText(visitor));
+        parseStringPattern(visitor.getTextOther(pattern.getExpression()));
     }
 
     private void visitRuleModel(RuleModel model) {
diff --git a/drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/visitors/ToStringExpressionVisitor.java b/drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/visitors/ToStringExpressionVisitor.java
index c0cb457..4f32c7e 100644
--- a/drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/visitors/ToStringExpressionVisitor.java
+++ b/drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/visitors/ToStringExpressionVisitor.java
@@ -171,5 +171,10 @@ public class ToStringExpressionVisitor implements
             exp.getNext().accept( this );
         }
     }
+
+    public String getTextOther(ExpressionFormLine expressionFormLine) {
+        visit( expressionFormLine.getRootExpression() );
+        return getText();
+    }
 }
 
diff --git a/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/backend/GuidedDTDRLPersistence.java b/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/backend/GuidedDTDRLPersistence.java
index c131fbf..7475192 100644
--- a/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/backend/GuidedDTDRLPersistence.java
+++ b/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/backend/GuidedDTDRLPersistence.java
@@ -258,7 +258,7 @@ public class GuidedDTDRLPersistence {
                           RuleModel rm) {
 
         //Check whether the parameter-less BRL fragment needs inclusion
-        if (!hasVariables(column)) {
+        if (!column.hasVariables(this)) {
             final BRLActionVariableColumn variableColumn = column.getChildColumns().get(0);
             final int index = allColumns.indexOf(variableColumn);
             final DTCellValue52 dcv = row.get(index);
@@ -309,17 +309,6 @@ public class GuidedDTDRLPersistence {
         }
     }
 
-    private boolean hasVariables(BRLActionColumn column) {
-        Map<InterpolationVariable, Integer> ivs = new HashMap<InterpolationVariable, Integer>();
-        RuleModel rm = new RuleModel();
-        for (IAction action : column.getDefinition()) {
-            rm.addRhsItem(action);
-        }
-        RuleModelVisitor rmv = new RuleModelVisitor(ivs);
-        rmv.visit(rm);
-        return ivs.size() > 0;
-    }
-
     private void addAction(IAction action,
                            List<LabelledAction> actions) {
         String binding = null;
diff --git a/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/BRLActionColumn.java b/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/BRLActionColumn.java
index 2186969..d16326e 100644
--- a/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/BRLActionColumn.java
+++ b/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/BRLActionColumn.java
@@ -16,9 +16,15 @@
 package org.drools.workbench.models.guided.dtable.shared.model;
 
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 
 import org.drools.workbench.models.datamodel.rule.IAction;
+import org.drools.workbench.models.datamodel.rule.InterpolationVariable;
+import org.drools.workbench.models.datamodel.rule.RuleModel;
+import org.drools.workbench.models.datamodel.rule.visitors.RuleModelVisitor;
+import org.drools.workbench.models.guided.dtable.backend.GuidedDTDRLPersistence;
 
 import static java.lang.Math.*;
 
@@ -145,4 +151,15 @@ public class BRLActionColumn extends ActionCol52
         result=~~result;
         return result;
     }
+
+    public boolean hasVariables(GuidedDTDRLPersistence guidedDTDRLPersistence) {
+        Map<InterpolationVariable, Integer> ivs = new HashMap<InterpolationVariable, Integer>();
+        RuleModel rm = new RuleModel();
+        for (IAction action : getDefinition()) {
+            rm.addRhsItem(action);
+        }
+        RuleModelVisitor rmv = new RuleModelVisitor(ivs);
+        rmv.visit(rm);
+        return ivs.size() > 0;
+    }
 }
diff --git a/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/ConditionCol52.java b/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/ConditionCol52.java
index f636c92..36cb7bf 100644
--- a/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/ConditionCol52.java
+++ b/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/ConditionCol52.java
@@ -290,4 +290,16 @@ public class ConditionCol52 extends DTColumnConfig52
         result=~~result;
         return result;
     }
+
+    public Pattern52 getPattern(GuidedDecisionTable52 guidedDecisionTable52) {
+        for (CompositeColumn<?> cc : guidedDecisionTable52.getConditions()) {
+            if (cc instanceof Pattern52) {
+                final Pattern52 p = (Pattern52) cc;
+                if (p.getChildColumns().contains(this)) {
+                    return p;
+                }
+            }
+        }
+        return new Pattern52();
+    }
 }
diff --git a/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/DTCellValue52.java b/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/DTCellValue52.java
index 0f2e632..a002625 100644
--- a/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/DTCellValue52.java
+++ b/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/DTCellValue52.java
@@ -498,4 +498,28 @@ public class DTCellValue52 {
         cloned.dataType = dataType;
         return cloned;
     }
+
+    public Object extractDefaultValue(DTColumnConfig52 dtColumnConfig52) {
+        if ( this == null ) {
+            return null;
+        }
+        switch ( getDataType() ) {
+            case BOOLEAN:
+                return getBooleanValue();
+            case DATE:
+                return getDateValue();
+            case NUMERIC:
+            case NUMERIC_BIGDECIMAL:
+            case NUMERIC_BIGINTEGER:
+            case NUMERIC_BYTE:
+            case NUMERIC_DOUBLE:
+            case NUMERIC_FLOAT:
+            case NUMERIC_INTEGER:
+            case NUMERIC_LONG:
+            case NUMERIC_SHORT:
+                return getNumericValue();
+            default:
+                return getStringValue();
+        }
+    }
 }
diff --git a/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/DTColumnConfig52.java b/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/DTColumnConfig52.java
index 2588782..fba9edc 100644
--- a/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/DTColumnConfig52.java
+++ b/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/DTColumnConfig52.java
@@ -86,8 +86,8 @@ public class DTColumnConfig52
         if ( !BaseColumnFieldDiffImpl.isEqualOrNull( this.getDefaultValue(),
                                                      other.getDefaultValue() ) ) {
             result.add( new BaseColumnFieldDiffImpl( FIELD_DEFAULT_VALUE,
-                                                     extractDefaultValue( this.getDefaultValue() ),
-                                                     extractDefaultValue( other.getDefaultValue() ) ) );
+                                                     this.getDefaultValue().extractDefaultValue(this),
+                                                     other.getDefaultValue().extractDefaultValue(this) ) );
         }
 
         // Field: width.
@@ -120,30 +120,6 @@ public class DTColumnConfig52
         setDefaultValue( model.getDefaultValue() != null ? new DTCellValue52( model.getDefaultValue() ) : null );
     }
 
-    protected Object extractDefaultValue( final DTCellValue52 dcv ) {
-        if ( dcv == null ) {
-            return null;
-        }
-        switch ( dcv.getDataType() ) {
-            case BOOLEAN:
-                return dcv.getBooleanValue();
-            case DATE:
-                return dcv.getDateValue();
-            case NUMERIC:
-            case NUMERIC_BIGDECIMAL:
-            case NUMERIC_BIGINTEGER:
-            case NUMERIC_BYTE:
-            case NUMERIC_DOUBLE:
-            case NUMERIC_FLOAT:
-            case NUMERIC_INTEGER:
-            case NUMERIC_LONG:
-            case NUMERIC_SHORT:
-                return dcv.getNumericValue();
-            default:
-                return dcv.getStringValue();
-        }
-    }
-
     // Check whether two Objects are equal or both null
     public static boolean isEqualOrNull( final Object s1,
                                          final Object s2 ) {
diff --git a/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/GuidedDecisionTable52.java b/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/GuidedDecisionTable52.java
index 1f0a1e8..ff9070e 100644
--- a/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/GuidedDecisionTable52.java
+++ b/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/GuidedDecisionTable52.java
@@ -204,18 +204,6 @@ public class GuidedDecisionTable52 implements HasImports,
         return Optional.empty();
     }
 
-    public Pattern52 getPattern(final ConditionCol52 col) {
-        for (CompositeColumn<?> cc : conditionPatterns) {
-            if (cc instanceof Pattern52) {
-                final Pattern52 p = (Pattern52) cc;
-                if (p.getChildColumns().contains(col)) {
-                    return p;
-                }
-            }
-        }
-        return new Pattern52();
-    }
-
     public BRLColumn<?, ?> getBRLColumn(final BRLVariableColumn col) {
         for (CompositeColumn<? extends BaseColumn> cc : conditionPatterns) {
             if (cc instanceof BRLConditionColumn) {
diff --git a/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/LimitedEntryActionInsertFactCol52.java b/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/LimitedEntryActionInsertFactCol52.java
index d8f60b1..04b934e 100644
--- a/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/LimitedEntryActionInsertFactCol52.java
+++ b/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/LimitedEntryActionInsertFactCol52.java
@@ -46,8 +46,8 @@ public class LimitedEntryActionInsertFactCol52 extends ActionInsertFactCol52
         if ( !BaseColumnFieldDiffImpl.isEqualOrNull( this.getValue(),
                                                      other.getValue() ) ) {
             result.add( new BaseColumnFieldDiffImpl( FIELD_VALUE,
-                                                     extractDefaultValue( this.getValue() ),
-                                                     extractDefaultValue( other.getValue() ) ) );
+                                                     this.getValue().extractDefaultValue(this),
+                                                     other.getValue().extractDefaultValue(this) ) );
         }
 
         return result;
diff --git a/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/LimitedEntryActionRetractFactCol52.java b/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/LimitedEntryActionRetractFactCol52.java
index 8841495..62c5c19 100644
--- a/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/LimitedEntryActionRetractFactCol52.java
+++ b/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/LimitedEntryActionRetractFactCol52.java
@@ -48,8 +48,8 @@ public class LimitedEntryActionRetractFactCol52 extends ActionRetractFactCol52
         if ( !BaseColumnFieldDiffImpl.isEqualOrNull( this.getValue(),
                                                      other.getValue() ) ) {
             result.add( new BaseColumnFieldDiffImpl( FIELD_VALUE,
-                                                     extractDefaultValue( this.getValue() ),
-                                                     extractDefaultValue( other.getValue() ) ) );
+                                                     this.getValue().extractDefaultValue(this),
+                                                     other.getValue().extractDefaultValue(this) ) );
         }
 
         return result;
diff --git a/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/LimitedEntryActionSetFieldCol52.java b/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/LimitedEntryActionSetFieldCol52.java
index bf8b9e8..21ca178 100644
--- a/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/LimitedEntryActionSetFieldCol52.java
+++ b/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/LimitedEntryActionSetFieldCol52.java
@@ -46,8 +46,8 @@ public class LimitedEntryActionSetFieldCol52 extends ActionSetFieldCol52
         if ( !BaseColumnFieldDiffImpl.isEqualOrNull( this.getValue(),
                                                      other.getValue() ) ) {
             result.add( new BaseColumnFieldDiffImpl( FIELD_VALUE,
-                                                     extractDefaultValue( this.getValue() ),
-                                                     extractDefaultValue( other.getValue() ) ) );
+                                                     this.getValue().extractDefaultValue(this),
+                                                     other.getValue().extractDefaultValue(this) ) );
         }
 
         return result;
diff --git a/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/LimitedEntryConditionCol52.java b/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/LimitedEntryConditionCol52.java
index 90bb759..f8ce823 100644
--- a/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/LimitedEntryConditionCol52.java
+++ b/drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/LimitedEntryConditionCol52.java
@@ -47,8 +47,8 @@ public class LimitedEntryConditionCol52 extends ConditionCol52
         if ( !BaseColumnFieldDiffImpl.isEqualOrNull( this.getValue(),
                                                      other.getValue() ) ) {
             result.add( new BaseColumnFieldDiffImpl( FIELD_VALUE,
-                                                     extractDefaultValue( this.getValue() ),
-                                                     extractDefaultValue( other.getValue() ) ) );
+                                                     this.getValue().extractDefaultValue(this),
+                                                     other.getValue().extractDefaultValue(this) ) );
         }
 
         return result;
diff --git a/drools-workbench-models/drools-workbench-models-guided-dtable/src/test/java/org/drools/workbench/models/guided/dtable/backend/GuidedDTModelConversionTest.java b/drools-workbench-models/drools-workbench-models-guided-dtable/src/test/java/org/drools/workbench/models/guided/dtable/backend/GuidedDTModelConversionTest.java
index 6dfbc38..084087a 100644
--- a/drools-workbench-models/drools-workbench-models-guided-dtable/src/test/java/org/drools/workbench/models/guided/dtable/backend/GuidedDTModelConversionTest.java
+++ b/drools-workbench-models/drools-workbench-models-guided-dtable/src/test/java/org/drools/workbench/models/guided/dtable/backend/GuidedDTModelConversionTest.java
@@ -172,7 +172,7 @@ public class GuidedDTModelConversionTest {
         assertEquals("age",
                      tsdt.getConditionPattern("f1").getChildColumns().get(0).getFactField());
         assertEquals("Driver",
-                     tsdt.getPattern(tsdt.getConditionPattern("f1").getChildColumns().get(0)).getFactType());
+                     tsdt.getConditionPattern("f1").getChildColumns().get(0).getPattern(tsdt).getFactType());
         assertEquals("Driver f1 age",
                      tsdt.getConditionPattern("f1").getChildColumns().get(0).getHeader());
         assertEquals("==",
@@ -183,7 +183,7 @@ public class GuidedDTModelConversionTest {
         assertEquals("name",
                      tsdt.getConditionPattern("f1").getChildColumns().get(1).getFactField());
         assertEquals("Driver",
-                     tsdt.getPattern(tsdt.getConditionPattern("f1").getChildColumns().get(1)).getFactType());
+                     tsdt.getConditionPattern("f1").getChildColumns().get(1).getPattern(tsdt).getFactType());
         assertEquals("Driver f1 name",
                      tsdt.getConditionPattern("f1").getChildColumns().get(1).getHeader());
         assertEquals("==",
@@ -194,7 +194,7 @@ public class GuidedDTModelConversionTest {
         assertEquals("rating",
                      tsdt.getConditionPattern("f1").getChildColumns().get(2).getFactField());
         assertEquals("Driver",
-                     tsdt.getPattern(tsdt.getConditionPattern("f1").getChildColumns().get(2)).getFactType());
+                     tsdt.getConditionPattern("f1").getChildColumns().get(2).getPattern(tsdt).getFactType());
         assertEquals("Driver rating",
                      tsdt.getConditionPattern("f1").getChildColumns().get(2).getHeader());
         assertEquals("==",
@@ -205,7 +205,7 @@ public class GuidedDTModelConversionTest {
         assertEquals("(not needed)",
                      tsdt.getConditionPattern("f2").getChildColumns().get(0).getFactField());
         assertEquals("Driver",
-                     tsdt.getPattern(tsdt.getConditionPattern("f2").getChildColumns().get(0)).getFactType());
+                     tsdt.getConditionPattern("f2").getChildColumns().get(0).getPattern(tsdt).getFactType());
         assertEquals("Driver 2 pimp",
                      tsdt.getConditionPattern("f2").getChildColumns().get(0).getHeader());
 
@@ -379,7 +379,7 @@ public class GuidedDTModelConversionTest {
         assertEquals("age",
                      tsdt.getConditionPattern("f1").getChildColumns().get(0).getFactField());
         assertEquals("Driver",
-                     tsdt.getPattern(tsdt.getConditionPattern("f1").getChildColumns().get(0)).getFactType());
+                     tsdt.getConditionPattern("f1").getChildColumns().get(0).getPattern(tsdt).getFactType());
         assertEquals("Driver f1 age",
                      tsdt.getConditionPattern("f1").getChildColumns().get(0).getHeader());
         assertEquals("==",
@@ -390,7 +390,7 @@ public class GuidedDTModelConversionTest {
         assertEquals("rating",
                      tsdt.getConditionPattern("f1").getChildColumns().get(1).getFactField());
         assertEquals("Driver",
-                     tsdt.getPattern(tsdt.getConditionPattern("f1").getChildColumns().get(1)).getFactType());
+                     tsdt.getConditionPattern("f1").getChildColumns().get(1).getPattern(tsdt).getFactType());
         assertEquals("Driver rating",
                      tsdt.getConditionPattern("f1").getChildColumns().get(1).getHeader());
         assertEquals("==",
@@ -401,7 +401,7 @@ public class GuidedDTModelConversionTest {
         assertEquals("name",
                      tsdt.getConditionPattern("f2").getChildColumns().get(0).getFactField());
         assertEquals("Person",
-                     tsdt.getPattern(tsdt.getConditionPattern("f2").getChildColumns().get(0)).getFactType());
+                     tsdt.getConditionPattern("f2").getChildColumns().get(0).getPattern(tsdt).getFactType());
         assertEquals("Person f2 name",
                      tsdt.getConditionPattern("f2").getChildColumns().get(0).getHeader());
         assertEquals("==",
@@ -412,7 +412,7 @@ public class GuidedDTModelConversionTest {
         assertEquals("(not needed)",
                      tsdt.getConditionPattern("f2").getChildColumns().get(1).getFactField());
         assertEquals("Person",
-                     tsdt.getPattern(tsdt.getConditionPattern("f2").getChildColumns().get(1)).getFactType());
+                     tsdt.getConditionPattern("f2").getChildColumns().get(1).getPattern(tsdt).getFactType());
         assertEquals("Person f2 not needed",
                      tsdt.getConditionPattern("f2").getChildColumns().get(1).getHeader());
         assertEquals(null,
@@ -637,7 +637,7 @@ public class GuidedDTModelConversionTest {
         assertEquals("age",
                      tsdt.getConditionPattern("z1").getChildColumns().get(0).getFactField());
         assertEquals("Driver",
-                     tsdt.getPattern(tsdt.getConditionPattern("z1").getChildColumns().get(0)).getFactType());
+                     tsdt.getConditionPattern("z1").getChildColumns().get(0).getPattern(tsdt).getFactType());
         assertEquals("Driver z1 age",
                      tsdt.getConditionPattern("z1").getChildColumns().get(0).getHeader());
         assertEquals("==",
@@ -648,7 +648,7 @@ public class GuidedDTModelConversionTest {
         assertEquals("rating",
                      tsdt.getConditionPattern("z1").getChildColumns().get(1).getFactField());
         assertEquals("Driver",
-                     tsdt.getPattern(tsdt.getConditionPattern("z1").getChildColumns().get(1)).getFactType());
+                     tsdt.getConditionPattern("z1").getChildColumns().get(1).getPattern(tsdt).getFactType());
         assertEquals("Driver rating",
                      tsdt.getConditionPattern("z1").getChildColumns().get(1).getHeader());
         assertEquals("==",
@@ -659,7 +659,7 @@ public class GuidedDTModelConversionTest {
         assertEquals("name",
                      tsdt.getConditionPattern("f1").getChildColumns().get(0).getFactField());
         assertEquals("Person",
-                     tsdt.getPattern(tsdt.getConditionPattern("f1").getChildColumns().get(0)).getFactType());
+                     tsdt.getConditionPattern("f1").getChildColumns().get(0).getPattern(tsdt).getFactType());
         assertEquals("Person f1 name",
                      tsdt.getConditionPattern("f1").getChildColumns().get(0).getHeader());
         assertEquals("==",
@@ -670,7 +670,7 @@ public class GuidedDTModelConversionTest {
         assertEquals("(not needed)",
                      tsdt.getConditionPattern("f2").getChildColumns().get(0).getFactField());
         assertEquals("Person2",
-                     tsdt.getPattern(tsdt.getConditionPattern("f2").getChildColumns().get(0)).getFactType());
+                     tsdt.getConditionPattern("f2").getChildColumns().get(0).getPattern(tsdt).getFactType());
         assertEquals("Person2 f2 not needed",
                      tsdt.getConditionPattern("f2").getChildColumns().get(0).getHeader());
         assertEquals(null,
diff --git a/drools-workbench-models/drools-workbench-models-guided-dtree/src/main/java/org/drools/workbench/models/guided/dtree/backend/GuidedDecisionTreeDRLPersistence.java b/drools-workbench-models/drools-workbench-models-guided-dtree/src/main/java/org/drools/workbench/models/guided/dtree/backend/GuidedDecisionTreeDRLPersistence.java
index 7cfd052..f1835c7 100644
--- a/drools-workbench-models/drools-workbench-models-guided-dtree/src/main/java/org/drools/workbench/models/guided/dtree/backend/GuidedDecisionTreeDRLPersistence.java
+++ b/drools-workbench-models/drools-workbench-models-guided-dtree/src/main/java/org/drools/workbench/models/guided/dtree/backend/GuidedDecisionTreeDRLPersistence.java
@@ -16,8 +16,6 @@
 package org.drools.workbench.models.guided.dtree.backend;
 
 import org.drools.workbench.models.guided.dtree.shared.model.GuidedDecisionTree;
-import org.kie.soup.project.datamodel.commons.imports.ImportsWriter;
-import org.kie.soup.project.datamodel.commons.packages.PackageNameWriter;
 import org.kie.soup.project.datamodel.oracle.PackageDataModelOracle;
 
 /**
@@ -29,22 +27,6 @@ public class GuidedDecisionTreeDRLPersistence {
         return new GuidedDecisionTreeDRLPersistence();
     }
 
-    public String marshal(final GuidedDecisionTree model) {
-        final StringBuilder sb = new StringBuilder();
-
-        //Append package name and imports to DRL
-        PackageNameWriter.write(sb,
-                                model);
-        ImportsWriter.write(sb,
-                            model);
-
-        //Marshall model
-        final GuidedDecisionTreeModelMarshallingVisitor visitor = new GuidedDecisionTreeModelMarshallingVisitor();
-        sb.append(visitor.visit(model));
-
-        return sb.toString();
-    }
-
     public GuidedDecisionTree unmarshal(final String drl,
                                         final String baseFileName,
                                         final PackageDataModelOracle dmo) {
diff --git a/drools-workbench-models/drools-workbench-models-guided-dtree/src/main/java/org/drools/workbench/models/guided/dtree/shared/model/GuidedDecisionTree.java b/drools-workbench-models/drools-workbench-models-guided-dtree/src/main/java/org/drools/workbench/models/guided/dtree/shared/model/GuidedDecisionTree.java
index 3ce3d25..1de913a 100644
--- a/drools-workbench-models/drools-workbench-models-guided-dtree/src/main/java/org/drools/workbench/models/guided/dtree/shared/model/GuidedDecisionTree.java
+++ b/drools-workbench-models/drools-workbench-models-guided-dtree/src/main/java/org/drools/workbench/models/guided/dtree/shared/model/GuidedDecisionTree.java
@@ -18,9 +18,13 @@ package org.drools.workbench.models.guided.dtree.shared.model;
 import java.util.ArrayList;
 import java.util.List;
 
+import org.drools.workbench.models.guided.dtree.backend.GuidedDecisionTreeDRLPersistence;
+import org.drools.workbench.models.guided.dtree.backend.GuidedDecisionTreeModelMarshallingVisitor;
 import org.drools.workbench.models.guided.dtree.shared.model.nodes.TypeNode;
 import org.drools.workbench.models.guided.dtree.shared.model.parser.GuidedDecisionTreeParserError;
 import org.kie.soup.commons.validation.PortablePreconditions;
+import org.kie.soup.project.datamodel.commons.imports.ImportsWriter;
+import org.kie.soup.project.datamodel.commons.packages.PackageNameWriter;
 import org.kie.soup.project.datamodel.imports.HasImports;
 import org.kie.soup.project.datamodel.imports.Imports;
 import org.kie.soup.project.datamodel.packages.HasPackageName;
@@ -77,4 +81,20 @@ public class GuidedDecisionTree implements HasImports,
     public List<GuidedDecisionTreeParserError> getParserErrors() {
         return errors;
     }
+
+    public String marshal(GuidedDecisionTreeDRLPersistence guidedDecisionTreeDRLPersistence) {
+        final StringBuilder sb = new StringBuilder();
+
+        //Append package name and imports to DRL
+        PackageNameWriter.write(sb,
+                this);
+        ImportsWriter.write(sb,
+                this);
+
+        //Marshall model
+        final GuidedDecisionTreeModelMarshallingVisitor visitor = new GuidedDecisionTreeModelMarshallingVisitor();
+        sb.append(visitor.visit(this));
+
+        return sb.toString();
+    }
 }
diff --git a/drools-workbench-models/drools-workbench-models-guided-dtree/src/test/java/org/drools/workbench/models/guided/dtree/backend/GuidedDecisionTreeDRLPersistenceMarshallingTest.java b/drools-workbench-models/drools-workbench-models-guided-dtree/src/test/java/org/drools/workbench/models/guided/dtree/backend/GuidedDecisionTreeDRLPersistenceMarshallingTest.java
index 61c4c06..9e63872 100644
--- a/drools-workbench-models/drools-workbench-models-guided-dtree/src/test/java/org/drools/workbench/models/guided/dtree/backend/GuidedDecisionTreeDRLPersistenceMarshallingTest.java
+++ b/drools-workbench-models/drools-workbench-models-guided-dtree/src/test/java/org/drools/workbench/models/guided/dtree/backend/GuidedDecisionTreeDRLPersistenceMarshallingTest.java
@@ -48,8 +48,6 @@ import org.drools.workbench.models.guided.dtree.shared.model.values.impl.ShortVa
 import org.drools.workbench.models.guided.dtree.shared.model.values.impl.StringValue;
 import org.junit.Test;
 
-import static org.junit.Assert.*;
-
 public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
 
     @Test
@@ -66,7 +64,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
         final TypeNode type = new TypeNodeImpl( "Person" );
         model.setRoot( type );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -90,7 +88,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
         model.setRoot( type );
         type.addChild( c1 );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -112,7 +110,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
         model.setRoot( type );
         type.addChild( c1 );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -141,7 +139,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
         type.addChild( c1 );
         c1.addChild( c2 );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -175,7 +173,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
         type.addChild( c1 );
         type.addChild( c2 );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -219,7 +217,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
         type.addChild( c2 );
         type.addChild( c3 );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -258,7 +256,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
         type.addChild( c2 );
         c2.addChild( c3 );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -290,7 +288,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
         c1.addChild( type2 );
         type2.addChild( c2 );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -343,7 +341,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
         type2.addChild( c2a );
         type2.addChild( c2b );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -367,7 +365,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
         model.setRoot( type );
         type.addChild( c1 );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -391,7 +389,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
         model.setRoot( type );
         type.addChild( c1 );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -415,7 +413,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
         model.setRoot( type );
         type.addChild( c1 );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -439,7 +437,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
         model.setRoot( type );
         type.addChild( c1 );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -463,7 +461,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
         model.setRoot( type );
         type.addChild( c1 );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -487,7 +485,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
         model.setRoot( type );
         type.addChild( c1 );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -511,7 +509,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
         model.setRoot( type );
         type.addChild( c1 );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -535,7 +533,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
         model.setRoot( type );
         type.addChild( c1 );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -559,7 +557,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
         model.setRoot( type );
         type.addChild( c1 );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -583,7 +581,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
         model.setRoot( type );
         type.addChild( c1 );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -607,7 +605,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
         model.setRoot( type );
         type.addChild( c1 );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -627,7 +625,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
         type.setBinding( "$p" );
         model.setRoot( type );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -650,7 +648,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
         model.setRoot( type );
         type.addChild( c1 );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -674,7 +672,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
         model.setRoot( type );
         type.addChild( c1 );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -698,7 +696,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
         final ActionRetractNode action = new ActionRetractNodeImpl( type );
         type.addChild( action );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -726,7 +724,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
         final ActionRetractNode action = new ActionRetractNodeImpl( type );
         c1.addChild( action );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -755,7 +753,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
                                                                new IntegerValue( 25 ) ) );
         type.addChild( action );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -788,7 +786,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
                                                                new IntegerValue( 25 ) ) );
         c1.addChild( action );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -821,7 +819,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
         final ActionRetractNode action2 = new ActionRetractNodeImpl( type );
         action1.addChild( action2 );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -853,7 +851,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
                                                                new StringValue( "Michael" ) ) );
         type.addChild( action );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -877,7 +875,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
         action.setModify( true );
         type.addChild( action );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -914,7 +912,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
                                                                new DateValue( dob.getTime() ) ) );
         type.addChild( action );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -941,7 +939,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
                                                                new IntegerValue( 25 ) ) );
         type.addChild( action );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -972,7 +970,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
                                                                new IntegerValue( 25 ) ) );
         c1.addChild( action );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -1003,7 +1001,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
         final ActionRetractNode action2 = new ActionRetractNodeImpl( type );
         action1.addChild( action2 );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -1033,7 +1031,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
                                                                new StringValue( "Michael" ) ) );
         type.addChild( action );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -1057,7 +1055,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
         action.setModify( false );
         type.addChild( action );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -1092,7 +1090,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
                                                                new DateValue( dob.getTime() ) ) );
         type.addChild( action );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -1120,7 +1118,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
                                                                new IntegerValue( 25 ) ) );
         type.addChild( action );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -1148,7 +1146,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
                                                                new IntegerValue( 25 ) ) );
         type.addChild( action );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -1184,7 +1182,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
                                                                new DateValue( dob.getTime() ) ) );
         type.addChild( action );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
@@ -1220,7 +1218,7 @@ public class GuidedDecisionTreeDRLPersistenceMarshallingTest {
                                                                new DateValue( dob.getTime() ) ) );
         type.addChild( action );
 
-        final String drl = GuidedDecisionTreeDRLPersistence.getInstance().marshal( model );
+        final String drl = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace( expected,
                                       drl );
     }
diff --git a/drools-workbench-models/drools-workbench-models-guided-dtree/src/test/java/org/drools/workbench/models/guided/dtree/backend/GuidedDecisionTreeDRLPersistenceUnmarshallingMessagesTest.java b/drools-workbench-models/drools-workbench-models-guided-dtree/src/test/java/org/drools/workbench/models/guided/dtree/backend/GuidedDecisionTreeDRLPersistenceUnmarshallingMessagesTest.java
index f96f6a0..f21adff 100644
--- a/drools-workbench-models/drools-workbench-models-guided-dtree/src/test/java/org/drools/workbench/models/guided/dtree/backend/GuidedDecisionTreeDRLPersistenceUnmarshallingMessagesTest.java
+++ b/drools-workbench-models/drools-workbench-models-guided-dtree/src/test/java/org/drools/workbench/models/guided/dtree/backend/GuidedDecisionTreeDRLPersistenceUnmarshallingMessagesTest.java
@@ -76,7 +76,7 @@ public class GuidedDecisionTreeDRLPersistenceUnmarshallingMessagesTest extends A
                      model.getParserErrors().get(0).getMessages().size());
         assertTrue(model.getParserErrors().get(0).getMessages().get(0) instanceof UnsupportedFieldConstraintParserMessage);
 
-        final String drl2 = GuidedDecisionTreeDRLPersistence.getInstance().marshal(model);
+        final String drl2 = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace(drl,
                                      drl2);
     }
@@ -120,7 +120,7 @@ public class GuidedDecisionTreeDRLPersistenceUnmarshallingMessagesTest extends A
                      model.getParserErrors().get(0).getMessages().size());
         assertTrue(model.getParserErrors().get(0).getMessages().get(0) instanceof UnsupportedFieldConstraintParserMessage);
 
-        final String drl2 = GuidedDecisionTreeDRLPersistence.getInstance().marshal(model);
+        final String drl2 = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace(drl,
                                      drl2);
     }
@@ -163,7 +163,7 @@ public class GuidedDecisionTreeDRLPersistenceUnmarshallingMessagesTest extends A
                      model.getParserErrors().get(0).getMessages().size());
         assertTrue(model.getParserErrors().get(0).getMessages().get(0) instanceof UnsupportedFieldConstraintTypeParserMessage);
 
-        final String drl2 = GuidedDecisionTreeDRLPersistence.getInstance().marshal(model);
+        final String drl2 = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace(drl,
                                      drl2);
     }
@@ -210,7 +210,7 @@ public class GuidedDecisionTreeDRLPersistenceUnmarshallingMessagesTest extends A
                      model.getParserErrors().get(0).getMessages().size());
         assertTrue(model.getParserErrors().get(0).getMessages().get(0) instanceof UnsupportedFieldNatureTypeParserMessage);
 
-        final String drl2 = GuidedDecisionTreeDRLPersistence.getInstance().marshal(model);
+        final String drl2 = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace(drl,
                                      drl2);
     }
@@ -257,7 +257,7 @@ public class GuidedDecisionTreeDRLPersistenceUnmarshallingMessagesTest extends A
                      model.getParserErrors().get(0).getMessages().size());
         assertTrue(model.getParserErrors().get(0).getMessages().get(0) instanceof BindingNotFoundParserMessage);
 
-        final String drl2 = GuidedDecisionTreeDRLPersistence.getInstance().marshal(model);
+        final String drl2 = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace(drl,
                                      drl2);
     }
@@ -302,7 +302,7 @@ public class GuidedDecisionTreeDRLPersistenceUnmarshallingMessagesTest extends A
                      model.getParserErrors().get(0).getMessages().size());
         assertTrue(model.getParserErrors().get(0).getMessages().get(0) instanceof UnsupportedIActionParserMessage);
 
-        final String drl2 = GuidedDecisionTreeDRLPersistence.getInstance().marshal(model);
+        final String drl2 = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace(drl,
                                      drl2);
     }
@@ -342,7 +342,7 @@ public class GuidedDecisionTreeDRLPersistenceUnmarshallingMessagesTest extends A
                      model.getParserErrors().get(0).getMessages().size());
         assertTrue(model.getParserErrors().get(0).getMessages().get(0) instanceof DataTypeNotFoundParserMessage);
 
-        final String drl2 = GuidedDecisionTreeDRLPersistence.getInstance().marshal(model);
+        final String drl2 = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace(drl,
                                      drl2);
     }
@@ -386,7 +386,7 @@ public class GuidedDecisionTreeDRLPersistenceUnmarshallingMessagesTest extends A
                      model.getParserErrors().get(0).getMessages().size());
         assertTrue(model.getParserErrors().get(0).getMessages().get(0) instanceof DataTypeConversionErrorParserMessage);
 
-        final String drl2 = GuidedDecisionTreeDRLPersistence.getInstance().marshal(model);
+        final String drl2 = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace(drl,
                                      drl2);
     }
@@ -429,7 +429,7 @@ public class GuidedDecisionTreeDRLPersistenceUnmarshallingMessagesTest extends A
                      model.getParserErrors().get(0).getMessages().size());
         assertTrue(model.getParserErrors().get(0).getMessages().get(0) instanceof DataTypeConversionErrorParserMessage);
 
-        final String drl2 = GuidedDecisionTreeDRLPersistence.getInstance().marshal(model);
+        final String drl2 = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace(drl,
                                      drl2);
     }
@@ -472,7 +472,7 @@ public class GuidedDecisionTreeDRLPersistenceUnmarshallingMessagesTest extends A
                      model.getParserErrors().get(0).getMessages().size());
         assertTrue(model.getParserErrors().get(0).getMessages().get(0) instanceof DataTypeConversionErrorParserMessage);
 
-        final String drl2 = GuidedDecisionTreeDRLPersistence.getInstance().marshal(model);
+        final String drl2 = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace(drl,
                                      drl2);
     }
@@ -515,7 +515,7 @@ public class GuidedDecisionTreeDRLPersistenceUnmarshallingMessagesTest extends A
                      model.getParserErrors().get(0).getMessages().size());
         assertTrue(model.getParserErrors().get(0).getMessages().get(0) instanceof DataTypeConversionErrorParserMessage);
 
-        final String drl2 = GuidedDecisionTreeDRLPersistence.getInstance().marshal(model);
+        final String drl2 = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace(drl,
                                      drl2);
     }
@@ -560,7 +560,7 @@ public class GuidedDecisionTreeDRLPersistenceUnmarshallingMessagesTest extends A
                      model.getParserErrors().get(0).getMessages().size());
         assertTrue(model.getParserErrors().get(0).getMessages().get(0) instanceof DataTypeConversionErrorParserMessage);
 
-        final String drl2 = GuidedDecisionTreeDRLPersistence.getInstance().marshal(model);
+        final String drl2 = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace(drl,
                                      drl2);
     }
@@ -605,7 +605,7 @@ public class GuidedDecisionTreeDRLPersistenceUnmarshallingMessagesTest extends A
                      model.getParserErrors().get(0).getMessages().size());
         assertTrue(model.getParserErrors().get(0).getMessages().get(0) instanceof DataTypeConversionErrorParserMessage);
 
-        final String drl2 = GuidedDecisionTreeDRLPersistence.getInstance().marshal(model);
+        final String drl2 = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace(drl,
                                      drl2);
     }
@@ -649,7 +649,7 @@ public class GuidedDecisionTreeDRLPersistenceUnmarshallingMessagesTest extends A
                      model.getParserErrors().get(0).getMessages().size());
         assertTrue(model.getParserErrors().get(0).getMessages().get(0) instanceof DataTypeConversionErrorParserMessage);
 
-        final String drl2 = GuidedDecisionTreeDRLPersistence.getInstance().marshal(model);
+        final String drl2 = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace(drl,
                                      drl2);
     }
@@ -692,7 +692,7 @@ public class GuidedDecisionTreeDRLPersistenceUnmarshallingMessagesTest extends A
                      model.getParserErrors().get(0).getMessages().size());
         assertTrue(model.getParserErrors().get(0).getMessages().get(0) instanceof DataTypeConversionErrorParserMessage);
 
-        final String drl2 = GuidedDecisionTreeDRLPersistence.getInstance().marshal(model);
+        final String drl2 = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace(drl,
                                      drl2);
     }
@@ -735,7 +735,7 @@ public class GuidedDecisionTreeDRLPersistenceUnmarshallingMessagesTest extends A
                      model.getParserErrors().get(0).getMessages().size());
         assertTrue(model.getParserErrors().get(0).getMessages().get(0) instanceof DataTypeConversionErrorParserMessage);
 
-        final String drl2 = GuidedDecisionTreeDRLPersistence.getInstance().marshal(model);
+        final String drl2 = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace(drl,
                                      drl2);
     }
@@ -778,7 +778,7 @@ public class GuidedDecisionTreeDRLPersistenceUnmarshallingMessagesTest extends A
                      model.getParserErrors().get(0).getMessages().size());
         assertTrue(model.getParserErrors().get(0).getMessages().get(0) instanceof DataTypeConversionErrorParserMessage);
 
-        final String drl2 = GuidedDecisionTreeDRLPersistence.getInstance().marshal(model);
+        final String drl2 = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace(drl,
                                      drl2);
     }
@@ -833,7 +833,7 @@ public class GuidedDecisionTreeDRLPersistenceUnmarshallingMessagesTest extends A
                      model.getParserErrors().get(0).getMessages().size());
         assertTrue(model.getParserErrors().get(0).getMessages().get(0) instanceof AmbiguousRootParserMessage);
 
-        final String drl3 = GuidedDecisionTreeDRLPersistence.getInstance().marshal(model);
+        final String drl3 = model.marshal(GuidedDecisionTreeDRLPersistence.getInstance());
         assertEqualsIgnoreWhitespace(drl1 + drl2,
                                      drl3);
     }
diff --git a/drools-workbench-models/drools-workbench-models-guided-template/src/main/java/org/drools/workbench/models/guided/template/backend/upgrade/TemplateModelUpgradeHelper1.java b/drools-workbench-models/drools-workbench-models-guided-template/src/main/java/org/drools/workbench/models/guided/template/backend/upgrade/TemplateModelUpgradeHelper1.java
index 8fc95b3..3dae277 100644
--- a/drools-workbench-models/drools-workbench-models-guided-template/src/main/java/org/drools/workbench/models/guided/template/backend/upgrade/TemplateModelUpgradeHelper1.java
+++ b/drools-workbench-models/drools-workbench-models-guided-template/src/main/java/org/drools/workbench/models/guided/template/backend/upgrade/TemplateModelUpgradeHelper1.java
@@ -15,7 +15,6 @@
  */
 package org.drools.workbench.models.guided.template.backend.upgrade;
 
-import org.drools.workbench.models.datamodel.rule.InterpolationVariable;
 import org.drools.workbench.models.guided.template.shared.TemplateModel;
 import org.kie.soup.project.datamodel.commons.IUpgradeHelper;
 
@@ -27,14 +26,8 @@ public class TemplateModelUpgradeHelper1
         IUpgradeHelper<TemplateModel, TemplateModel> {
 
     public TemplateModel upgrade(TemplateModel model) {
-        updateInterpolationVariableFieldTypes(model);
+        model.updateInterpolationVariableFieldTypes(this);
         return model;
     }
 
-    private void updateInterpolationVariableFieldTypes(TemplateModel model) {
-        //Fields' data-types may be qualified with Fact type. This can be removed
-        for (InterpolationVariable variable : model.getInterpolationVariablesList()) {
-            variable.setFactField(variable.getFactField());
-        }
-    }
 }
diff --git a/drools-workbench-models/drools-workbench-models-guided-template/src/main/java/org/drools/workbench/models/guided/template/shared/TemplateModel.java b/drools-workbench-models/drools-workbench-models-guided-template/src/main/java/org/drools/workbench/models/guided/template/shared/TemplateModel.java
index 6c36761..7681e22 100644
--- a/drools-workbench-models/drools-workbench-models-guided-template/src/main/java/org/drools/workbench/models/guided/template/shared/TemplateModel.java
+++ b/drools-workbench-models/drools-workbench-models-guided-template/src/main/java/org/drools/workbench/models/guided/template/shared/TemplateModel.java
@@ -25,6 +25,7 @@ import java.util.Set;
 import org.drools.workbench.models.datamodel.rule.InterpolationVariable;
 import org.drools.workbench.models.datamodel.rule.RuleModel;
 import org.drools.workbench.models.datamodel.rule.visitors.RuleModelVisitor;
+import org.drools.workbench.models.guided.template.backend.upgrade.TemplateModelUpgradeHelper1;
 import org.kie.soup.project.datamodel.oracle.DataType;
 
 public class TemplateModel
@@ -256,4 +257,11 @@ public class TemplateModel
     public void setIdCol(final int idCol) {
         this.idCol = idCol;
     }
+
+    public void updateInterpolationVariableFieldTypes(TemplateModelUpgradeHelper1 templateModelUpgradeHelper1) {
+        //Fields' data-types may be qualified with Fact type. This can be removed
+        for (InterpolationVariable variable : getInterpolationVariablesList()) {
+            variable.setFactField(variable.getFactField());
+        }
+    }
 }
diff --git a/drools-workbench-models/drools-workbench-models-guided-template/src/test/java/org/drools/workbench/models/guided/template/backend/RuleTemplateModelXMLPersistenceTest.java b/drools-workbench-models/drools-workbench-models-guided-template/src/test/java/org/drools/workbench/models/guided/template/backend/RuleTemplateModelXMLPersistenceTest.java
index 534bdd6..d53a7bd 100644
--- a/drools-workbench-models/drools-workbench-models-guided-template/src/test/java/org/drools/workbench/models/guided/template/backend/RuleTemplateModelXMLPersistenceTest.java
+++ b/drools-workbench-models/drools-workbench-models-guided-template/src/test/java/org/drools/workbench/models/guided/template/backend/RuleTemplateModelXMLPersistenceTest.java
@@ -62,8 +62,8 @@ public class RuleTemplateModelXMLPersistenceTest {
         final TemplateModel m = new TemplateModel();
         m.addLhsItem(new FactPattern("Person"));
         m.addLhsItem(new FactPattern("Accident"));
-        m.addAttribute(new RuleAttribute("no-loop",
-                                         "true"));
+        new RuleAttribute("no-loop",
+                                         "true").addAttribute();
 
         m.addRhsItem(new ActionInsertFact("Report"));
         ActionGlobalCollectionAdd ag = new ActionGlobalCollectionAdd();
@@ -269,8 +269,8 @@ public class RuleTemplateModelXMLPersistenceTest {
     private TemplateModel getComplexModel() {
         final TemplateModel m = new TemplateModel();
 
-        m.addAttribute(new RuleAttribute("no-loop",
-                                         "true"));
+        new RuleAttribute("no-loop",
+                                         "true").addAttribute();
 
         final FactPattern pat = new FactPattern("Person");
         pat.setBoundName("p1");
diff --git a/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/backend/populators/CollectionFieldPopulator.java b/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/backend/populators/CollectionFieldPopulator.java
index 9f4ffab..094b755 100644
--- a/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/backend/populators/CollectionFieldPopulator.java
+++ b/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/backend/populators/CollectionFieldPopulator.java
@@ -19,7 +19,6 @@ import java.util.Map;
 
 import org.drools.core.util.MVELSafeHelper;
 import org.drools.workbench.models.testscenarios.shared.CollectionFieldData;
-import org.drools.workbench.models.testscenarios.shared.FieldData;
 
 
 public class CollectionFieldPopulator extends FieldPopulator {
@@ -29,22 +28,7 @@ public class CollectionFieldPopulator extends FieldPopulator {
 
     public CollectionFieldPopulator(Object factObject, CollectionFieldData field) {
         super(factObject, field.getName());
-        this.expression = createExpression(field);
-    }
-
-    private String createExpression(CollectionFieldData field) {
-        String result = "[";
-
-        int index = 1;
-        for (FieldData fieldData : field.getCollectionFieldList()) {
-            result += fieldData.getValue().replace("=", "");
-            if (index < field.getCollectionFieldList().size()) {
-                result += ",";
-            }
-            index++;
-        }
-
-        return result + "]";
+        this.expression = field.createExpression(this);
     }
 
     @Override
diff --git a/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/backend/verifiers/FactVerifier.java b/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/backend/verifiers/FactVerifier.java
index 65d79ba..3396673 100644
--- a/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/backend/verifiers/FactVerifier.java
+++ b/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/backend/verifiers/FactVerifier.java
@@ -63,10 +63,9 @@ public class FactVerifier {
             fieldVerifier.checkFields(verifyFact.getFieldValues());
         } else {
             for (Object object : ksession.getObjects()) {
-                if (verifyFact(object,
-                               verifyFact,
-                               populatedData,
-                               resolver)) {
+                if (verifyFact.verifyFact(object,
+                        populatedData,
+                               resolver, this)) {
                     return;
                 }
             }
@@ -79,26 +78,6 @@ public class FactVerifier {
         }
     }
 
-    private boolean verifyFact(Object factObject,
-                               VerifyFact verifyFact,
-                               Map<String, Object> populatedData,
-                               TypeResolver resolver) throws InvocationTargetException,
-            NoSuchMethodException,
-            InstantiationException,
-            IllegalAccessException {
-        if (factObject.getClass().getSimpleName().equals(verifyFact.getName())) {
-            FactFieldValueVerifier fieldVerifier = new FactFieldValueVerifier(populatedData,
-                                                                              verifyFact.getName(),
-                                                                              factObject,
-                                                                              resolver);
-            fieldVerifier.checkFields(verifyFact.getFieldValues());
-            if (verifyFact.wasSuccessful()) {
-                return true;
-            }
-        }
-        return false;
-    }
-
     private Object getFactObject(String factName,
                                  Map<String, Object> populatedData,
                                  Map<String, Object> globalData) {
diff --git a/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/backend/verifiers/RuleFiredVerifier.java b/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/backend/verifiers/RuleFiredVerifier.java
index fca5bdc..c121d40 100644
--- a/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/backend/verifiers/RuleFiredVerifier.java
+++ b/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/backend/verifiers/RuleFiredVerifier.java
@@ -41,17 +41,7 @@ public class RuleFiredVerifier {
         }
 
         if ( verifyRuleFired.getExpectedCount() != null ) {
-            verifyFiredXTimes( verifyRuleFired );
-        }
-    }
-
-    private void verifyFiredXTimes(VerifyRuleFired verifyRuleFired) {
-        if ( verifyRuleFired.getActualResult().equals( verifyRuleFired.getExpectedCount() ) ) {
-            verifyRuleFired.setSuccessResult( true );
-            verifyRuleFired.setExplanation( "Rule [" + verifyRuleFired.getRuleName() + "] activated " + verifyRuleFired.getActualResult() + " times." );
-        } else {
-            verifyRuleFired.setSuccessResult( false );
-            verifyRuleFired.setExplanation( "Rule [" + verifyRuleFired.getRuleName() + "] activated " + verifyRuleFired.getActualResult() + " times. Expected " + verifyRuleFired.getExpectedCount() + " times." );
+            verifyRuleFired.verifyFiredXTimes(this);
         }
     }
 
diff --git a/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/shared/CallFieldValue.java b/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/shared/CallFieldValue.java
index e8cab56..13458be 100644
--- a/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/shared/CallFieldValue.java
+++ b/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/shared/CallFieldValue.java
@@ -90,4 +90,18 @@ public class CallFieldValue
     public boolean hasValue() {
         return value != null && !value.equals( "" );
     }
+
+    public void addFieldValue(CallMethod callMethod) {
+        if ( callMethod.getCallFieldValues() == null ) {
+            callMethod.setCallFieldValues(new CallFieldValue[1]);
+            callMethod.getCallFieldValues()[ 0 ] = this;
+        } else {
+            final CallFieldValue[] newList = new CallFieldValue[ callMethod.getCallFieldValues().length + 1 ];
+            for (int i = 0; i < callMethod.getCallFieldValues().length; i++ ) {
+                newList[ i ] = callMethod.getCallFieldValues()[ i ];
+            }
+            newList[ callMethod.getCallFieldValues().length ] = this;
+            callMethod.setCallFieldValues(newList);
+        }
+    }
 }
diff --git a/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/shared/CallMethod.java b/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/shared/CallMethod.java
index f61758f..4eb7381 100644
--- a/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/shared/CallMethod.java
+++ b/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/shared/CallMethod.java
@@ -70,20 +70,6 @@ public class CallMethod
         this.callFieldValues = newList;
     }
 
-    public void addFieldValue( final CallFieldValue val ) {
-        if ( this.callFieldValues == null ) {
-            this.callFieldValues = new CallFieldValue[ 1 ];
-            this.callFieldValues[ 0 ] = val;
-        } else {
-            final CallFieldValue[] newList = new CallFieldValue[ this.callFieldValues.length + 1 ];
-            for ( int i = 0; i < this.callFieldValues.length; i++ ) {
-                newList[ i ] = this.callFieldValues[ i ];
-            }
-            newList[ this.callFieldValues.length ] = val;
-            this.callFieldValues = newList;
-        }
-    }
-
     public void setState( final int state ) {
         this.state = state;
     }
diff --git a/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/shared/CollectionFieldData.java b/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/shared/CollectionFieldData.java
index c84055a..b79f16c 100644
--- a/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/shared/CollectionFieldData.java
+++ b/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/shared/CollectionFieldData.java
@@ -15,6 +15,8 @@
 
 package org.drools.workbench.models.testscenarios.shared;
 
+import org.drools.workbench.models.testscenarios.backend.populators.CollectionFieldPopulator;
+
 import java.util.ArrayList;
 import java.util.List;
 
@@ -40,4 +42,19 @@ public class CollectionFieldData implements Field {
     public void setCollectionFieldList( final List<FieldData> collectionFieldList ) {
         this.collectionFieldList = collectionFieldList;
     }
+
+    public String createExpression(CollectionFieldPopulator collectionFieldPopulator) {
+        String result = "[";
+
+        int index = 1;
+        for (FieldData fieldData : getCollectionFieldList()) {
+            result += fieldData.getValue().replace("=", "");
+            if (index < getCollectionFieldList().size()) {
+                result += ",";
+            }
+            index++;
+        }
+
+        return result + "]";
+    }
 }
diff --git a/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/shared/ExecutionTrace.java b/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/shared/ExecutionTrace.java
index 077e01b..7023e6e 100644
--- a/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/shared/ExecutionTrace.java
+++ b/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/shared/ExecutionTrace.java
@@ -17,6 +17,7 @@
 package org.drools.workbench.models.testscenarios.shared;
 
 import java.util.Date;
+import java.util.Iterator;
 
 /**
  * This contains lists of rules to include in the scenario (or exclude, as the case may be !).
@@ -83,4 +84,21 @@ public class ExecutionTrace
         return rulesFired;
     }
 
+    public void removeExpected(Scenario scenario) {
+        boolean remove = false;
+        for (Iterator<Fixture> iterator = scenario.getFixtures().iterator(); iterator.hasNext(); ) {
+            Fixture fixture = iterator.next();
+
+            if (fixture.equals(this)) {
+                remove = true;
+                continue;
+            } else if (remove && fixture instanceof ExecutionTrace) {
+                break;
+            }
+
+            if (remove && fixture instanceof Expectation) {
+                iterator.remove();
+            }
+        }
+    }
 }
diff --git a/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/shared/Scenario.java b/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/shared/Scenario.java
index ceefa82..3271618 100644
--- a/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/shared/Scenario.java
+++ b/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/shared/Scenario.java
@@ -138,28 +138,10 @@ public class Scenario implements HasImports {
      * Remove fixtures between this ExecutionTrace and the previous one.
      */
     public void removeExecutionTrace(final ExecutionTrace executionTrace) {
-        removeExpected(executionTrace);
+        executionTrace.removeExpected(this);
         removeGiven(executionTrace);
     }
 
-    private void removeExpected(final ExecutionTrace executionTrace) {
-        boolean remove = false;
-        for (Iterator<Fixture> iterator = getFixtures().iterator(); iterator.hasNext(); ) {
-            Fixture fixture = iterator.next();
-
-            if (fixture.equals(executionTrace)) {
-                remove = true;
-                continue;
-            } else if (remove && fixture instanceof ExecutionTrace) {
-                break;
-            }
-
-            if (remove && fixture instanceof Expectation) {
-                iterator.remove();
-            }
-        }
-    }
-
     private void removeGiven(final ExecutionTrace executionTrace) {
 
         Collections.reverse(getFixtures());
diff --git a/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/shared/VerifyFact.java b/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/shared/VerifyFact.java
index 218a791..539f231 100644
--- a/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/shared/VerifyFact.java
+++ b/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/shared/VerifyFact.java
@@ -16,8 +16,14 @@
 
 package org.drools.workbench.models.testscenarios.shared;
 
+import org.drools.workbench.models.testscenarios.backend.verifiers.FactFieldValueVerifier;
+import org.drools.workbench.models.testscenarios.backend.verifiers.FactVerifier;
+import org.kie.soup.project.datamodel.commons.types.TypeResolver;
+
+import java.lang.reflect.InvocationTargetException;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Map;
 
 /**
  * This is for making assertions over a specific facts value/state AFTER execution.
@@ -88,4 +94,22 @@ public class VerifyFact
         return description;
     }
 
+    public boolean verifyFact(Object factObject,
+                              Map<String, Object> populatedData,
+                              TypeResolver resolver, FactVerifier factVerifier) throws InvocationTargetException,
+            NoSuchMethodException,
+            InstantiationException,
+            IllegalAccessException {
+        if (factObject.getClass().getSimpleName().equals(getName())) {
+            FactFieldValueVerifier fieldVerifier = new FactFieldValueVerifier(populatedData,
+                                                                              getName(),
+                                                                              factObject,
+                                                                              resolver);
+            fieldVerifier.checkFields(getFieldValues());
+            if (wasSuccessful()) {
+                return true;
+            }
+        }
+        return false;
+    }
 }
diff --git a/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/shared/VerifyRuleFired.java b/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/shared/VerifyRuleFired.java
index 9b36dea..a16c23e 100644
--- a/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/shared/VerifyRuleFired.java
+++ b/drools-workbench-models/drools-workbench-models-test-scenarios/src/main/java/org/drools/workbench/models/testscenarios/shared/VerifyRuleFired.java
@@ -16,6 +16,8 @@
 
 package org.drools.workbench.models.testscenarios.shared;
 
+import org.drools.workbench.models.testscenarios.backend.verifiers.RuleFiredVerifier;
+
 public class VerifyRuleFired
         implements
         Expectation {
@@ -104,4 +106,13 @@ public class VerifyRuleFired
         return actualResult;
     }
 
+    public void verifyFiredXTimes(RuleFiredVerifier ruleFiredVerifier) {
+        if ( getActualResult().equals( getExpectedCount() ) ) {
+            setSuccessResult( true );
+            setExplanation( "Rule [" + getRuleName() + "] activated " + getActualResult() + " times." );
+        } else {
+            setSuccessResult( false );
+            setExplanation( "Rule [" + getRuleName() + "] activated " + getActualResult() + " times. Expected " + getExpectedCount() + " times." );
+        }
+    }
 }
diff --git a/drools-workbench-models/drools-workbench-models-test-scenarios/src/test/java/org/drools/workbench/models/testscenarios/backend/executors/MethodExecutorTest.java b/drools-workbench-models/drools-workbench-models-test-scenarios/src/test/java/org/drools/workbench/models/testscenarios/backend/executors/MethodExecutorTest.java
index 3eefff0..ae8f51e 100644
--- a/drools-workbench-models/drools-workbench-models-test-scenarios/src/test/java/org/drools/workbench/models/testscenarios/backend/executors/MethodExecutorTest.java
+++ b/drools-workbench-models/drools-workbench-models-test-scenarios/src/test/java/org/drools/workbench/models/testscenarios/backend/executors/MethodExecutorTest.java
@@ -61,7 +61,7 @@ public class MethodExecutorTest {
         mCall.setMethodName( "setTotalAmount" );
         CallFieldValue field = new CallFieldValue();
         field.value = "1005";
-        mCall.addFieldValue( field );
+        field.addFieldValue(mCall);
 
         methodExecutor.executeMethod( mCall );
         assertTrue( listChesse.getTotalAmount() == 1005 );
@@ -85,7 +85,7 @@ public class MethodExecutorTest {
         mCall.setMethodName( "setMaturity" );
         CallFieldValue field = new CallFieldValue();
         field.value = "=m";
-        mCall.addFieldValue( field );
+        field.addFieldValue(mCall);
 
         methodExecutor.executeMethod( mCall );
 
@@ -111,10 +111,10 @@ public class MethodExecutorTest {
         mCall.setMethodName( "setMaturityAndStatus" );
         CallFieldValue field = new CallFieldValue();
         field.value = "=m";
-        mCall.addFieldValue( field );
+        field.addFieldValue(mCall);
         CallFieldValue field2 = new CallFieldValue();
         field2.value = "1";
-        mCall.addFieldValue( field2 );
+        field2.addFieldValue(mCall);
 
         methodExecutor.executeMethod( mCall );
         assertEquals( m, listCheese.getMaturity() );
diff --git a/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/ast/DMNBaseNode.java b/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/ast/DMNBaseNode.java
index b21daa4..2aadeb7 100644
--- a/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/ast/DMNBaseNode.java
+++ b/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/ast/DMNBaseNode.java
@@ -16,24 +16,21 @@
 
 package org.kie.dmn.core.ast;
 
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.LinkedHashMap;
+import java.util.*;
 import java.util.List;
-import java.util.Map;
-import java.util.Optional;
 
 import javax.xml.namespace.QName;
 
 import org.kie.dmn.api.core.DMNType;
 import org.kie.dmn.api.core.ast.DMNNode;
-import org.kie.dmn.model.api.BusinessKnowledgeModel;
-import org.kie.dmn.model.api.DMNModelInstrumentedBase;
-import org.kie.dmn.model.api.Decision;
-import org.kie.dmn.model.api.Definitions;
-import org.kie.dmn.model.api.InformationRequirement;
-import org.kie.dmn.model.api.KnowledgeRequirement;
-import org.kie.dmn.model.api.NamedElement;
+import org.kie.dmn.core.api.DMNExpressionEvaluator;
+import org.kie.dmn.core.compiler.DMNCompilerContext;
+import org.kie.dmn.core.compiler.DMNCompilerHelper;
+import org.kie.dmn.core.compiler.DMNEvaluatorCompiler;
+import org.kie.dmn.core.impl.DMNModelImpl;
+import org.kie.dmn.model.api.*;
+import org.kie.dmn.model.api.List;
+import org.kie.dmn.model.v1_1.TLiteralExpression;
 
 public abstract class DMNBaseNode implements DMNNode {
 
@@ -147,4 +144,41 @@ public abstract class DMNBaseNode implements DMNNode {
         return builder.toString();
     }
 
+    public DMNExpressionEvaluator compileRelation(DMNCompilerContext ctx, DMNModelImpl model, String relationName, Relation expression, DMNEvaluatorCompiler dmnEvaluatorCompiler) {
+        Relation relationDef = expression;
+        DMNRelationEvaluator relationEval = new DMNRelationEvaluator( getName(), getSource(), relationDef );
+        for ( InformationItem col : relationDef.getColumn() ) {
+            DMNCompilerHelper.checkVariableName( model, col, col.getName() );
+            relationEval.addColumn( col.getName() );
+        }
+        for ( org.kie.dmn.model.api.List row : relationDef.getRow() ) {
+            List<DMNExpressionEvaluator> values = new ArrayList<>();
+            for ( Expression expr : row.getExpression() ) {
+                if (expr instanceof LiteralExpression) {
+                    // DROOLS-2439
+                    LiteralExpression literalExpression = (LiteralExpression) expr;
+                    if (literalExpression.getText() == null || literalExpression.getText().isEmpty()) {
+                        LiteralExpression nullProxy = (literalExpression instanceof TLiteralExpression) ? new TLiteralExpression() : new org.kie.dmn.model.v1_2.TLiteralExpression();
+                        nullProxy.setText("null");
+                        nullProxy.setImportedValues(literalExpression.getImportedValues());
+                        nullProxy.setExpressionLanguage(literalExpression.getExpressionLanguage());
+                        nullProxy.setTypeRef(literalExpression.getTypeRef());
+                        nullProxy.setId(literalExpression.getId());
+                        nullProxy.setLabel(literalExpression.getLabel());
+                        nullProxy.setDescription(literalExpression.getDescription());
+                        nullProxy.setExtensionElements(literalExpression.getExtensionElements());
+                        nullProxy.setParent(literalExpression.getParent());
+                        nullProxy.getNsContext().putAll(literalExpression.getNsContext());
+                        nullProxy.setAdditionalAttributes(literalExpression.getAdditionalAttributes());
+                        nullProxy.setLocation(literalExpression.getLocation());
+                        // do not add `temp` as child of parent.
+                        expr = nullProxy;
+                    }
+                }
+                values.add( dmnEvaluatorCompiler.compileExpression( ctx, model, this, relationName, expr ) );
+            }
+            relationEval.addRow( values );
+        }
+        return relationEval;
+    }
 }
diff --git a/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/compiler/DMNCompilerImpl.java b/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/compiler/DMNCompilerImpl.java
index 540aa40..5fd50da 100644
--- a/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/compiler/DMNCompilerImpl.java
+++ b/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/compiler/DMNCompilerImpl.java
@@ -290,7 +290,7 @@ public class DMNCompilerImpl implements DMNCompiler {
                         ds.setVariable(variable);
                     }
                     // continuing with normal compilation of Decision Service:
-                    compiler.compileNode(ds, this, model);
+                    compileNode(ds, model, compiler);
                 }
             }
             for (DecisionServiceNode ds : model.getDecisionServices()) {
@@ -612,5 +612,27 @@ public class DMNCompilerImpl implements DMNCompiler {
     public DMNEvaluatorCompiler getEvaluatorCompiler() {
         return evaluatorCompiler;
     }
-    
+
+    /** backport of DMN v1.1
+     *
+     * @param ds
+     * @param model
+     * @param decisionServiceCompiler
+     */
+    public void compileNode(DecisionService ds, DMNModelImpl model, DecisionServiceCompiler decisionServiceCompiler) {
+        DMNType type = null;
+        if (ds.getVariable() == null) { // even for the v1.1 backport, variable creation is taken care in DMNCompiler.
+            DMNCompilerHelper.reportMissingVariable(model, ds, ds, Msg.MISSING_VARIABLE_FOR_DS);
+            return;
+        }
+        DMNCompilerHelper.checkVariableName(model, ds, ds.getName());
+        if (ds.getVariable() != null && ds.getVariable().getTypeRef() != null) {
+            type = resolveTypeRef(model, ds, ds.getVariable(), ds.getVariable().getTypeRef());
+        } else {
+            // for now the call bellow will return type UNKNOWN
+            type = resolveTypeRef(model, ds, ds, null);
+        }
+        DecisionServiceNodeImpl bkmn = new DecisionServiceNodeImpl(ds, type);
+        model.addDecisionService(bkmn);
+    }
 }
\ No newline at end of file
diff --git a/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/compiler/DMNEvaluatorCompiler.java b/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/compiler/DMNEvaluatorCompiler.java
index 2b9a25b..6af619f 100644
--- a/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/compiler/DMNEvaluatorCompiler.java
+++ b/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/compiler/DMNEvaluatorCompiler.java
@@ -23,7 +23,6 @@ import org.kie.dmn.core.ast.DMNFunctionDefinitionEvaluator;
 import org.kie.dmn.core.ast.DMNInvocationEvaluator;
 import org.kie.dmn.core.ast.DMNListEvaluator;
 import org.kie.dmn.core.ast.DMNLiteralExpressionEvaluator;
-import org.kie.dmn.core.ast.DMNRelationEvaluator;
 import org.kie.dmn.core.ast.EvaluatorResultImpl;
 import org.kie.dmn.core.compiler.execmodelbased.DMNRuleClassFile;
 import org.kie.dmn.core.compiler.execmodelbased.ExecModelDMNClassLoaderCompiler;
@@ -62,7 +61,6 @@ import org.kie.dmn.model.api.LiteralExpression;
 import org.kie.dmn.model.api.OutputClause;
 import org.kie.dmn.model.api.Relation;
 import org.kie.dmn.model.api.UnaryTests;
-import org.kie.dmn.model.v1_1.TLiteralExpression;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -140,7 +138,7 @@ public class DMNEvaluatorCompiler {
         } else if ( expression instanceof org.kie.dmn.model.api.List ) {
             return compileList( ctx, model, node, exprName, (org.kie.dmn.model.api.List) expression );
         } else if ( expression instanceof Relation ) {
-            return compileRelation( ctx, model, node, exprName, (Relation) expression );
+            return node.compileRelation( ctx, model, exprName, (Relation) expression, this);
         } else if ( expression instanceof Invocation ) {
             return compileInvocation( ctx, model, node, (Invocation) expression );
         } else {
@@ -213,44 +211,6 @@ public class DMNEvaluatorCompiler {
         return invEval;
     }
 
-    private DMNExpressionEvaluator compileRelation(DMNCompilerContext ctx, DMNModelImpl model, DMNBaseNode node, String relationName, Relation expression) {
-        Relation relationDef = expression;
-        DMNRelationEvaluator relationEval = new DMNRelationEvaluator( node.getName(), node.getSource(), relationDef );
-        for ( InformationItem col : relationDef.getColumn() ) {
-            DMNCompilerHelper.checkVariableName( model, col, col.getName() );
-            relationEval.addColumn( col.getName() );
-        }
-        for ( org.kie.dmn.model.api.List row : relationDef.getRow() ) {
-            java.util.List<DMNExpressionEvaluator> values = new ArrayList<>();
-            for ( Expression expr : row.getExpression() ) {
-                if (expr instanceof LiteralExpression) {
-                    // DROOLS-2439
-                    LiteralExpression literalExpression = (LiteralExpression) expr;
-                    if (literalExpression.getText() == null || literalExpression.getText().isEmpty()) {
-                        LiteralExpression nullProxy = (literalExpression instanceof TLiteralExpression) ? new TLiteralExpression() : new org.kie.dmn.model.v1_2.TLiteralExpression();
-                        nullProxy.setText("null");
-                        nullProxy.setImportedValues(literalExpression.getImportedValues());
-                        nullProxy.setExpressionLanguage(literalExpression.getExpressionLanguage());
-                        nullProxy.setTypeRef(literalExpression.getTypeRef());
-                        nullProxy.setId(literalExpression.getId());
-                        nullProxy.setLabel(literalExpression.getLabel());
-                        nullProxy.setDescription(literalExpression.getDescription());
-                        nullProxy.setExtensionElements(literalExpression.getExtensionElements());
-                        nullProxy.setParent(literalExpression.getParent());
-                        nullProxy.getNsContext().putAll(literalExpression.getNsContext());
-                        nullProxy.setAdditionalAttributes(literalExpression.getAdditionalAttributes());
-                        nullProxy.setLocation(literalExpression.getLocation());
-                        // do not add `temp` as child of parent.
-                        expr = nullProxy;
-                    }
-                }
-                values.add( compileExpression( ctx, model, node, relationName, expr ) );
-            }
-            relationEval.addRow( values );
-        }
-        return relationEval;
-    }
-
     private DMNExpressionEvaluator compileList(DMNCompilerContext ctx, DMNModelImpl model, DMNBaseNode node, String listName, org.kie.dmn.model.api.List expression) {
         org.kie.dmn.model.api.List listDef = expression;
         DMNListEvaluator listEval = new DMNListEvaluator( node.getName(), node.getSource(), listDef );
diff --git a/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/compiler/DMNFEELHelper.java b/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/compiler/DMNFEELHelper.java
index 85ed211..44936a7 100644
--- a/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/compiler/DMNFEELHelper.java
+++ b/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/compiler/DMNFEELHelper.java
@@ -163,7 +163,7 @@ public class DMNFEELHelper {
         Queue<FEELEvent> feelEvents = listener.getFeelEvents();
         while ( !feelEvents.isEmpty() ) {
             FEELEvent event = feelEvents.remove();
-            if ( !isDuplicateEvent( model, msg, element ) ) {
+            if ( !model.isDuplicateEvent(msg, element, this) ) {
                 if ( event instanceof SyntaxErrorEvent || event.getSeverity() == FEELEvent.Severity.ERROR ) {
                     if ( msg instanceof Msg.Message2 ) {
                         MsgUtil.reportMessage(
@@ -223,14 +223,6 @@ public class DMNFEELHelper {
         }
     }
 
-    private boolean isDuplicateEvent(DMNModelImpl model, Msg.Message error, DMNElement element) {
-        return model.getMessages().stream().anyMatch( msg -> msg.getMessageType() == error.getType() &&
-                                                             (msg.getSourceId() == element.getId() ||
-                                                              (msg.getSourceId() != null &&
-                                                               element.getId() != null &&
-                                                               msg.getSourceId().equals( element.getId() ))) );
-    }
-
     public ClassOrInterfaceDeclaration generateUnaryTestsSource(String unaryTests, DMNCompilerContext ctx, Type inputColumnType) {
         CompilerContext compilerContext =
                 ctx.toCompilerContext()
diff --git a/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/compiler/DecisionServiceCompiler.java b/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/compiler/DecisionServiceCompiler.java
index 054bad8..daef361 100644
--- a/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/compiler/DecisionServiceCompiler.java
+++ b/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/compiler/DecisionServiceCompiler.java
@@ -23,7 +23,6 @@ import java.util.Optional;
 import javax.xml.namespace.QName;
 
 import org.kie.dmn.api.core.DMNMessage;
-import org.kie.dmn.api.core.DMNType;
 import org.kie.dmn.api.core.ast.DMNNode;
 import org.kie.dmn.api.core.ast.DecisionNode;
 import org.kie.dmn.api.core.ast.InputDataNode;
@@ -49,30 +48,10 @@ public class DecisionServiceCompiler implements DRGElementCompiler {
         return de instanceof DecisionService;
     }
 
-    /** backport of DMN v1.1
-     * 
-     */
-    public void compileNode(DecisionService ds, DMNCompilerImpl compiler, DMNModelImpl model) {
-        DMNType type = null;
-        if (ds.getVariable() == null) { // even for the v1.1 backport, variable creation is taken care in DMNCompiler.
-            DMNCompilerHelper.reportMissingVariable(model, ds, ds, Msg.MISSING_VARIABLE_FOR_DS);
-            return;
-        }
-        DMNCompilerHelper.checkVariableName(model, ds, ds.getName());
-        if (ds.getVariable() != null && ds.getVariable().getTypeRef() != null) {
-            type = compiler.resolveTypeRef(model, ds, ds.getVariable(), ds.getVariable().getTypeRef());
-        } else {
-            // for now the call bellow will return type UNKNOWN
-            type = compiler.resolveTypeRef(model, ds, ds, null);
-        }
-        DecisionServiceNodeImpl bkmn = new DecisionServiceNodeImpl(ds, type);
-        model.addDecisionService(bkmn);
-    }
-
     @Override
     public void compileNode(DRGElement drge, DMNCompilerImpl compiler, DMNModelImpl model) {
         DecisionService ds = (DecisionService) drge;
-        compileNode(ds, compiler, model);
+        compiler.compileNode(ds, model, this);
     }
 
     @Override
diff --git a/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/impl/DMNModelImpl.java b/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/impl/DMNModelImpl.java
index 337b936..eba72d8 100644
--- a/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/impl/DMNModelImpl.java
+++ b/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/impl/DMNModelImpl.java
@@ -55,18 +55,25 @@ import org.kie.dmn.core.api.DMNMessageManager;
 import org.kie.dmn.core.assembler.DMNAssemblerService;
 import org.kie.dmn.core.ast.BusinessKnowledgeModelNodeImpl;
 import org.kie.dmn.core.ast.DecisionNodeImpl;
-import org.kie.dmn.core.compiler.DMNCompilerImpl;
-import org.kie.dmn.core.compiler.DMNTypeRegistry;
-import org.kie.dmn.core.compiler.DMNTypeRegistryV11;
-import org.kie.dmn.core.compiler.DMNTypeRegistryV12;
+import org.kie.dmn.core.compiler.*;
 import org.kie.dmn.core.util.DefaultDMNMessagesManager;
+import org.kie.dmn.core.util.Msg;
+import org.kie.dmn.model.api.DMNElement;
 import org.kie.dmn.model.api.DMNModelInstrumentedBase;
 import org.kie.dmn.model.api.Definitions;
 import org.kie.dmn.model.v1_1.TDefinitions;
 
 public class DMNModelImpl
         implements DMNModel, DMNMessageManager, Externalizable {
-    
+
+    public boolean isDuplicateEvent(Msg.Message error, DMNElement element, DMNFEELHelper dmnfeelHelper) {
+        return getMessages().stream().anyMatch( msg -> msg.getMessageType() == error.getType() &&
+                                                             (msg.getSourceId() == element.getId() ||
+                                                              (msg.getSourceId() != null &&
+                                                               element.getId() != null &&
+                                                               msg.getSourceId().equals( element.getId() ))) );
+    }
+
     private static enum SerializationFormat {
         // To ensure backward compatibility, append only:
         DMN_XML
diff --git a/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/impl/DMNResultImpl.java b/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/impl/DMNResultImpl.java
index a4f47e0..f3c8533 100644
--- a/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/impl/DMNResultImpl.java
+++ b/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/impl/DMNResultImpl.java
@@ -16,10 +16,7 @@
 
 package org.kie.dmn.core.impl;
 
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
+import java.util.*;
 
 import org.kie.dmn.api.core.DMNContext;
 import org.kie.dmn.api.core.DMNDecisionResult;
@@ -27,6 +24,7 @@ import org.kie.dmn.api.core.DMNMessage;
 import org.kie.dmn.api.core.DMNMessageType;
 import org.kie.dmn.api.core.DMNModel;
 import org.kie.dmn.api.core.DMNResult;
+import org.kie.dmn.api.core.ast.DMNNode;
 import org.kie.dmn.api.feel.runtime.events.FEELEvent;
 import org.kie.dmn.core.api.DMNMessageManager;
 import org.kie.dmn.core.util.DefaultDMNMessagesManager;
@@ -127,4 +125,20 @@ public class DMNResultImpl implements DMNResult, DMNMessageManager {
     public void addAllUnfiltered(List<? extends DMNMessage> messages) {
         this.messages.addAllUnfiltered(messages);
     }
+
+    public boolean isNodeValueDefined(DMNNode callerNode, DMNNode node, DMNRuntimeImpl dmnRuntime) {
+        if (node.getModelNamespace().equals(getContext().scopeNamespace().orElse(getModel().getNamespace()))) {
+            return getContext().isDefined(node.getName());
+        } else {
+            Optional<String> importAlias = callerNode.getModelImportAliasFor(node.getModelNamespace(), node.getModelName());
+            if (importAlias.isPresent()) {
+                Object aliasContext = getContext().get(importAlias.get());
+                if (aliasContext != null && (aliasContext instanceof Map<?, ?>)) {
+                    Map<?, ?> map = (Map<?, ?>) aliasContext;
+                    return map.containsKey(node.getName());
+                }
+            }
+            return false;
+        }
+    }
 }
diff --git a/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/impl/DMNRuntimeImpl.java b/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/impl/DMNRuntimeImpl.java
index 164505a..58f6bc6 100644
--- a/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/impl/DMNRuntimeImpl.java
+++ b/kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/impl/DMNRuntimeImpl.java
@@ -18,9 +18,7 @@ package org.kie.dmn.core.impl;
 
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.HashMap;
 import java.util.List;
-import java.util.Map;
 import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;
@@ -31,12 +29,7 @@ import javax.xml.namespace.QName;
 import org.drools.core.definitions.InternalKnowledgePackage;
 import org.drools.core.definitions.ResourceTypePackageRegistry;
 import org.drools.core.impl.InternalKnowledgeBase;
-import org.drools.core.impl.KnowledgeBaseImpl;
-import org.kie.api.KieBase;
-import org.kie.api.definition.KiePackage;
-import org.kie.api.internal.io.ResourceTypePackage;
 import org.kie.api.io.ResourceType;
-import org.kie.api.runtime.KieRuntime;
 import org.kie.dmn.api.core.DMNContext;
 import org.kie.dmn.api.core.DMNDecisionResult;
 import org.kie.dmn.api.core.DMNMessage;
@@ -260,7 +253,7 @@ public class DMNRuntimeImpl
         if (lookupDS.isPresent()) {
             DecisionServiceNodeImpl decisionService = (DecisionServiceNodeImpl) lookupDS.get();
             for (DMNNode dep : decisionService.getInputParameters().values()) {
-                if (!isNodeValueDefined(result, decisionService, dep)) {
+                if (!result.isNodeValueDefined(decisionService, dep, this)) {
                     DMNMessage message = MsgUtil.reportMessage(logger,
                                                                DMNMessage.Severity.WARN,
                                                                decisionService.getSource(),
@@ -289,7 +282,7 @@ public class DMNRuntimeImpl
 
     private void evaluateDecisionService(DMNContext context, DMNResultImpl result, DecisionServiceNode d, boolean typeCheck) {
         DecisionServiceNodeImpl ds = (DecisionServiceNodeImpl) d;
-        if (isNodeValueDefined(result, ds, ds)) {
+        if (result.isNodeValueDefined(ds, ds, this)) {
             // already resolved
             return;
         }
@@ -317,7 +310,7 @@ public class DMNRuntimeImpl
 
     private void evaluateBKM(DMNContext context, DMNResultImpl result, BusinessKnowledgeModelNode b, boolean typeCheck) {
         BusinessKnowledgeModelNodeImpl bkm = (BusinessKnowledgeModelNodeImpl) b;
-        if (isNodeValueDefined(result, bkm, bkm)) {
+        if (result.isNodeValueDefined(bkm, bkm, this)) {
             // already resolved
             // TODO: do we need to check if the defined variable is a function as it should?
             return;
@@ -352,7 +345,7 @@ public class DMNRuntimeImpl
                                            );
                     return;
                 }
-                if (!isNodeValueDefined(result, bkm, dep)) {
+                if (!result.isNodeValueDefined(bkm, dep, this)) {
                     boolean walkingIntoScope = walkIntoImportScope(result, bkm, dep);
                     if( dep instanceof BusinessKnowledgeModelNode ) {
                         evaluateBKM(context, result, (BusinessKnowledgeModelNode) dep, typeCheck);
@@ -397,22 +390,6 @@ public class DMNRuntimeImpl
         }
     }
 
-    private boolean isNodeValueDefined(DMNResultImpl result, DMNNode callerNode, DMNNode node) {
-        if (node.getModelNamespace().equals(result.getContext().scopeNamespace().orElse(result.getModel().getNamespace()))) {
-            return result.getContext().isDefined(node.getName());
-        } else {
-            Optional<String> importAlias = callerNode.getModelImportAliasFor(node.getModelNamespace(), node.getModelName());
-            if (importAlias.isPresent()) {
-                Object aliasContext = result.getContext().get(importAlias.get());
-                if (aliasContext != null && (aliasContext instanceof Map<?, ?>)) {
-                    Map<?, ?> map = (Map<?, ?>) aliasContext;
-                    return map.containsKey(node.getName());
-                }
-            }
-            return false;
-        }
-    }
-
     private boolean walkIntoImportScope(DMNResultImpl result, DMNNode callerNode, DMNNode destinationNode) {
         if (!result.getContext().scopeNamespace().isPresent()) {
             if (destinationNode.getModelNamespace().equals(result.getModel().getNamespace())) {
@@ -464,7 +441,7 @@ public class DMNRuntimeImpl
     private boolean evaluateDecision(DMNContext context, DMNResultImpl result, DecisionNode d, boolean typeCheck) {
         DecisionNodeImpl decision = (DecisionNodeImpl) d;
         String decisionId = d.getModelNamespace().equals(result.getModel().getNamespace()) ? decision.getId() : decision.getModelNamespace() + "#" + decision.getId();
-        if (isNodeValueDefined(result, decision, decision)) {
+        if (result.isNodeValueDefined(decision, decision, this)) {
             // already resolved
             return true;
         } else {
@@ -522,7 +499,7 @@ public class DMNRuntimeImpl
                                            getDependencyIdentifier(decision, dep),
                                            e.getMessage() );
                 }
-                if (!isNodeValueDefined(result, decision, dep)) {
+                if (!result.isNodeValueDefined(decision, dep, this)) {
                     boolean walkingIntoScope = walkIntoImportScope(result, decision, dep);
                     if( dep instanceof DecisionNode ) {
                         if (!evaluateDecision(context, result, (DecisionNode) dep, typeCheck)) {
diff --git a/kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/codegen/feel11/DirectCompilerResult.java b/kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/codegen/feel11/DirectCompilerResult.java
index 9a4b947..ea0cbc3 100644
--- a/kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/codegen/feel11/DirectCompilerResult.java
+++ b/kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/codegen/feel11/DirectCompilerResult.java
@@ -25,6 +25,7 @@ import java.util.Set;
 import com.github.javaparser.ast.body.FieldDeclaration;
 import com.github.javaparser.ast.expr.Expression;
 import org.kie.dmn.feel.lang.Type;
+import org.kie.dmn.feel.lang.types.BuiltInType;
 
 public class DirectCompilerResult {
 
@@ -88,4 +89,11 @@ public class DirectCompilerResult {
     public Expression getExpression() {
         return expression;
     }
+
+    public boolean isNumericConstant(DirectCompilerVisitor directCompilerVisitor) {
+        // might a bit arbitrary, if necessary we should turn this into a flag in `r`
+        return getExpression().isNameExpr() &&
+                resultType.equals(BuiltInType.NUMBER) &&
+                getFieldDeclarations().size() > 0;
+    }
 }
diff --git a/kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/codegen/feel11/DirectCompilerVisitor.java b/kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/codegen/feel11/DirectCompilerVisitor.java
index 60befe4..2a0ad1c 100644
--- a/kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/codegen/feel11/DirectCompilerVisitor.java
+++ b/kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/codegen/feel11/DirectCompilerVisitor.java
@@ -23,7 +23,6 @@ import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.Deque;
-import java.util.EnumSet;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
@@ -619,7 +618,7 @@ public class DirectCompilerVisitor extends FEEL_1_1BaseVisitor<DirectCompilerRes
         // if this is a range of type i..j with i,j numbers:
         // then we make it a constant; otherwise we fallback
         // to the general case of creating the Range object at runtime
-        if (isNumericConstant(start) && isNumericConstant(end)) {
+        if (start.isNumericConstant(this) && end.isNumericConstant(this)) {
             ObjectCreationExpr initializer =
                     new ObjectCreationExpr()
                             .setType(JavaParser.parseClassOrInterfaceType(RangeImpl.class.getCanonicalName()))
@@ -676,13 +675,6 @@ public class DirectCompilerVisitor extends FEEL_1_1BaseVisitor<DirectCompilerRes
         return low == IntervalBoundary.CLOSED ? BOUNDARY_CLOSED : BOUNDARY_OPEN;
     }
 
-    private boolean isNumericConstant(DirectCompilerResult r) {
-        // might a bit arbitrary, if necessary we should turn this into a flag in `r`
-        return r.getExpression().isNameExpr() &&
-                r.resultType.equals(BuiltInType.NUMBER) &&
-                r.getFieldDeclarations().size() > 0;
-    }
-
     @Override
     public DirectCompilerResult visitPositiveUnaryTestIneq(FEEL_1_1Parser.PositiveUnaryTestIneqContext ctx) {
         DirectCompilerResult endpoint = visit(ctx.endpoint());
diff --git a/kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/lang/ast/BaseNode.java b/kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/lang/ast/BaseNode.java
index 2146acb..864934a 100644
--- a/kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/lang/ast/BaseNode.java
+++ b/kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/lang/ast/BaseNode.java
@@ -17,6 +17,7 @@
 package org.kie.dmn.feel.lang.ast;
 
 import java.util.function.Supplier;
+import java.util.stream.Collectors;
 
 import org.antlr.v4.runtime.ParserRuleContext;
 import org.kie.dmn.api.feel.runtime.events.FEELEvent;
@@ -24,6 +25,7 @@ import org.kie.dmn.api.feel.runtime.events.FEELEvent.Severity;
 import org.kie.dmn.feel.lang.EvaluationContext;
 import org.kie.dmn.feel.lang.Type;
 import org.kie.dmn.feel.lang.types.BuiltInType;
+import org.kie.dmn.feel.parser.feel11.ASTBuilderVisitor;
 import org.kie.dmn.feel.parser.feel11.ParserHelper;
 import org.kie.dmn.feel.runtime.events.ASTEventBase;
 import org.kie.dmn.feel.util.Msg;
@@ -160,4 +162,16 @@ public class BaseNode
     public <T> T accept(Visitor<T> v) {
         return v.visit(this);
     }
+
+    public String getFunctionName(ASTBuilderVisitor astBuilderVisitor) {
+        String functionName = null;
+        if ( this instanceof NameRefNode ) {
+            // simple name
+            functionName = getText();
+        } else if (this instanceof QualifiedNameNode) {
+            QualifiedNameNode qn = (QualifiedNameNode) this;
+            functionName = qn.getParts().stream().map( p -> p.getText() ).collect( Collectors.joining( " ") );
+        }
+        return functionName;
+    }
 }
diff --git a/kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/lang/ast/IterationContextNode.java b/kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/lang/ast/IterationContextNode.java
index 4d393be..91d36ab 100644
--- a/kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/lang/ast/IterationContextNode.java
+++ b/kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/lang/ast/IterationContextNode.java
@@ -19,6 +19,8 @@ package org.kie.dmn.feel.lang.ast;
 import org.antlr.v4.runtime.ParserRuleContext;
 import org.kie.dmn.feel.lang.EvaluationContext;
 
+import java.util.Collections;
+
 public class IterationContextNode
         extends BaseNode {
 
@@ -85,4 +87,11 @@ public class IterationContextNode
         return v.visit(this);
     }
 
+    public QuantifiedExpressionNode.QEIteration createQuantifiedExpressionIterationContext(EvaluationContext ctx, QuantifiedExpressionNode quantifiedExpressionNode) {
+        String name = evaluateName( ctx );
+        Object result = evaluate( ctx );
+        Iterable values = result instanceof Iterable ? (Iterable) result : Collections.singletonList( result );
+        QuantifiedExpressionNode.QEIteration qei = new QuantifiedExpressionNode.QEIteration( name, values );
+        return qei;
+    }
 }
diff --git a/kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/lang/ast/QuantifiedExpressionNode.java b/kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/lang/ast/QuantifiedExpressionNode.java
index 1b1e71d..080a770 100644
--- a/kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/lang/ast/QuantifiedExpressionNode.java
+++ b/kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/lang/ast/QuantifiedExpressionNode.java
@@ -17,7 +17,6 @@
 package org.kie.dmn.feel.lang.ast;
 
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 
@@ -141,7 +140,7 @@ public class QuantifiedExpressionNode
         QEIteration[] ictx = new QEIteration[iterationContexts.size()];
         int i = 0;
         for ( IterationContextNode icn : iterationContexts ) {
-            ictx[i] = createQuantifiedExpressionIterationContext( ctx, icn );
+            ictx[i] = icn.createQuantifiedExpressionIterationContext( ctx, this);
             if( i < ictx.length - 1 ) {
                 // initalize all contexts except the very last one, as it will be initialized in the nextIteration() method
                 setValueIntoContext( ctx, ictx[i] );
@@ -151,14 +150,6 @@ public class QuantifiedExpressionNode
         return ictx;
     }
 
-    private QEIteration createQuantifiedExpressionIterationContext(EvaluationContext ctx, IterationContextNode icn) {
-        String name = icn.evaluateName( ctx );
-        Object result = icn.evaluate( ctx );
-        Iterable values = result instanceof Iterable ? (Iterable) result : Collections.singletonList( result );
-        QEIteration qei = new QEIteration( name, values );
-        return qei;
-    }
-
     public static class QEIteration {
         private String name;
         private Iterable values;
diff --git a/kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/parser/feel11/ASTBuilderVisitor.java b/kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/parser/feel11/ASTBuilderVisitor.java
index a70aa4f..168ebdf 100644
--- a/kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/parser/feel11/ASTBuilderVisitor.java
+++ b/kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/parser/feel11/ASTBuilderVisitor.java
@@ -24,7 +24,6 @@ import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
-import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
 import org.antlr.v4.runtime.ParserRuleContext;
@@ -44,7 +43,6 @@ import org.kie.dmn.feel.lang.ast.InstanceOfNode;
 import org.kie.dmn.feel.lang.ast.ListNode;
 import org.kie.dmn.feel.lang.ast.NameDefNode;
 import org.kie.dmn.feel.lang.ast.NameRefNode;
-import org.kie.dmn.feel.lang.ast.QualifiedNameNode;
 import org.kie.dmn.feel.lang.ast.QuantifiedExpressionNode;
 import org.kie.dmn.feel.lang.ast.RangeNode;
 import org.kie.dmn.feel.lang.ast.TypeNode;
@@ -478,20 +476,8 @@ public class ASTBuilderVisitor
         }
     }
 
-    private String getFunctionName(BaseNode name) {
-        String functionName = null;
-        if ( name instanceof NameRefNode ) {
-            // simple name
-            functionName = name.getText();
-        } else if (name instanceof QualifiedNameNode) {
-            QualifiedNameNode qn = (QualifiedNameNode) name;
-            functionName = qn.getParts().stream().map( p -> p.getText() ).collect( Collectors.joining( " ") );
-        }
-        return functionName;
-    }
-
     private BaseNode buildFunctionCall(ParserRuleContext ctx, BaseNode name, ListNode params) {
-        String functionName = getFunctionName( name );
+        String functionName = name.getFunctionName(this);
         return ASTBuilderFactory.newFunctionInvocationNode( ctx, name, params );
     }
 
diff --git a/kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/runtime/decisiontables/DTDecisionRule.java b/kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/runtime/decisiontables/DTDecisionRule.java
index 00c82b7..f8564f2 100644
--- a/kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/runtime/decisiontables/DTDecisionRule.java
+++ b/kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/runtime/decisiontables/DTDecisionRule.java
@@ -17,9 +17,13 @@
 package org.kie.dmn.feel.runtime.decisiontables;
 
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 
+import org.kie.dmn.feel.FEEL;
 import org.kie.dmn.feel.lang.CompiledExpression;
+import org.kie.dmn.feel.lang.EvaluationContext;
 import org.kie.dmn.feel.runtime.UnaryTest;
 
 /**
@@ -84,4 +88,25 @@ the output components of this DecisionRule.
     public int getIndex() {
         return index;
     }
+
+    /**
+     *  Each hit results in one output value (multiple outputs are collected into a single context value)
+     * @param ctx
+     * @param feel
+     * @param decisionTable
+     */
+    public Object hitToOutput(EvaluationContext ctx, FEEL feel, DecisionTableImpl decisionTable) {
+        List<CompiledExpression> outputEntries = getOutputEntry();
+        Map<String, Object> values = ctx.getAllValues();
+        if ( outputEntries.size() == 1 ) {
+            Object value = feel.evaluate( outputEntries.get( 0 ), values );
+            return value;
+        } else {
+            Map<String, Object> output = new HashMap<>();
+            for (int i = 0; i < decisionTable.getOutputs().size(); i++) {
+                output.put(decisionTable.getOutputs().get(i).getName(), feel.evaluate(outputEntries.get(i), values));
+            }
+            return output;
+        }
+    }
 }
diff --git a/kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/runtime/decisiontables/DecisionTableImpl.java b/kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/runtime/decisiontables/DecisionTableImpl.java
index f63a651..c1db142 100644
--- a/kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/runtime/decisiontables/DecisionTableImpl.java
+++ b/kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/runtime/decisiontables/DecisionTableImpl.java
@@ -19,7 +19,6 @@ package org.kie.dmn.feel.runtime.decisiontables;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
-import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.TreeMap;
@@ -291,29 +290,11 @@ public class DecisionTableImpl implements DecisionTable {
     }
 
     private List<Object> evaluateResults(EvaluationContext ctx, FEEL feel, Object[] params, List<DTDecisionRule> matchingDecisionRules) {
-        List<Object> results = matchingDecisionRules.stream().map( dr -> hitToOutput( ctx, feel, dr ) ).collect( Collectors.toList());
+        List<Object> results = matchingDecisionRules.stream().map( dr -> dr.hitToOutput( ctx, feel, this) ).collect( Collectors.toList());
         return results;
     }
 
     /**
-     *  Each hit results in one output value (multiple outputs are collected into a single context value)
-     */
-    private Object hitToOutput(EvaluationContext ctx, FEEL feel, DTDecisionRule rule) {
-        List<CompiledExpression> outputEntries = rule.getOutputEntry();
-        Map<String, Object> values = ctx.getAllValues();
-        if ( outputEntries.size() == 1 ) {
-            Object value = feel.evaluate( outputEntries.get( 0 ), values );
-            return value;
-        } else {
-            Map<String, Object> output = new HashMap<>();
-            for (int i = 0; i < outputs.size(); i++) {
-                output.put(outputs.get(i).getName(), feel.evaluate(outputEntries.get(i), values));
-            }
-            return output;
-        }
-    }
-
-    /**
      *  No hits matched for the DT, so calculate result based on default outputs
      */
     private Object defaultToOutput(EvaluationContext ctx, FEEL feel) {
diff --git a/kie-pmml/src/main/java/org/kie/pmml/pmml_4_2/model/PMML4ModelFactory.java b/kie-pmml/src/main/java/org/kie/pmml/pmml_4_2/model/PMML4ModelFactory.java
index 4bc2c45..201b522 100644
--- a/kie-pmml/src/main/java/org/kie/pmml/pmml_4_2/model/PMML4ModelFactory.java
+++ b/kie-pmml/src/main/java/org/kie/pmml/pmml_4_2/model/PMML4ModelFactory.java
@@ -25,7 +25,6 @@ import org.dmg.pmml.pmml_4_2.descr.Segment;
 import org.dmg.pmml.pmml_4_2.descr.TreeModel;
 import org.kie.pmml.pmml_4_2.PMML4Model;
 import org.kie.pmml.pmml_4_2.PMML4Unit;
-import org.kie.pmml.pmml_4_2.model.mining.MiningSegmentation;
 
 public class PMML4ModelFactory {
 
@@ -39,25 +38,6 @@ public class PMML4ModelFactory {
         return PMML4ModelFactory.instance;
     }
 
-    public PMML4Model getModel(Segment segment, MiningSegmentation segmentation) {
-        PMML4Model model = null;
-        if (segment.getMiningModel() != null) {
-            MiningModel mm = segment.getMiningModel();
-            model = new Miningmodel(mm.getModelName(), mm, segmentation.getOwner(), null);
-        } else if (segment.getRegressionModel() != null) {
-            RegressionModel rm = segment.getRegressionModel();
-            model = new Regression(rm.getModelName(), rm, segmentation.getOwner(), null);
-        } else if (segment.getScorecard() != null) {
-            Scorecard sc = segment.getScorecard();
-            model = new ScorecardModel(sc.getModelName(), sc, segmentation.getOwner(), null);
-        } else if (segment.getTreeModel() != null) {
-            TreeModel tm = segment.getTreeModel();
-            model = new Treemodel(tm.getModelName(), tm, segmentation.getOwner(), null);
-        }
-
-        return model;
-    }
-
     public List<PMML4Model> getModels(PMML4Unit owner) {
         List<PMML4Model> pmml4Models = new ArrayList<>();
         owner.getRawPMML().getAssociationModelsAndBaselineModelsAndClusteringModels()
diff --git a/kie-pmml/src/main/java/org/kie/pmml/pmml_4_2/model/mining/MiningSegment.java b/kie-pmml/src/main/java/org/kie/pmml/pmml_4_2/model/mining/MiningSegment.java
index 149e0bf..546a2bf 100644
--- a/kie-pmml/src/main/java/org/kie/pmml/pmml_4_2/model/mining/MiningSegment.java
+++ b/kie-pmml/src/main/java/org/kie/pmml/pmml_4_2/model/mining/MiningSegment.java
@@ -41,7 +41,7 @@ public class MiningSegment implements Comparable<MiningSegment> {
     public MiningSegment( MiningSegmentation owner, Segment segment, int segmentIndex) {
         this.owner = owner;
         
-        this.internalModel = PMML4ModelFactory.getInstance().getModel(segment,owner);
+        this.internalModel = owner.getModel(segment, PMML4ModelFactory.getInstance());
         this.segmentId = segment.getId();
         this.segmentIndex = segmentIndex;
         this.weight = segment.getWeight();
diff --git a/kie-pmml/src/main/java/org/kie/pmml/pmml_4_2/model/mining/MiningSegmentation.java b/kie-pmml/src/main/java/org/kie/pmml/pmml_4_2/model/mining/MiningSegmentation.java
index fa2a2c6..fa97b3c 100644
--- a/kie-pmml/src/main/java/org/kie/pmml/pmml_4_2/model/mining/MiningSegmentation.java
+++ b/kie-pmml/src/main/java/org/kie/pmml/pmml_4_2/model/mining/MiningSegmentation.java
@@ -28,9 +28,8 @@ import org.dmg.pmml.pmml_4_2.descr.Segment;
 import org.dmg.pmml.pmml_4_2.descr.Segmentation;
 import org.kie.api.io.Resource;
 import org.kie.internal.io.ResourceFactory;
-import org.kie.pmml.pmml_4_2.model.Miningmodel;
-import org.kie.pmml.pmml_4_2.model.PMMLMiningField;
-import org.kie.pmml.pmml_4_2.model.PMMLOutputField;
+import org.kie.pmml.pmml_4_2.PMML4Model;
+import org.kie.pmml.pmml_4_2.model.*;
 import org.mvel2.integration.impl.MapVariableResolverFactory;
 import org.mvel2.templates.CompiledTemplate;
 import org.mvel2.templates.SimpleTemplateRegistry;
@@ -235,4 +234,23 @@ public class MiningSegmentation {
 	public String getSegmentationAgendaId() {
 		return getOwner().getModelId()+"_"+getSegmentationId();
 	}
+
+    public PMML4Model getModel(Segment segment, PMML4ModelFactory pmml4ModelFactory) {
+        PMML4Model model = null;
+        if (segment.getMiningModel() != null) {
+            MiningModel mm = segment.getMiningModel();
+            model = new Miningmodel(mm.getModelName(), mm, getOwner(), null);
+        } else if (segment.getRegressionModel() != null) {
+            RegressionModel rm = segment.getRegressionModel();
+            model = new Regression(rm.getModelName(), rm, getOwner(), null);
+        } else if (segment.getScorecard() != null) {
+            Scorecard sc = segment.getScorecard();
+            model = new ScorecardModel(sc.getModelName(), sc, getOwner(), null);
+        } else if (segment.getTreeModel() != null) {
+            TreeModel tm = segment.getTreeModel();
+            model = new Treemodel(tm.getModelName(), tm, getOwner(), null);
+        }
+
+        return model;
+    }
 }
