diff --git a/bootstrap-core/src/main/java/com/navercorp/pinpoint/bootstrap/plugin/proxy/ProxyHttpHeader.java b/bootstrap-core/src/main/java/com/navercorp/pinpoint/bootstrap/plugin/proxy/ProxyHttpHeader.java
index ff56cbd..9c94dbb 100644
--- a/bootstrap-core/src/main/java/com/navercorp/pinpoint/bootstrap/plugin/proxy/ProxyHttpHeader.java
+++ b/bootstrap-core/src/main/java/com/navercorp/pinpoint/bootstrap/plugin/proxy/ProxyHttpHeader.java
@@ -144,4 +144,50 @@ public class ProxyHttpHeader {
         sb.append('}');
         return sb.toString();
     }
+
+    public void parseFormat(final String value, final ProxyHttpHeaderParser.ProxyTimeUnit proxyTimeUnit, ProxyHttpHeaderParser proxyHttpHeaderParser) {
+        for (String token : StringUtils.tokenizeToStringList(value, " ")) {
+            if (token.startsWith("t=")) {
+                // convert to milliseconds from microseconds.
+                final long receivedTimeMillis = proxyTimeUnit.toReceivedTimeMillis(token.substring(2));
+                if (receivedTimeMillis > 0) {
+                    setReceivedTimeMillis(receivedTimeMillis);
+                    setValid(true);
+                } else {
+                    // stop.
+                    setValid(false);
+                    setCause("invalid received time");
+                    return;
+                }
+            } else if (token.startsWith("D=")) {
+                final long durationTimeMicroseconds = proxyTimeUnit.toDurationTimeMicros(token.substring(2));
+                if (durationTimeMicroseconds > 0) {
+                    setDurationTimeMicroseconds((int) durationTimeMicroseconds);
+                }
+            } else if (token.startsWith("i=")) {
+                try {
+                    final int idlePercent = Integer.parseInt(token.substring(2));
+                    if (idlePercent >= 0 && idlePercent <= 100) {
+                        setIdlePercent((byte) idlePercent);
+                        continue;
+                    }
+                } catch (NumberFormatException ignored) {
+                }
+            } else if (token.startsWith("b=")) {
+                try {
+                    int busyPercent = Integer.parseInt(token.substring(2));
+                    if (busyPercent >= 0 && busyPercent <= 100) {
+                        setBusyPercent((byte) busyPercent);
+                        continue;
+                    }
+                } catch (NumberFormatException ignored) {
+                }
+            } else if (token.startsWith("app=")) {
+                final String app = token.substring(4).trim();
+                if (!app.isEmpty()) {
+                    setApp(app);
+                }
+            }
+        }
+    }
 }
\ No newline at end of file
diff --git a/bootstrap-core/src/main/java/com/navercorp/pinpoint/bootstrap/plugin/proxy/ProxyHttpHeaderParser.java b/bootstrap-core/src/main/java/com/navercorp/pinpoint/bootstrap/plugin/proxy/ProxyHttpHeaderParser.java
index 38e8b6b..0436c7f 100644
--- a/bootstrap-core/src/main/java/com/navercorp/pinpoint/bootstrap/plugin/proxy/ProxyHttpHeaderParser.java
+++ b/bootstrap-core/src/main/java/com/navercorp/pinpoint/bootstrap/plugin/proxy/ProxyHttpHeaderParser.java
@@ -16,8 +16,6 @@
 
 package com.navercorp.pinpoint.bootstrap.plugin.proxy;
 
-import com.navercorp.pinpoint.common.util.StringUtils;
-
 /**
  * @deprecated As of release 1.8.2, replaced by ProxyRequestParser
  * @author jaehong.kim
@@ -37,11 +35,11 @@ public class ProxyHttpHeaderParser {
         }
 
         if (type == ProxyHttpHeader.TYPE_APP) {
-            parseFormat(header, value, appUnit);
+            header.parseFormat(value, appUnit, this);
         } else if (type == ProxyHttpHeader.TYPE_NGINX) {
-            parseFormat(header, value, nginxUnit);
+            header.parseFormat(value, nginxUnit, this);
         } else if (type == ProxyHttpHeader.TYPE_APACHE) {
-            parseFormat(header, value, apacheUnit);
+            header.parseFormat(value, apacheUnit, this);
         } else {
             header.setValid(false);
             header.setCause("unknown type");
@@ -50,52 +48,6 @@ public class ProxyHttpHeaderParser {
         return header;
     }
 
-    void parseFormat(final ProxyHttpHeader header, final String value, final ProxyTimeUnit proxyTimeUnit) {
-        for (String token : StringUtils.tokenizeToStringList(value, " ")) {
-            if (token.startsWith("t=")) {
-                // convert to milliseconds from microseconds.
-                final long receivedTimeMillis = proxyTimeUnit.toReceivedTimeMillis(token.substring(2));
-                if (receivedTimeMillis > 0) {
-                    header.setReceivedTimeMillis(receivedTimeMillis);
-                    header.setValid(true);
-                } else {
-                    // stop.
-                    header.setValid(false);
-                    header.setCause("invalid received time");
-                    return;
-                }
-            } else if (token.startsWith("D=")) {
-                final long durationTimeMicroseconds = proxyTimeUnit.toDurationTimeMicros(token.substring(2));
-                if (durationTimeMicroseconds > 0) {
-                    header.setDurationTimeMicroseconds((int) durationTimeMicroseconds);
-                }
-            } else if (token.startsWith("i=")) {
-                try {
-                    final int idlePercent = Integer.parseInt(token.substring(2));
-                    if (idlePercent >= 0 && idlePercent <= 100) {
-                        header.setIdlePercent((byte) idlePercent);
-                        continue;
-                    }
-                } catch (NumberFormatException ignored) {
-                }
-            } else if (token.startsWith("b=")) {
-                try {
-                    int busyPercent = Integer.parseInt(token.substring(2));
-                    if (busyPercent >= 0 && busyPercent <= 100) {
-                        header.setBusyPercent((byte) busyPercent);
-                        continue;
-                    }
-                } catch (NumberFormatException ignored) {
-                }
-            } else if (token.startsWith("app=")) {
-                final String app = token.substring(4).trim();
-                if (!app.isEmpty()) {
-                    header.setApp(app);
-                }
-            }
-        }
-    }
-
     // for testcase.
     ProxyTimeUnit getNginxUnit() {
         return nginxUnit;
diff --git a/collector/src/main/java/com/navercorp/pinpoint/collector/cluster/ThriftAgentConnection.java b/collector/src/main/java/com/navercorp/pinpoint/collector/cluster/ThriftAgentConnection.java
index 8e7c0f2..975b345 100644
--- a/collector/src/main/java/com/navercorp/pinpoint/collector/cluster/ThriftAgentConnection.java
+++ b/collector/src/main/java/com/navercorp/pinpoint/collector/cluster/ThriftAgentConnection.java
@@ -16,12 +16,16 @@
 
 package com.navercorp.pinpoint.collector.cluster;
 
+import com.navercorp.pinpoint.collector.cluster.route.StreamRouteHandler;
 import com.navercorp.pinpoint.common.util.Assert;
 import com.navercorp.pinpoint.common.util.CollectionUtils;
 import com.navercorp.pinpoint.rpc.Future;
 import com.navercorp.pinpoint.rpc.server.ChannelProperties;
 import com.navercorp.pinpoint.rpc.server.DefaultChannelProperties;
 import com.navercorp.pinpoint.rpc.server.PinpointServer;
+import com.navercorp.pinpoint.rpc.stream.ClientStreamChannel;
+import com.navercorp.pinpoint.rpc.stream.ClientStreamChannelEventHandler;
+import com.navercorp.pinpoint.rpc.stream.StreamException;
 import com.navercorp.pinpoint.thrift.io.TCommandType;
 import com.navercorp.pinpoint.thrift.io.TCommandTypeVersion;
 
@@ -145,4 +149,8 @@ public class ThriftAgentConnection implements ClusterPoint<byte[]> {
         return false;
     }
 
+    public ClientStreamChannel createStreamChannel(byte[] payload, ClientStreamChannelEventHandler streamChannelEventHandler, StreamRouteHandler streamRouteHandler) throws StreamException {
+        PinpointServer pinpointServer = getPinpointServer();
+        return pinpointServer.openStream(payload, streamChannelEventHandler);
+    }
 }
diff --git a/collector/src/main/java/com/navercorp/pinpoint/collector/cluster/route/StreamRouteHandler.java b/collector/src/main/java/com/navercorp/pinpoint/collector/cluster/route/StreamRouteHandler.java
index 8bd0c74..4450327 100644
--- a/collector/src/main/java/com/navercorp/pinpoint/collector/cluster/route/StreamRouteHandler.java
+++ b/collector/src/main/java/com/navercorp/pinpoint/collector/cluster/route/StreamRouteHandler.java
@@ -24,7 +24,6 @@ import com.navercorp.pinpoint.collector.cluster.route.filter.RouteFilter;
 import com.navercorp.pinpoint.rpc.packet.stream.StreamClosePacket;
 import com.navercorp.pinpoint.rpc.packet.stream.StreamCode;
 import com.navercorp.pinpoint.rpc.packet.stream.StreamResponsePacket;
-import com.navercorp.pinpoint.rpc.server.PinpointServer;
 import com.navercorp.pinpoint.rpc.stream.ClientStreamChannel;
 import com.navercorp.pinpoint.rpc.stream.ClientStreamChannelEventHandler;
 import com.navercorp.pinpoint.rpc.stream.ServerStreamChannel;
@@ -115,7 +114,7 @@ public class StreamRouteHandler extends AbstractRouteHandler<StreamEvent> {
                 ServerStreamChannel consumerStreamChannel = event.getStreamChannel();
                 consumerStreamChannel.setAttributeIfAbsent(ATTACHMENT_KEY, routeManager);
 
-                ClientStreamChannel producerStreamChannel = createStreamChannel((ThriftAgentConnection) clusterPoint, event.getDeliveryCommand().getPayload(), routeManager);
+                ClientStreamChannel producerStreamChannel = ((ThriftAgentConnection) clusterPoint).createStreamChannel(event.getDeliveryCommand().getPayload(), routeManager, this);
                 routeManager.setProducer(producerStreamChannel);
                 return createResponse(TRouteResult.OK);
             } else if (clusterPoint instanceof GrpcAgentConnection) {
@@ -141,12 +140,7 @@ public class StreamRouteHandler extends AbstractRouteHandler<StreamEvent> {
 
         return createResponse(TRouteResult.UNKNOWN);
     }
-    
-    private ClientStreamChannel createStreamChannel(ThriftAgentConnection clusterPoint, byte[] payload, ClientStreamChannelEventHandler streamChannelEventHandler) throws StreamException {
-        PinpointServer pinpointServer = clusterPoint.getPinpointServer();
-        return pinpointServer.openStream(payload, streamChannelEventHandler);
-    }
-    
+
     public void close(ServerStreamChannel consumerStreamChannel) {
         Object attachmentListener = consumerStreamChannel.getAttribute(ATTACHMENT_KEY);
         
diff --git a/commons-hbase/src/main/java/com/navercorp/pinpoint/common/hbase/parallel/ParallelResultScanner.java b/commons-hbase/src/main/java/com/navercorp/pinpoint/common/hbase/parallel/ParallelResultScanner.java
index db10d8e..4c7c854 100644
--- a/commons-hbase/src/main/java/com/navercorp/pinpoint/common/hbase/parallel/ParallelResultScanner.java
+++ b/commons-hbase/src/main/java/com/navercorp/pinpoint/common/hbase/parallel/ParallelResultScanner.java
@@ -60,7 +60,7 @@ public class ParallelResultScanner implements ResultScanner {
         final ScanTaskConfig scanTaskConfig = new ScanTaskConfig(tableName, hbaseAccessor, keyDistributor, originalScan.getCaching());
         final Scan[] splitScans = splitScans(originalScan);
 
-        this.scanTasks = createScanTasks(scanTaskConfig, splitScans, numParallelThreads);
+        this.scanTasks = scanTaskConfig.createScanTasks(splitScans, numParallelThreads, this);
         this.nextResults = new Result[scanTasks.size()];
         for (ScanTask scanTask : scanTasks) {
             executor.execute(scanTask);
@@ -76,31 +76,6 @@ public class ParallelResultScanner implements ResultScanner {
         return scans;
     }
 
-    private List<ScanTask> createScanTasks(ScanTaskConfig scanTaskConfig, Scan[] splitScans, int numParallelThreads) {
-        if (splitScans.length <= numParallelThreads) {
-            List<ScanTask> scanTasks = new ArrayList<>(splitScans.length);
-            for (Scan scan : splitScans) {
-                scanTasks.add(new ScanTask(scanTaskConfig, scan));
-            }
-            return scanTasks;
-        } else {
-            int maxIndividualScans = (splitScans.length + (numParallelThreads - 1)) / numParallelThreads;
-            List<List<Scan>> scanDistributions = new ArrayList<>(numParallelThreads);
-            for (int i = 0; i < numParallelThreads; i++) {
-                scanDistributions.add(new ArrayList<Scan>(maxIndividualScans));
-            }
-            for (int i = 0; i < splitScans.length; i++) {
-                scanDistributions.get(i % numParallelThreads).add(splitScans[i]);
-            }
-            List<ScanTask> scanTasks = new ArrayList<>(numParallelThreads);
-            for (List<Scan> scanDistribution : scanDistributions) {
-                Scan[] scansForSingleTask = scanDistribution.toArray(new Scan[0]);
-                scanTasks.add(new ScanTask(scanTaskConfig, scansForSingleTask));
-            }
-            return scanTasks;
-        }
-    }
-
     private boolean hasNext() throws IOException {
         if (next != null) {
             return true;
diff --git a/commons-hbase/src/main/java/com/navercorp/pinpoint/common/hbase/parallel/ScanTaskConfig.java b/commons-hbase/src/main/java/com/navercorp/pinpoint/common/hbase/parallel/ScanTaskConfig.java
index b7a2b92..77d5d0c 100644
--- a/commons-hbase/src/main/java/com/navercorp/pinpoint/common/hbase/parallel/ScanTaskConfig.java
+++ b/commons-hbase/src/main/java/com/navercorp/pinpoint/common/hbase/parallel/ScanTaskConfig.java
@@ -22,8 +22,11 @@ import com.sematext.hbase.wd.AbstractRowKeyDistributor;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.hbase.HConstants;
 import org.apache.hadoop.hbase.TableName;
+import org.apache.hadoop.hbase.client.Scan;
 
 import java.nio.charset.Charset;
+import java.util.ArrayList;
+import java.util.List;
 
 /**
  * @author HyunGil Jeong
@@ -86,4 +89,29 @@ public class ScanTaskConfig {
     public int getScanTaskQueueSize() {
         return scanTaskQueueSize;
     }
+
+    public List<ScanTask> createScanTasks(Scan[] splitScans, int numParallelThreads, ParallelResultScanner results) {
+        if (splitScans.length <= numParallelThreads) {
+            List<ScanTask> scanTasks = new ArrayList<>(splitScans.length);
+            for (Scan scan : splitScans) {
+                scanTasks.add(new ScanTask(this, scan));
+            }
+            return scanTasks;
+        } else {
+            int maxIndividualScans = (splitScans.length + (numParallelThreads - 1)) / numParallelThreads;
+            List<List<Scan>> scanDistributions = new ArrayList<>(numParallelThreads);
+            for (int i = 0; i < numParallelThreads; i++) {
+                scanDistributions.add(new ArrayList<Scan>(maxIndividualScans));
+            }
+            for (int i = 0; i < splitScans.length; i++) {
+                scanDistributions.get(i % numParallelThreads).add(splitScans[i]);
+            }
+            List<ScanTask> scanTasks = new ArrayList<>(numParallelThreads);
+            for (List<Scan> scanDistribution : scanDistributions) {
+                Scan[] scansForSingleTask = scanDistribution.toArray(new Scan[0]);
+                scanTasks.add(new ScanTask(this, scansForSingleTask));
+            }
+            return scanTasks;
+        }
+    }
 }
diff --git a/commons-server/src/main/java/com/navercorp/pinpoint/common/server/bo/SpanBo.java b/commons-server/src/main/java/com/navercorp/pinpoint/common/server/bo/SpanBo.java
index a91b155..4f9936a 100644
--- a/commons-server/src/main/java/com/navercorp/pinpoint/common/server/bo/SpanBo.java
+++ b/commons-server/src/main/java/com/navercorp/pinpoint/common/server/bo/SpanBo.java
@@ -17,7 +17,6 @@
 package com.navercorp.pinpoint.common.server.bo;
 
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.List;
 
 import com.navercorp.pinpoint.common.util.TransactionId;
@@ -224,13 +223,6 @@ public class SpanBo implements Event, BasicSpan {
     }
 
 
-    public void addSpanEvent(SpanEventBo spanEventBo) {
-        if (spanEventBo == null) {
-            return;
-        }
-        spanEventBoList.add(spanEventBo);
-    }
-
     public List<SpanEventBo> getSpanEventBoList() {
         return spanEventBoList;
     }
diff --git a/commons-server/src/main/java/com/navercorp/pinpoint/common/server/bo/SpanEventBo.java b/commons-server/src/main/java/com/navercorp/pinpoint/common/server/bo/SpanEventBo.java
index c2de9dd..fa9d7c4 100644
--- a/commons-server/src/main/java/com/navercorp/pinpoint/common/server/bo/SpanEventBo.java
+++ b/commons-server/src/main/java/com/navercorp/pinpoint/common/server/bo/SpanEventBo.java
@@ -269,4 +269,11 @@ public class SpanEventBo implements Event {
         builder.append("}");
         return builder.toString();
     }
+
+    public void addSpanEvent(SpanBo spanBo) {
+        if (this == null) {
+            return;
+        }
+        spanBo.getSpanEventBoList().add(this);
+    }
 }
diff --git a/commons-server/src/main/java/com/navercorp/pinpoint/common/server/bo/event/MonitorInfoBo.java b/commons-server/src/main/java/com/navercorp/pinpoint/common/server/bo/event/MonitorInfoBo.java
index e4cc7bc..9a84849 100644
--- a/commons-server/src/main/java/com/navercorp/pinpoint/common/server/bo/event/MonitorInfoBo.java
+++ b/commons-server/src/main/java/com/navercorp/pinpoint/common/server/bo/event/MonitorInfoBo.java
@@ -16,6 +16,9 @@
 
 package com.navercorp.pinpoint.common.server.bo.event;
 
+import com.navercorp.pinpoint.common.buffer.Buffer;
+import com.navercorp.pinpoint.common.server.util.AgentEventMessageSerializerV1;
+
 /**
  * @author jaehong.kim
  */
@@ -47,4 +50,9 @@ public class MonitorInfoBo {
         sb.append('}');
         return sb.toString();
     }
+
+    public void putMonitorInfoBo(final Buffer buffer, AgentEventMessageSerializerV1 agentEventMessageSerializerV1) {
+        buffer.putInt(getStackDepth());
+        buffer.putPrefixedString(getStackFrame());
+    }
 }
diff --git a/commons-server/src/main/java/com/navercorp/pinpoint/common/server/util/AgentEventMessageSerializerV1.java b/commons-server/src/main/java/com/navercorp/pinpoint/common/server/util/AgentEventMessageSerializerV1.java
index 7bb04b8..129c872 100644
--- a/commons-server/src/main/java/com/navercorp/pinpoint/common/server/util/AgentEventMessageSerializerV1.java
+++ b/commons-server/src/main/java/com/navercorp/pinpoint/common/server/util/AgentEventMessageSerializerV1.java
@@ -79,7 +79,7 @@ public class AgentEventMessageSerializerV1 {
         buffer.putVInt(lockedMonitorListSize);
         if (lockedMonitorListSize > 0) {
             for (MonitorInfoBo monitorInfoBo : threadDumpBo.getLockedMonitorInfoList()) {
-                putMonitorInfoBo(buffer, monitorInfoBo);
+                monitorInfoBo.putMonitorInfoBo(buffer, this);
             }
         }
 
@@ -92,8 +92,4 @@ public class AgentEventMessageSerializerV1 {
         }
     }
 
-    private void putMonitorInfoBo(final Buffer buffer, final MonitorInfoBo monitorInfoBo) {
-        buffer.putInt(monitorInfoBo.getStackDepth());
-        buffer.putPrefixedString(monitorInfoBo.getStackFrame());
-    }
 }
\ No newline at end of file
diff --git a/commons-server/src/test/java/com/navercorp/pinpoint/common/server/util/AgentEventMessageSerDesTest.java b/commons-server/src/test/java/com/navercorp/pinpoint/common/server/util/AgentEventMessageSerDesTest.java
index b33b190..c4476f8 100644
--- a/commons-server/src/test/java/com/navercorp/pinpoint/common/server/util/AgentEventMessageSerDesTest.java
+++ b/commons-server/src/test/java/com/navercorp/pinpoint/common/server/util/AgentEventMessageSerDesTest.java
@@ -132,7 +132,7 @@ public class AgentEventMessageSerDesTest {
             tMonitorInfo.setStackDepth(each.getLockedStackDepth());
             tMonitorInfo.setStackFrame(each.getLockedStackFrame().toString());
 
-            dump.addToLockedMonitors(tMonitorInfo);
+            tMonitorInfo.addToLockedMonitors(dump);
         }
 
         LockInfo[] lockInfos = info.getLockedSynchronizers();
diff --git a/plugins/kafka/src/main/java/com/navercorp/pinpoint/plugin/kafka/KafkaConfig.java b/plugins/kafka/src/main/java/com/navercorp/pinpoint/plugin/kafka/KafkaConfig.java
index d4d838b..ac2eda4 100644
--- a/plugins/kafka/src/main/java/com/navercorp/pinpoint/plugin/kafka/KafkaConfig.java
+++ b/plugins/kafka/src/main/java/com/navercorp/pinpoint/plugin/kafka/KafkaConfig.java
@@ -17,6 +17,7 @@
 package com.navercorp.pinpoint.plugin.kafka;
 
 import com.navercorp.pinpoint.bootstrap.config.ProfilerConfig;
+import com.navercorp.pinpoint.common.util.StringUtils;
 
 public class KafkaConfig {
 
@@ -67,4 +68,12 @@ public class KafkaConfig {
                 ", kafkaEntryPoint='" + kafkaEntryPoint + '\'' +
                 '}';
     }
+
+    public boolean enableConsumerTransform(KafkaPlugin kafkaPlugin) {
+        if (isConsumerEnable() && StringUtils.hasText(getKafkaEntryPoint())) {
+            return true;
+        }
+
+        return isSpringConsumerEnable();
+    }
 }
diff --git a/plugins/kafka/src/main/java/com/navercorp/pinpoint/plugin/kafka/KafkaPlugin.java b/plugins/kafka/src/main/java/com/navercorp/pinpoint/plugin/kafka/KafkaPlugin.java
index 2254af7..4d955d2 100644
--- a/plugins/kafka/src/main/java/com/navercorp/pinpoint/plugin/kafka/KafkaPlugin.java
+++ b/plugins/kafka/src/main/java/com/navercorp/pinpoint/plugin/kafka/KafkaPlugin.java
@@ -61,7 +61,7 @@ public class KafkaPlugin implements ProfilerPlugin, TransformTemplateAware {
         }
 
 
-        if (enableConsumerTransform(config)) {
+        if (config.enableConsumerTransform(this)) {
             transformTemplate.transform("org.apache.kafka.clients.consumer.KafkaConsumer", KafkaConsumerTransform.class);
 
             transformTemplate.transform("org.apache.kafka.clients.consumer.ConsumerRecord", ConsumerRecordTransform.class);
@@ -181,14 +181,6 @@ public class KafkaPlugin implements ProfilerPlugin, TransformTemplateAware {
 
     }
 
-    private boolean enableConsumerTransform(KafkaConfig config) {
-        if (config.isConsumerEnable() && StringUtils.hasText(config.getKafkaEntryPoint())) {
-            return true;
-        }
-
-        return config.isSpringConsumerEnable();
-    }
-
     @Override
     public void setTransformTemplate(TransformTemplate transformTemplate) {
         this.transformTemplate = transformTemplate;
diff --git a/plugins/oracle-jdbc/src/main/java/com/navercorp/pinpoint/plugin/jdbc/oracle/parser/Description.java b/plugins/oracle-jdbc/src/main/java/com/navercorp/pinpoint/plugin/jdbc/oracle/parser/Description.java
index c0bdcfd..f9397c7 100644
--- a/plugins/oracle-jdbc/src/main/java/com/navercorp/pinpoint/plugin/jdbc/oracle/parser/Description.java
+++ b/plugins/oracle-jdbc/src/main/java/com/navercorp/pinpoint/plugin/jdbc/oracle/parser/Description.java
@@ -41,30 +41,30 @@ public class Description {
 
 
     private void mapping(KeyValue keyValue) {
-        if (!compare("description", keyValue)) {
+        if (!keyValue.compare("description", this)) {
             throw new OracleConnectionStringException("description node not found");
         }
 
         for (KeyValue kv : keyValue.getKeyValueList()) {
-            if (compare("address", kv)) {
+            if (kv.compare("address", this)) {
                 String host = null;
                 String port = null;
                 String protocol = null;
                 for (KeyValue address : kv.getKeyValueList()) {
-                    if (compare("host", address)) {
+                    if (address.compare("host", this)) {
                         host = address.getValue();
-                    } else if (compare("port", address)) {
+                    } else if (address.compare("port", this)) {
                         port = address.getValue();
-                    }  else if(compare("protocol", address)) {
+                    }  else if(address.compare("protocol", this)) {
                         protocol = address.getValue();
                     }
                 }
                 this.addAddress(protocol, host, port);
-            } else if(compare("connect_data", kv)) {
+            } else if(kv.compare("connect_data", this)) {
                 for (KeyValue connectData : kv.getKeyValueList()) {
-                    if (compare("service_name", connectData)) {
+                    if (connectData.compare("service_name", this)) {
                         this.serviceName = connectData.getValue();
-                    } else if(compare("sid", connectData)) {
+                    } else if(connectData.compare("sid", this)) {
                         // sid also needed to check compatibility.
                         this.sid = connectData.getValue();
                     }
@@ -73,13 +73,6 @@ public class Description {
         }
     }
 
-    private boolean compare(String value, KeyValue kv) {
-        if (kv == null) {
-            return false;
-        }
-        return value.equals(kv.getKey());
-    }
-
     public String getServiceName() {
         return serviceName;
     }
diff --git a/plugins/oracle-jdbc/src/main/java/com/navercorp/pinpoint/plugin/jdbc/oracle/parser/KeyValue.java b/plugins/oracle-jdbc/src/main/java/com/navercorp/pinpoint/plugin/jdbc/oracle/parser/KeyValue.java
index 66feae1..855c6ab 100644
--- a/plugins/oracle-jdbc/src/main/java/com/navercorp/pinpoint/plugin/jdbc/oracle/parser/KeyValue.java
+++ b/plugins/oracle-jdbc/src/main/java/com/navercorp/pinpoint/plugin/jdbc/oracle/parser/KeyValue.java
@@ -95,4 +95,11 @@ public class KeyValue {
         result = 31 * result + (keyValueList != null ? keyValueList.hashCode() : 0);
         return result;
     }
+
+    public boolean compare(String value, Description description) {
+        if (this == null) {
+            return false;
+        }
+        return value.equals(getKey());
+    }
 }
diff --git a/plugins/spring/src/main/java/com/navercorp/pinpoint/plugin/spring/beans/SpringBeansTarget.java b/plugins/spring/src/main/java/com/navercorp/pinpoint/plugin/spring/beans/SpringBeansTarget.java
index a543018..af62f06 100644
--- a/plugins/spring/src/main/java/com/navercorp/pinpoint/plugin/spring/beans/SpringBeansTarget.java
+++ b/plugins/spring/src/main/java/com/navercorp/pinpoint/plugin/spring/beans/SpringBeansTarget.java
@@ -19,6 +19,7 @@ import com.navercorp.pinpoint.bootstrap.util.PathMatcher;
 import com.navercorp.pinpoint.bootstrap.util.RegexPathMatcher;
 import com.navercorp.pinpoint.common.util.CollectionUtils;
 import com.navercorp.pinpoint.common.util.StringUtils;
+import com.navercorp.pinpoint.plugin.spring.beans.interceptor.TargetBeanFilter;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -149,4 +150,14 @@ public class SpringBeansTarget {
         sb.append('}');
         return sb.toString();
     }
+
+    public boolean isBasePackage(final String className, TargetBeanFilter targetBeanFilter) {
+        for (String basePackage : getBasePackages()) {
+            if (className.startsWith(basePackage)) {
+                return true;
+            }
+        }
+
+        return false;
+    }
 }
\ No newline at end of file
diff --git a/plugins/spring/src/main/java/com/navercorp/pinpoint/plugin/spring/beans/interceptor/TargetBeanFilter.java b/plugins/spring/src/main/java/com/navercorp/pinpoint/plugin/spring/beans/interceptor/TargetBeanFilter.java
index 0f0618e..c66da88 100644
--- a/plugins/spring/src/main/java/com/navercorp/pinpoint/plugin/spring/beans/interceptor/TargetBeanFilter.java
+++ b/plugins/spring/src/main/java/com/navercorp/pinpoint/plugin/spring/beans/interceptor/TargetBeanFilter.java
@@ -75,7 +75,7 @@ public class TargetBeanFilter {
             // check base packages.
             final List<String> basePackages = target.getBasePackages();
             if (CollectionUtils.hasLength(basePackages)) {
-                if (!isBasePackage(target, className)) {
+                if (!target.isBasePackage(className, this)) {
                     continue;
                 }
                 condition = true;
@@ -141,7 +141,7 @@ public class TargetBeanFilter {
             // check base packages.
             final List<String> basePackages = target.getBasePackages();
             if (CollectionUtils.hasLength(basePackages)) {
-                if (!isBasePackage(target, className)) {
+                if (!target.isBasePackage(className, this)) {
                     continue;
                 }
                 condition = true;
@@ -183,16 +183,6 @@ public class TargetBeanFilter {
         return false;
     }
 
-    private boolean isBasePackage(final SpringBeansTarget target, final String className) {
-        for (String basePackage : target.getBasePackages()) {
-            if (className.startsWith(basePackage)) {
-                return true;
-            }
-        }
-
-        return false;
-    }
-
     private boolean isBeanNameTarget(final SpringBeansTarget target, final String beanName) {
         for (PathMatcher pathMatcher : target.getNamePatterns()) {
             if (pathMatcher.isMatched(beanName)) {
diff --git a/plugins/thrift/src/main/java/com/navercorp/pinpoint/plugin/thrift/ThriftClientCallContext.java b/plugins/thrift/src/main/java/com/navercorp/pinpoint/plugin/thrift/ThriftClientCallContext.java
index 2a32173..6baf2e8 100644
--- a/plugins/thrift/src/main/java/com/navercorp/pinpoint/plugin/thrift/ThriftClientCallContext.java
+++ b/plugins/thrift/src/main/java/com/navercorp/pinpoint/plugin/thrift/ThriftClientCallContext.java
@@ -17,6 +17,9 @@
 package com.navercorp.pinpoint.plugin.thrift;
 
 
+import com.navercorp.pinpoint.plugin.thrift.interceptor.tprotocol.server.TProtocolReadFieldBeginInterceptor;
+import org.apache.thrift.protocol.TField;
+
 /**
  * @author HyunGil Jeong
  */
@@ -74,4 +77,14 @@ public class ThriftClientCallContext {
         sb.append('}');
         return sb.toString();
     }
+
+    public void handleClientRequest(TField field, TProtocolReadFieldBeginInterceptor tProtocolReadFieldBeginInterceptor) {
+        ThriftHeader traceHeaderKey = ThriftHeader.findThriftHeaderKeyById(field.id);
+        // check if field is pinpoint header field
+        if (traceHeaderKey == null || field.type != traceHeaderKey.getType()) {
+            setTraceHeaderToBeRead(NONE);
+        } else {
+            setTraceHeaderToBeRead(traceHeaderKey);
+        }
+    }
 }
diff --git a/plugins/thrift/src/main/java/com/navercorp/pinpoint/plugin/thrift/ThriftRequestProperty.java b/plugins/thrift/src/main/java/com/navercorp/pinpoint/plugin/thrift/ThriftRequestProperty.java
index a22de0a..4b75230 100644
--- a/plugins/thrift/src/main/java/com/navercorp/pinpoint/plugin/thrift/ThriftRequestProperty.java
+++ b/plugins/thrift/src/main/java/com/navercorp/pinpoint/plugin/thrift/ThriftRequestProperty.java
@@ -21,7 +21,10 @@ import java.nio.CharBuffer;
 import java.nio.charset.Charset;
 import java.util.EnumMap;
 
+import com.navercorp.pinpoint.bootstrap.context.SpanRecorder;
 import com.navercorp.pinpoint.common.Charsets;
+import com.navercorp.pinpoint.common.trace.ServiceType;
+import com.navercorp.pinpoint.plugin.thrift.interceptor.tprotocol.server.TProtocolReadMessageEndInterceptor;
 import org.apache.thrift.TException;
 import org.apache.thrift.protocol.TField;
 import org.apache.thrift.protocol.TProtocol;
@@ -230,5 +233,15 @@ public class ThriftRequestProperty {
     public String toString() {
         return this.thriftHeaders.toString();
     }
-    
+
+    public void recordParentInfo(SpanRecorder recorder, TProtocolReadMessageEndInterceptor tProtocolReadMessageEndInterceptor) {
+        if (this == null) {
+            return;
+        }
+        final String parentApplicationName = getParentApplicationName();
+        final short parentApplicationType = getParentApplicationType(ServiceType.UNDEFINED.getCode());
+        final String acceptorHost = getAcceptorHost();
+        recorder.recordParentApplication(parentApplicationName, parentApplicationType);
+        recorder.recordAcceptorHost(acceptorHost);
+    }
 }
\ No newline at end of file
diff --git a/plugins/thrift/src/main/java/com/navercorp/pinpoint/plugin/thrift/interceptor/tprotocol/server/TProtocolReadFieldBeginInterceptor.java b/plugins/thrift/src/main/java/com/navercorp/pinpoint/plugin/thrift/interceptor/tprotocol/server/TProtocolReadFieldBeginInterceptor.java
index 1cf8bc3..9333dd8 100644
--- a/plugins/thrift/src/main/java/com/navercorp/pinpoint/plugin/thrift/interceptor/tprotocol/server/TProtocolReadFieldBeginInterceptor.java
+++ b/plugins/thrift/src/main/java/com/navercorp/pinpoint/plugin/thrift/interceptor/tprotocol/server/TProtocolReadFieldBeginInterceptor.java
@@ -16,7 +16,6 @@
 
 package com.navercorp.pinpoint.plugin.thrift.interceptor.tprotocol.server;
 
-import static com.navercorp.pinpoint.plugin.thrift.ThriftClientCallContext.NONE;
 import org.apache.thrift.protocol.TField;
 
 import com.navercorp.pinpoint.bootstrap.interceptor.AroundInterceptor;
@@ -25,7 +24,6 @@ import com.navercorp.pinpoint.bootstrap.interceptor.scope.InterceptorScopeInvoca
 import com.navercorp.pinpoint.bootstrap.logging.PLogger;
 import com.navercorp.pinpoint.bootstrap.logging.PLoggerFactory;
 import com.navercorp.pinpoint.plugin.thrift.ThriftClientCallContext;
-import com.navercorp.pinpoint.plugin.thrift.ThriftHeader;
 import com.navercorp.pinpoint.plugin.thrift.field.accessor.ServerMarkerFlagFieldAccessor;
 
 /**
@@ -84,7 +82,7 @@ public class TProtocolReadFieldBeginInterceptor implements AroundInterceptor {
             if (attachment instanceof ThriftClientCallContext) {
                 ThriftClientCallContext clientCallContext = (ThriftClientCallContext)attachment;
                 if (result instanceof TField) {
-                    handleClientRequest((TField)result, clientCallContext);
+                    clientCallContext.handleClientRequest((TField)result, this);
                 }
             }
         }
@@ -100,14 +98,4 @@ public class TProtocolReadFieldBeginInterceptor implements AroundInterceptor {
         return true;
     }
 
-    private void handleClientRequest(TField field, ThriftClientCallContext clientCallContext) {
-        ThriftHeader traceHeaderKey = ThriftHeader.findThriftHeaderKeyById(field.id);
-        // check if field is pinpoint header field
-        if (traceHeaderKey == null || field.type != traceHeaderKey.getType()) {
-            clientCallContext.setTraceHeaderToBeRead(NONE);
-        } else {
-            clientCallContext.setTraceHeaderToBeRead(traceHeaderKey);
-        }
-    }
-
 }
diff --git a/plugins/thrift/src/main/java/com/navercorp/pinpoint/plugin/thrift/interceptor/tprotocol/server/TProtocolReadMessageEndInterceptor.java b/plugins/thrift/src/main/java/com/navercorp/pinpoint/plugin/thrift/interceptor/tprotocol/server/TProtocolReadMessageEndInterceptor.java
index 54a3148..23dee46 100644
--- a/plugins/thrift/src/main/java/com/navercorp/pinpoint/plugin/thrift/interceptor/tprotocol/server/TProtocolReadMessageEndInterceptor.java
+++ b/plugins/thrift/src/main/java/com/navercorp/pinpoint/plugin/thrift/interceptor/tprotocol/server/TProtocolReadMessageEndInterceptor.java
@@ -32,7 +32,6 @@ import com.navercorp.pinpoint.bootstrap.interceptor.AroundInterceptor;
 import com.navercorp.pinpoint.bootstrap.interceptor.scope.InterceptorScopeInvocation;
 import com.navercorp.pinpoint.bootstrap.logging.PLogger;
 import com.navercorp.pinpoint.bootstrap.logging.PLoggerFactory;
-import com.navercorp.pinpoint.common.trace.ServiceType;
 import com.navercorp.pinpoint.plugin.thrift.ThriftClientCallContext;
 import com.navercorp.pinpoint.plugin.thrift.ThriftConstants;
 import com.navercorp.pinpoint.plugin.thrift.ThriftRequestProperty;
@@ -205,7 +204,7 @@ public class TProtocolReadMessageEndInterceptor implements AroundInterceptor {
         recorder.recordServiceType(ThriftConstants.THRIFT_SERVER);
         recorder.recordApi(this.thriftServerEntryMethodDescriptor);
         if (!trace.isRoot()) {
-            recordParentInfo(recorder, parentTraceInfo);
+            parentTraceInfo.recordParentInfo(recorder, this);
         }
         // record connection information here as the socket may be closed by the time the Span is popped in
         // TBaseAsyncProcessorProcessInterceptor's after section.
@@ -241,17 +240,6 @@ public class TProtocolReadMessageEndInterceptor implements AroundInterceptor {
         return this.traceContext.createTraceId(transactionId, parentSpanId, spanId, flags);
     }
 
-    private void recordParentInfo(SpanRecorder recorder, ThriftRequestProperty parentTraceInfo) {
-        if (parentTraceInfo == null) {
-            return;
-        }
-        final String parentApplicationName = parentTraceInfo.getParentApplicationName();
-        final short parentApplicationType = parentTraceInfo.getParentApplicationType(ServiceType.UNDEFINED.getCode());
-        final String acceptorHost = parentTraceInfo.getAcceptorHost();
-        recorder.recordParentApplication(parentApplicationName, parentApplicationType);
-        recorder.recordAcceptorHost(acceptorHost);
-    }
-    
     private void recordConnection(SpanRecorder recorder, TTransport transport) {
         // retrieve connection information
         String localIpPort = ThriftConstants.UNKNOWN_ADDRESS;
diff --git a/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/Annotation.java b/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/Annotation.java
index a92cb0f..a773ac8 100644
--- a/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/Annotation.java
+++ b/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/Annotation.java
@@ -22,6 +22,8 @@ import com.navercorp.pinpoint.common.util.LongIntIntByteByteStringValue;
 import com.navercorp.pinpoint.common.util.StringStringValue;
 import com.navercorp.pinpoint.profiler.util.AnnotationValueMapper;
 
+import java.util.ArrayList;
+
 /**
  * @author netspider
  * @author emeroad
@@ -84,4 +86,11 @@ public class Annotation {
     public Object getValue() {
         return value;
     }
+
+    public void addAnnotation(SpanEvent spanEvent) {
+        if (spanEvent.getAnnotations() == null) {
+            spanEvent.setAnnotations(new ArrayList<Annotation>());
+        }
+        spanEvent.getAnnotations().add(this);
+    }
 }
diff --git a/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/DefaultTrace.java b/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/DefaultTrace.java
index f199ca9..54f0167 100644
--- a/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/DefaultTrace.java
+++ b/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/DefaultTrace.java
@@ -79,11 +79,6 @@ public final class DefaultTrace implements Trace {
         return this.span.getTraceRoot();
     }
 
-    private SpanEventRecorder wrappedSpanEventRecorder(WrappedSpanEventRecorder wrappedSpanEventRecorder, SpanEvent spanEvent) {
-        wrappedSpanEventRecorder.setWrapped(spanEvent);
-        return wrappedSpanEventRecorder;
-    }
-
     @Override
     public SpanEventRecorder traceBlockBegin() {
         return traceBlockBegin(DEFAULT_STACKID);
@@ -93,7 +88,7 @@ public final class DefaultTrace implements Trace {
     @Override
     public SpanEventRecorder traceBlockBegin(final int stackId) {
         final SpanEvent spanEvent = traceBlockBegin0(stackId);
-        return wrappedSpanEventRecorder(wrappedSpanEventRecorder, spanEvent);
+        return wrappedSpanEventRecorder.wrappedSpanEventRecorder(spanEvent, this);
     }
 
     private SpanEvent traceBlockBegin0(final int stackId) {
@@ -267,7 +262,7 @@ public final class DefaultTrace implements Trace {
             spanEvent = dummySpanEvent();
         }
 
-        return wrappedSpanEventRecorder(this.wrappedSpanEventRecorder, spanEvent);
+        return this.wrappedSpanEventRecorder.wrappedSpanEventRecorder(spanEvent, this);
     }
 
     private SpanEvent newSpanEvent(int stackId) {
diff --git a/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/Span.java b/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/Span.java
index f6e4ba0..6f3454d 100644
--- a/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/Span.java
+++ b/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/Span.java
@@ -18,6 +18,7 @@ package com.navercorp.pinpoint.profiler.context;
 
 import com.navercorp.pinpoint.common.trace.AnnotationKey;
 import com.navercorp.pinpoint.common.util.IntStringValue;
+import com.navercorp.pinpoint.profiler.context.grpc.GrpcSpanMessageConverter;
 import com.navercorp.pinpoint.profiler.context.id.Shared;
 import com.navercorp.pinpoint.profiler.context.id.TraceRoot;
 
@@ -216,4 +217,16 @@ public class Span extends DefaultFrameAttachment {
                 ", exceptionInfo=" + exceptionInfo +
                 "} " + super.toString();
     }
+
+    public PParentInfo newParentInfo(GrpcSpanMessageConverter grpcSpanMessageConverter) {
+        final String parentApplicationName = getParentApplicationName();
+        if (parentApplicationName == null) {
+            return null;
+        }
+        PParentInfo.Builder builder = PParentInfo.newBuilder();
+        builder.setParentApplicationName(parentApplicationName);
+        builder.setParentApplicationType(getParentApplicationType());
+        builder.setAcceptorHost(getAcceptorHost());
+        return builder.build();
+    }
 }
\ No newline at end of file
diff --git a/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/SpanEvent.java b/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/SpanEvent.java
index 5a68030..da9e7ba 100644
--- a/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/SpanEvent.java
+++ b/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/SpanEvent.java
@@ -18,7 +18,6 @@ package com.navercorp.pinpoint.profiler.context;
 
 import com.navercorp.pinpoint.common.util.IntStringValue;
 
-import java.util.ArrayList;
 import java.util.List;
 
 /**
@@ -55,13 +54,6 @@ public class SpanEvent extends DefaultFrameAttachment {
     public SpanEvent() {
     }
 
-    public void addAnnotation(Annotation annotation) {
-        if (this.annotations == null) {
-            this.annotations = new ArrayList<Annotation>();
-        }
-        this.annotations.add(annotation);
-    }
-
     public void setExceptionInfo(int exceptionClassId, String exceptionMessage) {
         final IntStringValue exceptionInfo = new IntStringValue(exceptionClassId, exceptionMessage);
         this.exceptionInfo = exceptionInfo;
diff --git a/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/grpc/GrpcJvmGcTypeMessageConverter.java b/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/grpc/GrpcJvmGcTypeMessageConverter.java
index 1d90db2..8be5975 100644
--- a/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/grpc/GrpcJvmGcTypeMessageConverter.java
+++ b/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/grpc/GrpcJvmGcTypeMessageConverter.java
@@ -29,26 +29,9 @@ public class GrpcJvmGcTypeMessageConverter implements MessageConverter<PJvmGcTyp
     public PJvmGcType toMessage(Object message) {
         if (message instanceof JvmGcType) {
             final JvmGcType jvmGcType = (JvmGcType) message;
-            return convertJvmGcType(jvmGcType);
+            return jvmGcType.convertJvmGcType(this);
         }
         throw new IllegalArgumentException("invalid message type. message=" + message);
     }
 
-    private PJvmGcType convertJvmGcType(final JvmGcType jvmGcType) {
-        switch (jvmGcType) {
-            case UNKNOWN:
-                return PJvmGcType.JVM_GC_TYPE_UNKNOWN;
-            case SERIAL:
-                return PJvmGcType.JVM_GC_TYPE_SERIAL;
-            case PARALLEL:
-                return PJvmGcType.JVM_GC_TYPE_PARALLEL;
-            case CMS:
-                return PJvmGcType.JVM_GC_TYPE_CMS;
-            case G1:
-                return PJvmGcType.JVM_GC_TYPE_G1;
-            default:
-                return PJvmGcType.JVM_GC_TYPE_UNKNOWN;
-        }
-    }
-
 }
diff --git a/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/grpc/GrpcMetadataMessageConverter.java b/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/grpc/GrpcMetadataMessageConverter.java
index 858cfd1..9b2e67f 100644
--- a/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/grpc/GrpcMetadataMessageConverter.java
+++ b/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/grpc/GrpcMetadataMessageConverter.java
@@ -62,7 +62,7 @@ public class GrpcMetadataMessageConverter implements MessageConverter<GeneratedM
             return convertAgentInfo(agentInfo);
         } else if (message instanceof SqlMetaData) {
             final SqlMetaData sqlMetaData = (SqlMetaData) message;
-            return convertSqlMetaData(sqlMetaData);
+            return sqlMetaData.convertSqlMetaData(this);
         } else if (message instanceof ApiMetaData) {
             final ApiMetaData apiMetaData = (ApiMetaData) message;
             return convertApiMetaData(apiMetaData);
@@ -123,13 +123,6 @@ public class GrpcMetadataMessageConverter implements MessageConverter<GeneratedM
         return builder.build();
     }
 
-    private PSqlMetaData convertSqlMetaData(final SqlMetaData sqlMetaData) {
-        final PSqlMetaData.Builder builder = PSqlMetaData.newBuilder();
-        builder.setSqlId(sqlMetaData.getSqlId());
-        builder.setSql(sqlMetaData.getSql());
-        return builder.build();
-    }
-
     private PApiMetaData convertApiMetaData(final ApiMetaData apiMetaData) {
         final PApiMetaData.Builder builder = PApiMetaData.newBuilder();
         builder.setApiId(apiMetaData.getApiId());
diff --git a/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/grpc/GrpcSpanMessageConverter.java b/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/grpc/GrpcSpanMessageConverter.java
index f2a70af..3ff5f63 100644
--- a/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/grpc/GrpcSpanMessageConverter.java
+++ b/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/grpc/GrpcSpanMessageConverter.java
@@ -172,25 +172,13 @@ public class GrpcSpanMessageConverter implements MessageConverter<GeneratedMessa
         builder.setRpc(shared.getRpcName());
         builder.setEndPoint(shared.getEndPoint());
 
-        PParentInfo pParentInfo = newParentInfo(span);
+        PParentInfo pParentInfo = span.newParentInfo(this);
         if (pParentInfo != null) {
             builder.setParentInfo(pParentInfo);
         }
         return builder.build();
     }
 
-    private PParentInfo newParentInfo(Span span) {
-        final String parentApplicationName = span.getParentApplicationName();
-        if (parentApplicationName == null) {
-            return null;
-        }
-        PParentInfo.Builder builder = PParentInfo.newBuilder();
-        builder.setParentApplicationName(parentApplicationName);
-        builder.setParentApplicationType(span.getParentApplicationType());
-        builder.setAcceptorHost(span.getAcceptorHost());
-        return builder.build();
-    }
-
     private List<PSpanEvent> buildPSpanEventList(List<SpanEvent> spanEventList) {
         final int eventSize = spanEventList.size();
         final List<PSpanEvent> pSpanEventList = new ArrayList<PSpanEvent>(eventSize);
diff --git a/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/grpc/GrpcStatMessageConverter.java b/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/grpc/GrpcStatMessageConverter.java
index fe9e265..70cec0e 100644
--- a/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/grpc/GrpcStatMessageConverter.java
+++ b/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/grpc/GrpcStatMessageConverter.java
@@ -93,7 +93,7 @@ public class GrpcStatMessageConverter implements MessageConverter<GeneratedMessa
 
         final CpuLoadMetricSnapshot cpuLoadMetricSnapshot = agentStatMetricSnapshot.getCpuLoad();
         if (cpuLoadMetricSnapshot != null) {
-            final PCpuLoad cpuLoad = convertCpuLoad(cpuLoadMetricSnapshot);
+            final PCpuLoad cpuLoad = cpuLoadMetricSnapshot.convertCpuLoad(this);
             agentStatBuilder.setCpuLoad(cpuLoad);
         }
 
@@ -168,13 +168,6 @@ public class GrpcStatMessageConverter implements MessageConverter<GeneratedMessa
         return jvmGcBuilder.build();
     }
 
-    private PCpuLoad convertCpuLoad(CpuLoadMetricSnapshot cpuLoadMetricSnapshot) {
-        final PCpuLoad.Builder cpuLoadBuilder = PCpuLoad.newBuilder();
-        cpuLoadBuilder.setJvmCpuLoad(cpuLoadMetricSnapshot.getJvmCpuUsage());
-        cpuLoadBuilder.setSystemCpuLoad(cpuLoadMetricSnapshot.getSystemCpuUsage());
-        return cpuLoadBuilder.build();
-    }
-
     private PTransaction convertTransaction(TransactionMetricSnapshot transactionMetricSnapshot) {
         final PTransaction.Builder transactionBuilder = PTransaction.newBuilder();
         transactionBuilder.setSampledNewCount(transactionMetricSnapshot.getSampledNewCount());
diff --git a/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/provider/stat/jvmgc/DetailedMemoryMetricProvider.java b/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/provider/stat/jvmgc/DetailedMemoryMetricProvider.java
index 50a6e1d..de89167 100644
--- a/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/provider/stat/jvmgc/DetailedMemoryMetricProvider.java
+++ b/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/provider/stat/jvmgc/DetailedMemoryMetricProvider.java
@@ -18,7 +18,6 @@ package com.navercorp.pinpoint.profiler.context.provider.stat.jvmgc;
 
 import com.google.inject.Inject;
 import com.google.inject.Provider;
-import com.navercorp.pinpoint.profiler.monitor.metric.memory.DefaultDetailedMemoryMetric;
 import com.navercorp.pinpoint.profiler.monitor.metric.memory.DetailedMemoryMetric;
 import com.navercorp.pinpoint.profiler.monitor.metric.memory.MemoryPoolType;
 import com.navercorp.pinpoint.profiler.monitor.metric.memory.UnknownDetailedMemoryMetric;
@@ -49,7 +48,7 @@ public class DetailedMemoryMetricProvider implements Provider<DetailedMemoryMetr
         Map<String, MemoryPoolMXBean> memoryPoolMap = createMemoryPoolMap();
         for (MemoryPoolType memoryPoolType : MemoryPoolType.values()) {
             if (memoryPoolMap.containsKey(memoryPoolType.oldSpace())) {
-                detailedMemoryMetric = createMetric(memoryPoolMap, memoryPoolType);
+                detailedMemoryMetric = memoryPoolType.createMetric(memoryPoolMap, this);
                 break;
             }
         }
@@ -69,13 +68,4 @@ public class DetailedMemoryMetricProvider implements Provider<DetailedMemoryMetr
         return memoryPoolMap;
     }
 
-    private DetailedMemoryMetric createMetric(Map<String, MemoryPoolMXBean> memoryPools, MemoryPoolType poolType) {
-        MemoryPoolMXBean edenSpacePool = memoryPools.get(poolType.edenSpace());
-        MemoryPoolMXBean oldSpacePool = memoryPools.get(poolType.oldSpace());
-        MemoryPoolMXBean survivorSpacePool = memoryPools.get(poolType.survivorSpace());
-        MemoryPoolMXBean codeCachePool = memoryPools.get(poolType.codeCache());
-        MemoryPoolMXBean permGenPool = memoryPools.get(poolType.permGen());
-        MemoryPoolMXBean metaspacePool = memoryPools.get(poolType.metaspace());
-        return new DefaultDetailedMemoryMetric(poolType, edenSpacePool, oldSpacePool, survivorSpacePool, codeCachePool, permGenPool, metaspacePool);
-    }
 }
diff --git a/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/recorder/WrappedSpanEventRecorder.java b/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/recorder/WrappedSpanEventRecorder.java
index 0659379..54fac24 100644
--- a/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/recorder/WrappedSpanEventRecorder.java
+++ b/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/recorder/WrappedSpanEventRecorder.java
@@ -17,7 +17,6 @@ package com.navercorp.pinpoint.profiler.context.recorder;
 
 
 import com.navercorp.pinpoint.bootstrap.context.AsyncContext;
-import com.navercorp.pinpoint.bootstrap.context.AsyncState;
 import com.navercorp.pinpoint.bootstrap.context.ParsingResult;
 import com.navercorp.pinpoint.bootstrap.context.SpanEventRecorder;
 import com.navercorp.pinpoint.common.trace.AnnotationKey;
@@ -107,7 +106,7 @@ public class WrappedSpanEventRecorder extends AbstractRecorder implements SpanEv
 
     private void recordSqlParam(IntStringStringValue intStringStringValue) {
         Annotation annotation = new Annotation(AnnotationKey.SQL_ID.getCode(), intStringStringValue);
-        spanEvent.addAnnotation(annotation);
+        annotation.addAnnotation(spanEvent);
     }
 
     @Override
@@ -157,7 +156,7 @@ public class WrappedSpanEventRecorder extends AbstractRecorder implements SpanEv
     }
 
     void addAnnotation(Annotation annotation) {
-        spanEvent.addAnnotation(annotation);
+        annotation.addAnnotation(spanEvent);
     }
 
     @Override
@@ -207,4 +206,9 @@ public class WrappedSpanEventRecorder extends AbstractRecorder implements SpanEv
         }
         return nextAsyncId;
     }
+
+    public SpanEventRecorder wrappedSpanEventRecorder(SpanEvent spanEvent, DefaultTrace defaultTrace) {
+        setWrapped(spanEvent);
+        return this;
+    }
 }
\ No newline at end of file
diff --git a/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/thrift/CommandGrpcToThriftMessageConverter.java b/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/thrift/CommandGrpcToThriftMessageConverter.java
index f6bb797..b40779a 100644
--- a/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/thrift/CommandGrpcToThriftMessageConverter.java
+++ b/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/thrift/CommandGrpcToThriftMessageConverter.java
@@ -72,7 +72,7 @@ public class CommandGrpcToThriftMessageConverter implements MessageConverter<TBa
         tCmdActiveThreadLightDumpRes.setSubType(pCmdActiveThreadLightDumpRes.getSubType());
 
         for (PActiveThreadLightDump pActiveThreadLightDump : pCmdActiveThreadLightDumpRes.getThreadDumpList()) {
-            tCmdActiveThreadLightDumpRes.addToThreadDumps(buildTActiveThreadLightDump(pActiveThreadLightDump));
+            buildTActiveThreadLightDump(pActiveThreadLightDump).addToThreadDumps(tCmdActiveThreadLightDumpRes);
         }
 
         return tCmdActiveThreadLightDumpRes;
diff --git a/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/thrift/StatThriftMessageConverter.java b/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/thrift/StatThriftMessageConverter.java
index c28f46f..71d2b05 100644
--- a/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/thrift/StatThriftMessageConverter.java
+++ b/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/thrift/StatThriftMessageConverter.java
@@ -67,7 +67,7 @@ public class StatThriftMessageConverter implements MessageConverter<TBase<?, ?>>
             agentStatBatch.setStartTimestamp(agentStatMetricSnapshotBatch.getStartTimestamp());
             for (AgentStatMetricSnapshot agentStatMetricSnapshot : agentStatMetricSnapshotBatch.getAgentStats()) {
                 final TAgentStat agentStat = convertAgentStat(agentStatMetricSnapshot);
-                agentStatBatch.addToAgentStats(agentStat);
+                agentStat.addToAgentStats(agentStatBatch);
             }
             return agentStatBatch;
         } else if (message instanceof AgentStatMetricSnapshot) {
@@ -102,7 +102,7 @@ public class StatThriftMessageConverter implements MessageConverter<TBase<?, ?>>
 
         final TransactionMetricSnapshot transactionMetricSnapshot = agentStatMetricSnapshot.getTransaction();
         if (transactionMetricSnapshot != null) {
-            final TTransaction transaction = convertTransaction(transactionMetricSnapshot);
+            final TTransaction transaction = transactionMetricSnapshot.convertTransaction(this);
             agentStat.setTransaction(transaction);
         }
 
@@ -180,15 +180,6 @@ public class StatThriftMessageConverter implements MessageConverter<TBase<?, ?>>
         return cpuLoad;
     }
 
-    private TTransaction convertTransaction(TransactionMetricSnapshot transactionMetricSnapshot) {
-        final TTransaction transaction = new TTransaction();
-        transaction.setSampledNewCount(transactionMetricSnapshot.getSampledNewCount());
-        transaction.setSampledContinuationCount(transactionMetricSnapshot.getSampledContinuationCount());
-        transaction.setUnsampledNewCount(transactionMetricSnapshot.getUnsampledNewCount());
-        transaction.setUnsampledContinuationCount(transactionMetricSnapshot.getUnsampledContinuationCount());
-        return transaction;
-    }
-
     private TActiveTrace convertActiveTrace(ActiveTraceHistogram activeTraceHistogramMetricSnapshot) {
         final TActiveTrace activeTrace = new TActiveTrace();
         final TActiveTraceHistogram activeTraceHistogram = new TActiveTraceHistogram();
@@ -216,7 +207,7 @@ public class StatThriftMessageConverter implements MessageConverter<TBase<?, ?>>
                 dataSource.setUrl(dataSourceCollectData.getUrl());
             }
             dataSource.setMaxConnectionSize(dataSourceCollectData.getMaxConnectionSize());
-            dataSourceList.addToDataSourceList(dataSource);
+            dataSource.addToDataSourceList(dataSourceList);
         }
         return dataSourceList;
     }
diff --git a/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/thrift/ThreadDumpThriftMessageConverter.java b/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/thrift/ThreadDumpThriftMessageConverter.java
index c8c2930..4724169 100644
--- a/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/thrift/ThreadDumpThriftMessageConverter.java
+++ b/profiler/src/main/java/com/navercorp/pinpoint/profiler/context/thrift/ThreadDumpThriftMessageConverter.java
@@ -54,7 +54,7 @@ public class ThreadDumpThriftMessageConverter implements MessageConverter<TThrea
                 final TMonitorInfo tMonitorInfo = new TMonitorInfo();
                 tMonitorInfo.setStackDepth(monitorInfoMetricSnapshot.getStackDepth());
                 tMonitorInfo.setStackFrame(monitorInfoMetricSnapshot.getStackFrame());
-                threadDump.addToLockedMonitors(tMonitorInfo);
+                tMonitorInfo.addToLockedMonitors(threadDump);
             }
 
             threadDump.setLockName(threadDumpMetricSnapshot.getLockName());
diff --git a/profiler/src/main/java/com/navercorp/pinpoint/profiler/instrument/ASMClassNodeAdapter.java b/profiler/src/main/java/com/navercorp/pinpoint/profiler/instrument/ASMClassNodeAdapter.java
index dcc5a94..acc8a68 100644
--- a/profiler/src/main/java/com/navercorp/pinpoint/profiler/instrument/ASMClassNodeAdapter.java
+++ b/profiler/src/main/java/com/navercorp/pinpoint/profiler/instrument/ASMClassNodeAdapter.java
@@ -350,7 +350,7 @@ public class ASMClassNodeAdapter {
     public ASMMethodNodeAdapter addDelegatorMethod(final ASMMethodNodeAdapter superMethodNode) {
         Assert.requireNonNull(superMethodNode, "superMethodNode must not be null");
 
-        final String[] exceptions = getSuperMethodExceptions(superMethodNode);
+        final String[] exceptions = superMethodNode.getSuperMethodExceptions(this);
 
         final MethodNode rawMethodNode = new MethodNode(superMethodNode.getAccess(), superMethodNode.getName(), superMethodNode.getDesc(), superMethodNode.getSignature(), exceptions);
         final ASMMethodNodeAdapter methodNode = new ASMMethodNodeAdapter(getInternalName(), rawMethodNode);
@@ -360,14 +360,6 @@ public class ASMClassNodeAdapter {
         return methodNode;
     }
 
-    private String[] getSuperMethodExceptions(ASMMethodNodeAdapter superMethodNode) {
-        final List<String> superMethodNodeExceptions = superMethodNode.getExceptions();
-        if (superMethodNodeExceptions == null) {
-            return null;
-        }
-        return superMethodNodeExceptions.toArray(new String[0]);
-    }
-
     public void addGetterMethod(final String methodName, final ASMFieldNodeAdapter fieldNode) {
         Assert.requireNonNull(methodName, "methodName must not be null");
         Assert.requireNonNull(fieldNode, "fieldNode must not be null");
diff --git a/profiler/src/main/java/com/navercorp/pinpoint/profiler/instrument/ASMMethodNodeAdapter.java b/profiler/src/main/java/com/navercorp/pinpoint/profiler/instrument/ASMMethodNodeAdapter.java
index e99359b..58ff7ce 100644
--- a/profiler/src/main/java/com/navercorp/pinpoint/profiler/instrument/ASMMethodNodeAdapter.java
+++ b/profiler/src/main/java/com/navercorp/pinpoint/profiler/instrument/ASMMethodNodeAdapter.java
@@ -298,4 +298,12 @@ public class ASMMethodNodeAdapter {
         final String description = Type.getMethodDescriptor(interceptorDefinition.getAfterMethod());
         instructions.add(new MethodInsnNode(Opcodes.INVOKEINTERFACE, Type.getInternalName(interceptorDefinition.getInterceptorBaseClass()), "after", description, true));
     }
+
+    public String[] getSuperMethodExceptions(ASMClassNodeAdapter asmClassNodeAdapter) {
+        final List<String> superMethodNodeExceptions = getExceptions();
+        if (superMethodNodeExceptions == null) {
+            return null;
+        }
+        return superMethodNodeExceptions.toArray(new String[0]);
+    }
 }
\ No newline at end of file
diff --git a/profiler/src/main/java/com/navercorp/pinpoint/profiler/instrument/classloading/PlainClassLoaderHandler.java b/profiler/src/main/java/com/navercorp/pinpoint/profiler/instrument/classloading/PlainClassLoaderHandler.java
index 1cbc7e8..8c9ff79 100644
--- a/profiler/src/main/java/com/navercorp/pinpoint/profiler/instrument/classloading/PlainClassLoaderHandler.java
+++ b/profiler/src/main/java/com/navercorp/pinpoint/profiler/instrument/classloading/PlainClassLoaderHandler.java
@@ -20,7 +20,6 @@ import com.navercorp.pinpoint.common.util.Assert;
 import com.navercorp.pinpoint.common.util.jsr166.ConcurrentWeakHashMap;
 import com.navercorp.pinpoint.exception.PinpointException;
 import com.navercorp.pinpoint.profiler.instrument.classreading.SimpleClassMetadata;
-import com.navercorp.pinpoint.profiler.instrument.classreading.SimpleClassMetadataReader;
 import com.navercorp.pinpoint.profiler.plugin.ClassLoadingChecker;
 import com.navercorp.pinpoint.profiler.plugin.PluginConfig;
 import com.navercorp.pinpoint.profiler.util.ExtensionFilter;
@@ -226,18 +225,12 @@ public class PlainClassLoaderHandler implements ClassInjector {
     private Map<String, SimpleClassMetadata> parse(List<FileBinary> fileBinaryList) {
         Map<String, SimpleClassMetadata> parseMap = new HashMap<String, SimpleClassMetadata>();
         for (FileBinary fileBinary : fileBinaryList) {
-            SimpleClassMetadata classNode = parseClass(fileBinary);
+            SimpleClassMetadata classNode = fileBinary.parseClass(this);
             parseMap.put(classNode.getClassName(), classNode);
         }
         return parseMap;
     }
 
-    private SimpleClassMetadata parseClass(FileBinary fileBinary) {
-        byte[] fileBinaryArray = fileBinary.getFileBinary();
-        SimpleClassMetadata classMetadata = SimpleClassMetadataReader.readSimpleClassMetadata(fileBinaryArray);
-        return classMetadata;
-    }
-
     private void define0(final ClassLoader classLoader, ClassLoaderAttachment attachment, SimpleClassMetadata currentClass, Map<String, SimpleClassMetadata> classMetaMap, ClassLoadingChecker classLoadingChecker) {
         if ("java.lang.Object".equals(currentClass.getClassName())) {
             return;
diff --git a/profiler/src/main/java/com/navercorp/pinpoint/profiler/metadata/SqlMetaData.java b/profiler/src/main/java/com/navercorp/pinpoint/profiler/metadata/SqlMetaData.java
index 9deaa9c..299208b 100644
--- a/profiler/src/main/java/com/navercorp/pinpoint/profiler/metadata/SqlMetaData.java
+++ b/profiler/src/main/java/com/navercorp/pinpoint/profiler/metadata/SqlMetaData.java
@@ -16,6 +16,8 @@
 
 package com.navercorp.pinpoint.profiler.metadata;
 
+import com.navercorp.pinpoint.profiler.context.grpc.GrpcMetadataMessageConverter;
+
 /**
  * @author Woonduk Kang(emeroad)
  */
@@ -39,4 +41,11 @@ public class SqlMetaData {
     public String getSql() {
         return sql;
     }
+
+    public PSqlMetaData convertSqlMetaData(GrpcMetadataMessageConverter grpcMetadataMessageConverter) {
+        final PSqlMetaData.Builder builder = PSqlMetaData.newBuilder();
+        builder.setSqlId(getSqlId());
+        builder.setSql(getSql());
+        return builder.build();
+    }
 }
diff --git a/profiler/src/main/java/com/navercorp/pinpoint/profiler/monitor/metric/cpu/CpuLoadMetricSnapshot.java b/profiler/src/main/java/com/navercorp/pinpoint/profiler/monitor/metric/cpu/CpuLoadMetricSnapshot.java
index b57208d3..8d00de8 100644
--- a/profiler/src/main/java/com/navercorp/pinpoint/profiler/monitor/metric/cpu/CpuLoadMetricSnapshot.java
+++ b/profiler/src/main/java/com/navercorp/pinpoint/profiler/monitor/metric/cpu/CpuLoadMetricSnapshot.java
@@ -16,6 +16,8 @@
 
 package com.navercorp.pinpoint.profiler.monitor.metric.cpu;
 
+import com.navercorp.pinpoint.profiler.context.grpc.GrpcStatMessageConverter;
+
 /**
  * @author HyunGil Jeong
  */
@@ -36,4 +38,11 @@ public class CpuLoadMetricSnapshot {
     public double getSystemCpuUsage() {
         return systemCpuUsage;
     }
+
+    public PCpuLoad convertCpuLoad(GrpcStatMessageConverter grpcStatMessageConverter) {
+        final PCpuLoad.Builder cpuLoadBuilder = PCpuLoad.newBuilder();
+        cpuLoadBuilder.setJvmCpuLoad(getJvmCpuUsage());
+        cpuLoadBuilder.setSystemCpuLoad(getSystemCpuUsage());
+        return cpuLoadBuilder.build();
+    }
 }
diff --git a/profiler/src/main/java/com/navercorp/pinpoint/profiler/monitor/metric/gc/JvmGcType.java b/profiler/src/main/java/com/navercorp/pinpoint/profiler/monitor/metric/gc/JvmGcType.java
index 60a712d..8e91790 100644
--- a/profiler/src/main/java/com/navercorp/pinpoint/profiler/monitor/metric/gc/JvmGcType.java
+++ b/profiler/src/main/java/com/navercorp/pinpoint/profiler/monitor/metric/gc/JvmGcType.java
@@ -16,6 +16,8 @@
 
 package com.navercorp.pinpoint.profiler.monitor.metric.gc;
 
+import com.navercorp.pinpoint.profiler.context.grpc.GrpcJvmGcTypeMessageConverter;
+
 /**
  * @author Woonduk Kang(emeroad)
  */
@@ -36,4 +38,20 @@ public enum JvmGcType {
         return value;
     }
 
+    public PJvmGcType convertJvmGcType(GrpcJvmGcTypeMessageConverter grpcJvmGcTypeMessageConverter) {
+        switch (this) {
+            case UNKNOWN:
+                return PJvmGcType.JVM_GC_TYPE_UNKNOWN;
+            case SERIAL:
+                return PJvmGcType.JVM_GC_TYPE_SERIAL;
+            case PARALLEL:
+                return PJvmGcType.JVM_GC_TYPE_PARALLEL;
+            case CMS:
+                return PJvmGcType.JVM_GC_TYPE_CMS;
+            case G1:
+                return PJvmGcType.JVM_GC_TYPE_G1;
+            default:
+                return PJvmGcType.JVM_GC_TYPE_UNKNOWN;
+        }
+    }
 }
diff --git a/profiler/src/main/java/com/navercorp/pinpoint/profiler/monitor/metric/memory/MemoryPoolType.java b/profiler/src/main/java/com/navercorp/pinpoint/profiler/monitor/metric/memory/MemoryPoolType.java
index ab20cdd..1bccde0 100644
--- a/profiler/src/main/java/com/navercorp/pinpoint/profiler/monitor/metric/memory/MemoryPoolType.java
+++ b/profiler/src/main/java/com/navercorp/pinpoint/profiler/monitor/metric/memory/MemoryPoolType.java
@@ -16,6 +16,11 @@
 
 package com.navercorp.pinpoint.profiler.monitor.metric.memory;
 
+import com.navercorp.pinpoint.profiler.context.provider.stat.jvmgc.DetailedMemoryMetricProvider;
+
+import java.lang.management.MemoryPoolMXBean;
+import java.util.Map;
+
 /**
  * @author HyunGil Jeong
  */
@@ -66,4 +71,14 @@ public enum MemoryPoolType {
     public String metaspace() {
         return metaspacePoolName;
     }
+
+    public DetailedMemoryMetric createMetric(Map<String, MemoryPoolMXBean> memoryPools, DetailedMemoryMetricProvider detailedMemoryMetricProvider) {
+        MemoryPoolMXBean edenSpacePool = memoryPools.get(edenSpace());
+        MemoryPoolMXBean oldSpacePool = memoryPools.get(oldSpace());
+        MemoryPoolMXBean survivorSpacePool = memoryPools.get(survivorSpace());
+        MemoryPoolMXBean codeCachePool = memoryPools.get(codeCache());
+        MemoryPoolMXBean permGenPool = memoryPools.get(permGen());
+        MemoryPoolMXBean metaspacePool = memoryPools.get(metaspace());
+        return new DefaultDetailedMemoryMetric(this, edenSpacePool, oldSpacePool, survivorSpacePool, codeCachePool, permGenPool, metaspacePool);
+    }
 }
diff --git a/profiler/src/main/java/com/navercorp/pinpoint/profiler/monitor/metric/transaction/TransactionMetricSnapshot.java b/profiler/src/main/java/com/navercorp/pinpoint/profiler/monitor/metric/transaction/TransactionMetricSnapshot.java
index 9a60879..95bae4b 100644
--- a/profiler/src/main/java/com/navercorp/pinpoint/profiler/monitor/metric/transaction/TransactionMetricSnapshot.java
+++ b/profiler/src/main/java/com/navercorp/pinpoint/profiler/monitor/metric/transaction/TransactionMetricSnapshot.java
@@ -16,6 +16,9 @@
 
 package com.navercorp.pinpoint.profiler.monitor.metric.transaction;
 
+import com.navercorp.pinpoint.profiler.context.thrift.StatThriftMessageConverter;
+import com.navercorp.pinpoint.thrift.dto.TTransaction;
+
 /**
  * @author HyunGil Jeong
  */
@@ -51,4 +54,13 @@ public class TransactionMetricSnapshot {
     public long getUnsampledContinuationCount() {
         return unsampledContinuationCount;
     }
+
+    public TTransaction convertTransaction(StatThriftMessageConverter statThriftMessageConverter) {
+        final TTransaction transaction = new TTransaction();
+        transaction.setSampledNewCount(getSampledNewCount());
+        transaction.setSampledContinuationCount(getSampledContinuationCount());
+        transaction.setUnsampledNewCount(getUnsampledNewCount());
+        transaction.setUnsampledContinuationCount(getUnsampledContinuationCount());
+        return transaction;
+    }
 }
diff --git a/profiler/src/main/java/com/navercorp/pinpoint/profiler/receiver/service/ThreadDumpService.java b/profiler/src/main/java/com/navercorp/pinpoint/profiler/receiver/service/ThreadDumpService.java
index 466da28..2d1acbc 100644
--- a/profiler/src/main/java/com/navercorp/pinpoint/profiler/receiver/service/ThreadDumpService.java
+++ b/profiler/src/main/java/com/navercorp/pinpoint/profiler/receiver/service/ThreadDumpService.java
@@ -105,7 +105,7 @@ public class ThreadDumpService implements ProfilerRequestCommandService<TBase<?,
             tMonitorInfo.setStackDepth(each.getLockedStackDepth());
             tMonitorInfo.setStackFrame(each.getLockedStackFrame().toString());
 
-            dump.addToLockedMonitors(tMonitorInfo);
+            tMonitorInfo.addToLockedMonitors(dump);
         }
 
         LockInfo[] lockInfos = info.getLockedSynchronizers();
diff --git a/profiler/src/main/java/com/navercorp/pinpoint/profiler/sender/SpanStreamSendData.java b/profiler/src/main/java/com/navercorp/pinpoint/profiler/sender/SpanStreamSendData.java
index 8427c4c..25df688 100644
--- a/profiler/src/main/java/com/navercorp/pinpoint/profiler/sender/SpanStreamSendData.java
+++ b/profiler/src/main/java/com/navercorp/pinpoint/profiler/sender/SpanStreamSendData.java
@@ -17,6 +17,7 @@
 package com.navercorp.pinpoint.profiler.sender;
 
 import com.navercorp.pinpoint.common.util.ArrayUtils;
+import com.navercorp.pinpoint.profiler.sender.planer.AbstractSpanStreamSendDataPlaner;
 import com.navercorp.pinpoint.profiler.util.ByteBufferUtils;
 import com.navercorp.pinpoint.profiler.util.ObjectPool;
 import com.navercorp.pinpoint.thrift.io.HeaderTBaseSerializer;
@@ -242,4 +243,20 @@ public class SpanStreamSendData {
                 + chunkCount + ", componentsIndex=" + componentsIndex + ", mode=" + mode + "]";
     }
 
+    public boolean needFlush(int length, int delimiterBufferSize, AbstractSpanStreamSendDataPlaner abstractSpanStreamSendDataPlaner) {
+        if (!isAvailableBufferCapacity(length + delimiterBufferSize)) {
+            return true;
+        }
+
+        int availableComponentsCount = 1;
+        if (delimiterBufferSize > 0) {
+            availableComponentsCount++;
+        }
+
+        if (!isAvailableComponentsCount(availableComponentsCount)) {
+            return true;
+        }
+
+        return false;
+    }
 }
diff --git a/profiler/src/main/java/com/navercorp/pinpoint/profiler/sender/planer/AbstractSpanStreamSendDataPlaner.java b/profiler/src/main/java/com/navercorp/pinpoint/profiler/sender/planer/AbstractSpanStreamSendDataPlaner.java
index 26f7cd4..3612a1b 100644
--- a/profiler/src/main/java/com/navercorp/pinpoint/profiler/sender/planer/AbstractSpanStreamSendDataPlaner.java
+++ b/profiler/src/main/java/com/navercorp/pinpoint/profiler/sender/planer/AbstractSpanStreamSendDataPlaner.java
@@ -92,7 +92,7 @@ public abstract class AbstractSpanStreamSendDataPlaner implements SendDataPlaner
                 }
 
                 flushBufferCapacity += partitionedByteBufferLocator.getByteBufferCapacity(i);
-                if (needFlush(currentSpanStreamSendData, flushBufferCapacity, appendBufferSize)) {
+                if (currentSpanStreamSendData.needFlush(flushBufferCapacity, appendBufferSize, this)) {
                     ByteBuffer addBuffer = getByteBuffer(partitionedByteBufferLocator, markFromPartitionIndex, markToPartitionIndex);
                     if (addBuffer != null) {
                         ByteBuffer[] byteBufferArray = new ByteBuffer[2];
@@ -202,23 +202,6 @@ public abstract class AbstractSpanStreamSendDataPlaner implements SendDataPlaner
         return chunkCount;
     }
 
-    private boolean needFlush(SpanStreamSendData spanStreamSendData, int length, int delimiterBufferSize) {
-        if (!spanStreamSendData.isAvailableBufferCapacity(length + delimiterBufferSize)) {
-            return true;
-        }
-
-        int availableComponentsCount = 1;
-        if (delimiterBufferSize > 0) {
-            availableComponentsCount++;
-        }
-
-        if (!spanStreamSendData.isAvailableComponentsCount(availableComponentsCount)) {
-            return true;
-        }
-
-        return false;
-    }
-
     private ByteBuffer getByteBuffer(PartitionedByteBufferLocator partitionedByteBufferLocator, int fromPartitionIndex, int toPartitionIndex) {
         if (toPartitionIndex == -1) {
             return null;
diff --git a/profiler/src/main/java/com/navercorp/pinpoint/profiler/util/FileBinary.java b/profiler/src/main/java/com/navercorp/pinpoint/profiler/util/FileBinary.java
index 7e820b6..be98ad9 100644
--- a/profiler/src/main/java/com/navercorp/pinpoint/profiler/util/FileBinary.java
+++ b/profiler/src/main/java/com/navercorp/pinpoint/profiler/util/FileBinary.java
@@ -17,6 +17,10 @@
 
 package com.navercorp.pinpoint.profiler.util;
 
+import com.navercorp.pinpoint.profiler.instrument.classloading.PlainClassLoaderHandler;
+import com.navercorp.pinpoint.profiler.instrument.classreading.SimpleClassMetadata;
+import com.navercorp.pinpoint.profiler.instrument.classreading.SimpleClassMetadataReader;
+
 /**
  * @author Woonduk Kang(emeroad)
  */
@@ -51,4 +55,10 @@ public class FileBinary {
                 ", fileBinarySize=" + fileBinary.length +
                 '}';
     }
+
+    public SimpleClassMetadata parseClass(PlainClassLoaderHandler plainClassLoaderHandler) {
+        byte[] fileBinaryArray = getFileBinary();
+        SimpleClassMetadata classMetadata = SimpleClassMetadataReader.readSimpleClassMetadata(fileBinaryArray);
+        return classMetadata;
+    }
 }
diff --git a/profiler/src/test/java/com/navercorp/pinpoint/profiler/context/thrift/SpanThriftMessageConverterTest.java b/profiler/src/test/java/com/navercorp/pinpoint/profiler/context/thrift/SpanThriftMessageConverterTest.java
index 6dbee6e..762e120 100644
--- a/profiler/src/test/java/com/navercorp/pinpoint/profiler/context/thrift/SpanThriftMessageConverterTest.java
+++ b/profiler/src/test/java/com/navercorp/pinpoint/profiler/context/thrift/SpanThriftMessageConverterTest.java
@@ -158,7 +158,7 @@ public class SpanThriftMessageConverterTest {
         spanEvent.setAsyncIdObject(new DefaultAsyncId(RandomUtils.nextInt(0, 100)));
 
 
-        spanEvent.addAnnotation(new Annotation(1));
+        new Annotation(1).addAnnotation(spanEvent);
 
         TSpanEvent tSpanEvent = messageConverter.buildTSpanEvent(spanEvent);
         spanPostProcessor.postEventProcess(Collections.singletonList(spanEvent), Collections.singletonList(tSpanEvent), startTime);
diff --git a/rpc/src/main/java/com/navercorp/pinpoint/rpc/client/DefaultPinpointClientHandler.java b/rpc/src/main/java/com/navercorp/pinpoint/rpc/client/DefaultPinpointClientHandler.java
index 8b14c36..5fc2e72 100644
--- a/rpc/src/main/java/com/navercorp/pinpoint/rpc/client/DefaultPinpointClientHandler.java
+++ b/rpc/src/main/java/com/navercorp/pinpoint/rpc/client/DefaultPinpointClientHandler.java
@@ -473,7 +473,7 @@ public class DefaultPinpointClientHandler extends SimpleChannelHandler implement
             return;
         }
 
-        if (state.isReconnect(currentStateCode)) {
+        if (currentStateCode.isReconnect(state)) {
             throw new PinpointSocketException("reconnecting...");
         }
 
diff --git a/rpc/src/main/java/com/navercorp/pinpoint/rpc/client/PinpointClientHandlerState.java b/rpc/src/main/java/com/navercorp/pinpoint/rpc/client/PinpointClientHandlerState.java
index abaddae..4b1ee8f 100644
--- a/rpc/src/main/java/com/navercorp/pinpoint/rpc/client/PinpointClientHandlerState.java
+++ b/rpc/src/main/java/com/navercorp/pinpoint/rpc/client/PinpointClientHandlerState.java
@@ -167,22 +167,6 @@ public class PinpointClientHandlerState {
         return SocketStateCode.onClose(currentStateCode);
     }
 
-    boolean isReconnect(SocketStateCode currentStateCode) {
-        if (currentStateCode == SocketStateCode.BEING_CLOSE_BY_SERVER) {
-            return true;
-        }
-
-        if (currentStateCode == SocketStateCode.CLOSED_BY_SERVER) {
-            return true;
-        }
-        
-        if (currentStateCode == SocketStateCode.UNEXPECTED_CLOSE_BY_SERVER) {
-            return true;
-        }
-        
-        return false;
-    }
-
     SocketStateCode getCurrentStateCode() {
         return state.getCurrentState();
     }
diff --git a/rpc/src/main/java/com/navercorp/pinpoint/rpc/client/PinpointClientHandshaker.java b/rpc/src/main/java/com/navercorp/pinpoint/rpc/client/PinpointClientHandshaker.java
index 6f8a5c3..65e7a33 100644
--- a/rpc/src/main/java/com/navercorp/pinpoint/rpc/client/PinpointClientHandshaker.java
+++ b/rpc/src/main/java/com/navercorp/pinpoint/rpc/client/PinpointClientHandshaker.java
@@ -165,7 +165,7 @@ public class PinpointClientHandshaker {
                 return false;
             }
 
-            Map handshakeResponse = decode(responsePacket);
+            Map handshakeResponse = responsePacket.decode(this);
 
             HandshakeResponseCode code = getResponseCode(handshakeResponse);
             handshakeResult.compareAndSet(null, code);
@@ -178,22 +178,6 @@ public class PinpointClientHandshaker {
         }
     }
 
-    private Map decode(ControlHandshakeResponsePacket message) {
-        byte[] payload = message.getPayload();
-        if (payload == null) {
-            return Collections.EMPTY_MAP;
-        }
-
-        try {
-            Map result = (Map) ControlMessageEncodingUtils.decode(payload);
-            return result;
-        } catch (ProtocolException e) {
-
-        }
-
-        return Collections.EMPTY_MAP;
-    }
-
     private HandshakeResponseCode getResponseCode(Map handshakeResponse) {
         if (handshakeResponse == Collections.EMPTY_MAP) {
             return HandshakeResponseCode.PROTOCOL_ERROR;
diff --git a/rpc/src/main/java/com/navercorp/pinpoint/rpc/common/SocketStateCode.java b/rpc/src/main/java/com/navercorp/pinpoint/rpc/common/SocketStateCode.java
index c01f9a0..999b286 100644
--- a/rpc/src/main/java/com/navercorp/pinpoint/rpc/common/SocketStateCode.java
+++ b/rpc/src/main/java/com/navercorp/pinpoint/rpc/common/SocketStateCode.java
@@ -17,6 +17,7 @@
 package com.navercorp.pinpoint.rpc.common;
 
 import com.navercorp.pinpoint.common.util.ArrayUtils;
+import com.navercorp.pinpoint.rpc.client.PinpointClientHandlerState;
 
 import java.util.Collections;
 import java.util.EnumSet;
@@ -188,4 +189,19 @@ public enum SocketStateCode {
         return validBeforeStateSet;
     }
 
+    public boolean isReconnect(PinpointClientHandlerState pinpointClientHandlerState) {
+        if (this == BEING_CLOSE_BY_SERVER) {
+            return true;
+        }
+
+        if (this == CLOSED_BY_SERVER) {
+            return true;
+        }
+
+        if (this == UNEXPECTED_CLOSE_BY_SERVER) {
+            return true;
+        }
+
+        return false;
+    }
 }
\ No newline at end of file
diff --git a/rpc/src/main/java/com/navercorp/pinpoint/rpc/packet/ControlHandshakeResponsePacket.java b/rpc/src/main/java/com/navercorp/pinpoint/rpc/packet/ControlHandshakeResponsePacket.java
index 7ead3b3..759d87d 100644
--- a/rpc/src/main/java/com/navercorp/pinpoint/rpc/packet/ControlHandshakeResponsePacket.java
+++ b/rpc/src/main/java/com/navercorp/pinpoint/rpc/packet/ControlHandshakeResponsePacket.java
@@ -16,9 +16,15 @@
 
 package com.navercorp.pinpoint.rpc.packet;
 
+import com.navercorp.pinpoint.rpc.client.PinpointClientHandshaker;
+import com.navercorp.pinpoint.rpc.control.ProtocolException;
+import com.navercorp.pinpoint.rpc.util.ControlMessageEncodingUtils;
 import org.jboss.netty.buffer.ChannelBuffer;
 import org.jboss.netty.buffer.ChannelBuffers;
 
+import java.util.Collections;
+import java.util.Map;
+
 /**
  * @author koo.taejin
  */
@@ -83,4 +89,19 @@ public class ControlHandshakeResponsePacket extends BasicPacket {
         return sb.toString();
     }
 
+    public Map decode(PinpointClientHandshaker pinpointClientHandshaker) {
+        byte[] payload = getPayload();
+        if (payload == null) {
+            return Collections.EMPTY_MAP;
+        }
+
+        try {
+            Map result = (Map) ControlMessageEncodingUtils.decode(payload);
+            return result;
+        } catch (ProtocolException e) {
+
+        }
+
+        return Collections.EMPTY_MAP;
+    }
 }
diff --git a/rpc/src/main/java/com/navercorp/pinpoint/rpc/packet/HandshakeResponseCode.java b/rpc/src/main/java/com/navercorp/pinpoint/rpc/packet/HandshakeResponseCode.java
index 6a35a9a..e2cb488 100644
--- a/rpc/src/main/java/com/navercorp/pinpoint/rpc/packet/HandshakeResponseCode.java
+++ b/rpc/src/main/java/com/navercorp/pinpoint/rpc/packet/HandshakeResponseCode.java
@@ -16,6 +16,8 @@
 
 package com.navercorp.pinpoint.rpc.packet;
 
+import com.navercorp.pinpoint.rpc.server.DefaultPinpointServer;
+
 import java.util.EnumSet;
 import java.util.Set;
 
@@ -77,4 +79,16 @@ public enum HandshakeResponseCode {
         return UNKNOWN_CODE;
     }
 
+    public HandshakeResponseCode getHandshakeResponseCode(boolean isFirst, DefaultPinpointServer defaultPinpointServer) {
+        if (isFirst) {
+            return this;
+        }
+        if (DUPLEX_COMMUNICATION == this) {
+            return ALREADY_DUPLEX_COMMUNICATION;
+        } else if (SIMPLEX_COMMUNICATION == this) {
+            return ALREADY_SIMPLEX_COMMUNICATION;
+        }
+
+        return this;
+    }
 }
diff --git a/rpc/src/main/java/com/navercorp/pinpoint/rpc/packet/stream/StreamPingPacket.java b/rpc/src/main/java/com/navercorp/pinpoint/rpc/packet/stream/StreamPingPacket.java
index bb2a7d1..96ec00f 100644
--- a/rpc/src/main/java/com/navercorp/pinpoint/rpc/packet/stream/StreamPingPacket.java
+++ b/rpc/src/main/java/com/navercorp/pinpoint/rpc/packet/stream/StreamPingPacket.java
@@ -16,6 +16,9 @@
 
 package com.navercorp.pinpoint.rpc.packet.stream;
 
+import com.navercorp.pinpoint.rpc.PinpointSocketException;
+import com.navercorp.pinpoint.rpc.stream.StreamChannel;
+import com.navercorp.pinpoint.rpc.stream.StreamChannelManager;
 import org.jboss.netty.buffer.ChannelBuffer;
 import org.jboss.netty.buffer.ChannelBuffers;
 
@@ -80,4 +83,11 @@ public class StreamPingPacket extends BasicStreamPacket {
         return sb.toString();
     }
 
+    public void handlePing(StreamChannel streamChannel, StreamChannelManager streamChannelManager) {
+        try {
+            streamChannel.sendPong(getRequestId());
+        } catch (PinpointSocketException e) {
+            streamChannel.close(StreamCode.STATE_NOT_CONNECTED);
+        }
+    }
 }
diff --git a/rpc/src/main/java/com/navercorp/pinpoint/rpc/server/DefaultPinpointServer.java b/rpc/src/main/java/com/navercorp/pinpoint/rpc/server/DefaultPinpointServer.java
index 7e58db8..cead94f 100644
--- a/rpc/src/main/java/com/navercorp/pinpoint/rpc/server/DefaultPinpointServer.java
+++ b/rpc/src/main/java/com/navercorp/pinpoint/rpc/server/DefaultPinpointServer.java
@@ -487,7 +487,7 @@ public class DefaultPinpointServer implements PinpointServer {
     }
 
     private Map<String, Object> createHandshakeResponse(HandshakeResponseCode responseCode, boolean isFirst) {
-        final HandshakeResponseCode createdCode = getHandshakeResponseCode(responseCode, isFirst);
+        final HandshakeResponseCode createdCode = responseCode.getHandshakeResponseCode(isFirst, this);
 
         Map<String, Object> result = new HashMap<String, Object>();
         result.put(ControlHandshakeResponsePacket.CODE, createdCode.getCode());
@@ -500,19 +500,6 @@ public class DefaultPinpointServer implements PinpointServer {
         return result;
     }
 
-    private HandshakeResponseCode getHandshakeResponseCode(HandshakeResponseCode responseCode, boolean isFirst) {
-        if (isFirst) {
-            return responseCode;
-        }
-        if (HandshakeResponseCode.DUPLEX_COMMUNICATION == responseCode) {
-            return HandshakeResponseCode.ALREADY_DUPLEX_COMMUNICATION;
-        } else if (HandshakeResponseCode.SIMPLEX_COMMUNICATION == responseCode) {
-            return HandshakeResponseCode.ALREADY_SIMPLEX_COMMUNICATION;
-        }
-
-        return responseCode;
-    }
-
     private void sendHandshakeResponse0(int requestId, Map<String, Object> data) {
         try {
             byte[] resultPayload = ControlMessageEncodingUtils.encode(data);
diff --git a/rpc/src/main/java/com/navercorp/pinpoint/rpc/stream/StreamChannelManager.java b/rpc/src/main/java/com/navercorp/pinpoint/rpc/stream/StreamChannelManager.java
index b44ef97..883fa71 100644
--- a/rpc/src/main/java/com/navercorp/pinpoint/rpc/stream/StreamChannelManager.java
+++ b/rpc/src/main/java/com/navercorp/pinpoint/rpc/stream/StreamChannelManager.java
@@ -17,7 +17,6 @@
 package com.navercorp.pinpoint.rpc.stream;
 
 import com.navercorp.pinpoint.common.util.Assert;
-import com.navercorp.pinpoint.rpc.PinpointSocketException;
 import com.navercorp.pinpoint.rpc.packet.PacketType;
 import com.navercorp.pinpoint.rpc.packet.stream.StreamClosePacket;
 import com.navercorp.pinpoint.rpc.packet.stream.StreamCode;
@@ -110,7 +109,7 @@ public class StreamChannelManager {
                 serverStreamChannel.handleStreamClosePacket((StreamClosePacket) packet);
                 break;
             case PacketType.APPLICATION_STREAM_PING:
-                handlePing(serverStreamChannel, (StreamPingPacket) packet);
+                ((StreamPingPacket) packet).handlePing(serverStreamChannel, this);
                 break;
             case PacketType.APPLICATION_STREAM_PONG:
                 // handlePong((StreamPongPacket) packet);
@@ -142,7 +141,7 @@ public class StreamChannelManager {
                     clientStreamChannel.handleStreamClosePacket((StreamClosePacket) packet);
                     break;
                 case PacketType.APPLICATION_STREAM_PING:
-                    handlePing(clientStreamChannel, (StreamPingPacket) packet);
+                    ((StreamPingPacket) packet).handlePing(clientStreamChannel, this);
                     break;
                 case PacketType.APPLICATION_STREAM_PONG:
                     // handlePong((StreamPongPacket) packet);
@@ -168,14 +167,6 @@ public class StreamChannelManager {
         }
     }
 
-    private void handlePing(StreamChannel streamChannel, StreamPingPacket packet) {
-        try {
-            streamChannel.sendPong(packet.getRequestId());
-        } catch (PinpointSocketException e) {
-            streamChannel.close(StreamCode.STATE_NOT_CONNECTED);
-        }
-    }
-
     public void close() {
         streamChannelRepository.close(StreamCode.STATE_CLOSED);
     }
diff --git a/rpc/src/main/java/com/navercorp/pinpoint/rpc/stream/StreamChannelState.java b/rpc/src/main/java/com/navercorp/pinpoint/rpc/stream/StreamChannelState.java
index d1f4a7c..7e57d8b 100644
--- a/rpc/src/main/java/com/navercorp/pinpoint/rpc/stream/StreamChannelState.java
+++ b/rpc/src/main/java/com/navercorp/pinpoint/rpc/stream/StreamChannelState.java
@@ -49,20 +49,12 @@ public class StreamChannelState {
     }
 
     public boolean checkState(StreamChannelStateCode expectedCode) {
-        return checkState(getCurrentState(), expectedCode);
-    }
-
-    public boolean checkState(StreamChannelStateCode currentCode, StreamChannelStateCode expectedCode) {
-        if (currentCode == expectedCode) {
-            return true;
-        } else {
-            return false;
-        }
+        return getCurrentState().checkState(expectedCode, this);
     }
 
     public void assertState(StreamChannelStateCode stateCode) {
         final StreamChannelStateCode currentCode = getCurrentState();
-        if (!checkState(currentCode, stateCode)) {
+        if (!currentCode.checkState(stateCode, this)) {
             throw new PinpointSocketException("expected:<" + stateCode + "> but was:<" + currentCode + ">;");
         }
     }
diff --git a/rpc/src/main/java/com/navercorp/pinpoint/rpc/stream/StreamChannelStateCode.java b/rpc/src/main/java/com/navercorp/pinpoint/rpc/stream/StreamChannelStateCode.java
index 3840ed1..cb3d7e3 100644
--- a/rpc/src/main/java/com/navercorp/pinpoint/rpc/stream/StreamChannelStateCode.java
+++ b/rpc/src/main/java/com/navercorp/pinpoint/rpc/stream/StreamChannelStateCode.java
@@ -60,4 +60,11 @@ public enum StreamChannelStateCode {
         return false;
     }
 
+    public boolean checkState(StreamChannelStateCode expectedCode, StreamChannelState streamChannelState) {
+        if (this == expectedCode) {
+            return true;
+        } else {
+            return false;
+        }
+    }
 }
diff --git a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TAgentStat.java b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TAgentStat.java
index 891d8c3..ce290a6 100644
--- a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TAgentStat.java
+++ b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TAgentStat.java
@@ -44,7 +44,14 @@ public class TAgentStat implements org.apache.thrift.TBase<TAgentStat, TAgentSta
   private TDirectBuffer directBuffer; // optional
   private java.lang.String metadata; // optional
 
-  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+    public void addToAgentStats(TAgentStatBatch tAgentStatBatch) {
+        if (tAgentStatBatch.getAgentStats() == null) {
+        tAgentStatBatch.setAgentStats(new java.util.ArrayList<TAgentStat>());
+      }
+      tAgentStatBatch.getAgentStats().add(this);
+    }
+
+    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
     AGENT_ID((short)1, "agentId"),
     START_TIMESTAMP((short)2, "startTimestamp"),
diff --git a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TAgentStatBatch.java b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TAgentStatBatch.java
index eaaa00a..e365278 100644
--- a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TAgentStatBatch.java
+++ b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TAgentStatBatch.java
@@ -201,14 +201,7 @@ public class TAgentStatBatch implements org.apache.thrift.TBase<TAgentStatBatch,
     return (this.agentStats == null) ? null : this.agentStats.iterator();
   }
 
-  public void addToAgentStats(TAgentStat elem) {
-    if (this.agentStats == null) {
-      this.agentStats = new java.util.ArrayList<TAgentStat>();
-    }
-    this.agentStats.add(elem);
-  }
-
-  public java.util.List<TAgentStat> getAgentStats() {
+    public java.util.List<TAgentStat> getAgentStats() {
     return this.agentStats;
   }
 
diff --git a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TDataSource.java b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TDataSource.java
index 3975868..99e81b9 100644
--- a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TDataSource.java
+++ b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TDataSource.java
@@ -28,7 +28,14 @@ public class TDataSource implements org.apache.thrift.TBase<TDataSource, TDataSo
   private int activeConnectionSize; // optional
   private int maxConnectionSize; // optional
 
-  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+    public void addToDataSourceList(TDataSourceList tDataSourceList) {
+        if (tDataSourceList.getDataSourceList() == null) {
+        tDataSourceList.setDataSourceList(new java.util.ArrayList<TDataSource>());
+      }
+      tDataSourceList.getDataSourceList().add(this);
+    }
+
+    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
     ID((short)1, "id"),
     SERVICE_TYPE_CODE((short)2, "serviceTypeCode"),
diff --git a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TDataSourceList.java b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TDataSourceList.java
index b40b207..87612d1 100644
--- a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TDataSourceList.java
+++ b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TDataSourceList.java
@@ -127,14 +127,7 @@ public class TDataSourceList implements org.apache.thrift.TBase<TDataSourceList,
     return (this.dataSourceList == null) ? null : this.dataSourceList.iterator();
   }
 
-  public void addToDataSourceList(TDataSource elem) {
-    if (this.dataSourceList == null) {
-      this.dataSourceList = new java.util.ArrayList<TDataSource>();
-    }
-    this.dataSourceList.add(elem);
-  }
-
-  public java.util.List<TDataSource> getDataSourceList() {
+    public java.util.List<TDataSource> getDataSourceList() {
     return this.dataSourceList;
   }
 
diff --git a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TServerMetaData.java b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TServerMetaData.java
index a846b1e..195d484 100644
--- a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TServerMetaData.java
+++ b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TServerMetaData.java
@@ -206,14 +206,7 @@ public class TServerMetaData implements org.apache.thrift.TBase<TServerMetaData,
     return (this.serviceInfos == null) ? null : this.serviceInfos.iterator();
   }
 
-  public void addToServiceInfos(TServiceInfo elem) {
-    if (this.serviceInfos == null) {
-      this.serviceInfos = new java.util.ArrayList<TServiceInfo>();
-    }
-    this.serviceInfos.add(elem);
-  }
-
-  public java.util.List<TServiceInfo> getServiceInfos() {
+    public java.util.List<TServiceInfo> getServiceInfos() {
     return this.serviceInfos;
   }
 
diff --git a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TServiceInfo.java b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TServiceInfo.java
index f7f35c2..baf3493 100644
--- a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TServiceInfo.java
+++ b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TServiceInfo.java
@@ -20,7 +20,14 @@ public class TServiceInfo implements org.apache.thrift.TBase<TServiceInfo, TServ
   private java.lang.String serviceName; // optional
   private java.util.List<java.lang.String> serviceLibs; // optional
 
-  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+    public void addToServiceInfos(TServerMetaData tServerMetaData) {
+        if (tServerMetaData.getServiceInfos() == null) {
+        tServerMetaData.setServiceInfos(new java.util.ArrayList<TServiceInfo>());
+      }
+      tServerMetaData.getServiceInfos().add(this);
+    }
+
+    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
     SERVICE_NAME((short)1, "serviceName"),
     SERVICE_LIBS((short)2, "serviceLibs");
diff --git a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TSpan.java b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TSpan.java
index f33a7cf..d7809e3 100644
--- a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TSpan.java
+++ b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TSpan.java
@@ -6,6 +6,8 @@
  */
 package com.navercorp.pinpoint.thrift.dto;
 
+import com.navercorp.pinpoint.thrift.io.ChunkHeaderBufferedTBaseSerializer;
+
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
 @javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-03-21")
 public class TSpan implements org.apache.thrift.TBase<TSpan, TSpan._Fields>, java.io.Serializable, Cloneable, Comparable<TSpan> {
@@ -64,7 +66,28 @@ public class TSpan implements org.apache.thrift.TBase<TSpan, TSpan._Fields>, jav
   private byte loggingTransactionInfo; // optional
   private byte version; // optional
 
-  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+    public TSpanChunk toSpanChunk(ChunkHeaderBufferedTBaseSerializer chunkHeaderBufferedTBaseSerializer) {
+        // create TSpanChunk
+        final TSpanChunk spanChunk = new TSpanChunk();
+        spanChunk.setSpanEventList(getSpanEventList());
+        spanChunk.setSpanEventListIsSet(true);
+        spanChunk.setAgentId(getAgentId());
+        spanChunk.setAgentIdIsSet(true);
+        spanChunk.setApplicationName(getApplicationName());
+        spanChunk.setApplicationNameIsSet(true);
+        spanChunk.setAgentStartTime(getStartTime());
+        spanChunk.setAgentStartTimeIsSet(true);
+        spanChunk.setTransactionId(getTransactionId());
+        spanChunk.setTransactionIdIsSet(true);
+        spanChunk.setSpanId(getSpanId());
+        spanChunk.setSpanIdIsSet(true);
+        spanChunk.setEndPoint(getEndPoint());
+        spanChunk.setEndPointIsSet(true);
+
+        return spanChunk;
+    }
+
+    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
     AGENT_ID((short)1, "agentId"),
     APPLICATION_NAME((short)2, "applicationName"),
diff --git a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TSpanChunk.java b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TSpanChunk.java
index 14a0b1a..7c3506c 100644
--- a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TSpanChunk.java
+++ b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TSpanChunk.java
@@ -440,14 +440,7 @@ public class TSpanChunk implements org.apache.thrift.TBase<TSpanChunk, TSpanChun
     return (this.spanEventList == null) ? null : this.spanEventList.iterator();
   }
 
-  public void addToSpanEventList(TSpanEvent elem) {
-    if (this.spanEventList == null) {
-      this.spanEventList = new java.util.ArrayList<TSpanEvent>();
-    }
-    this.spanEventList.add(elem);
-  }
-
-  public java.util.List<TSpanEvent> getSpanEventList() {
+    public java.util.List<TSpanEvent> getSpanEventList() {
     return this.spanEventList;
   }
 
diff --git a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TSpanEvent.java b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TSpanEvent.java
index 9d371a4..af8d4e8 100644
--- a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TSpanEvent.java
+++ b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/TSpanEvent.java
@@ -64,7 +64,14 @@ public class TSpanEvent implements org.apache.thrift.TBase<TSpanEvent, TSpanEven
   private int nextAsyncId; // optional
   private short asyncSequence; // optional
 
-  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+    public void addToSpanEventList(TSpanChunk tSpanChunk) {
+        if (tSpanChunk.getSpanEventList() == null) {
+        tSpanChunk.setSpanEventList(new java.util.ArrayList<TSpanEvent>());
+      }
+      tSpanChunk.getSpanEventList().add(this);
+    }
+
+    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
     SPAN_ID((short)7, "spanId"),
     SEQUENCE((short)8, "sequence"),
diff --git a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/command/TActiveThreadDump.java b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/command/TActiveThreadDump.java
index b55d1bf..2bb2a9a 100644
--- a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/command/TActiveThreadDump.java
+++ b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/command/TActiveThreadDump.java
@@ -28,7 +28,14 @@ public class TActiveThreadDump implements org.apache.thrift.TBase<TActiveThreadD
   private java.lang.String transactionId; // optional
   private java.lang.String entryPoint; // optional
 
-  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+    public void addToThreadDumps(TCmdActiveThreadDumpRes tCmdActiveThreadDumpRes) {
+        if (tCmdActiveThreadDumpRes.getThreadDumps() == null) {
+        tCmdActiveThreadDumpRes.setThreadDumps(new java.util.ArrayList<TActiveThreadDump>());
+      }
+      tCmdActiveThreadDumpRes.getThreadDumps().add(this);
+    }
+
+    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
     START_TIME((short)1, "startTime"),
     LOCAL_TRACE_ID((short)2, "localTraceId"),
diff --git a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/command/TActiveThreadLightDump.java b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/command/TActiveThreadLightDump.java
index c1b433e..d42f7f6 100644
--- a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/command/TActiveThreadLightDump.java
+++ b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/command/TActiveThreadLightDump.java
@@ -28,7 +28,14 @@ public class TActiveThreadLightDump implements org.apache.thrift.TBase<TActiveTh
   private java.lang.String transactionId; // optional
   private java.lang.String entryPoint; // optional
 
-  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+    public void addToThreadDumps(TCmdActiveThreadLightDumpRes tCmdActiveThreadLightDumpRes) {
+        if (tCmdActiveThreadLightDumpRes.getThreadDumps() == null) {
+        tCmdActiveThreadLightDumpRes.setThreadDumps(new java.util.ArrayList<TActiveThreadLightDump>());
+      }
+      tCmdActiveThreadLightDumpRes.getThreadDumps().add(this);
+    }
+
+    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
     START_TIME((short)1, "startTime"),
     LOCAL_TRACE_ID((short)2, "localTraceId"),
diff --git a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/command/TCmdActiveThreadDumpRes.java b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/command/TCmdActiveThreadDumpRes.java
index c10f8e5..6fba727 100644
--- a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/command/TCmdActiveThreadDumpRes.java
+++ b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/command/TCmdActiveThreadDumpRes.java
@@ -161,14 +161,7 @@ public class TCmdActiveThreadDumpRes implements org.apache.thrift.TBase<TCmdActi
     return (this.threadDumps == null) ? null : this.threadDumps.iterator();
   }
 
-  public void addToThreadDumps(TActiveThreadDump elem) {
-    if (this.threadDumps == null) {
-      this.threadDumps = new java.util.ArrayList<TActiveThreadDump>();
-    }
-    this.threadDumps.add(elem);
-  }
-
-  public java.util.List<TActiveThreadDump> getThreadDumps() {
+    public java.util.List<TActiveThreadDump> getThreadDumps() {
     return this.threadDumps;
   }
 
diff --git a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/command/TCmdActiveThreadLightDumpRes.java b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/command/TCmdActiveThreadLightDumpRes.java
index c2bceaa..ab1c88a 100644
--- a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/command/TCmdActiveThreadLightDumpRes.java
+++ b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/command/TCmdActiveThreadLightDumpRes.java
@@ -161,14 +161,7 @@ public class TCmdActiveThreadLightDumpRes implements org.apache.thrift.TBase<TCm
     return (this.threadDumps == null) ? null : this.threadDumps.iterator();
   }
 
-  public void addToThreadDumps(TActiveThreadLightDump elem) {
-    if (this.threadDumps == null) {
-      this.threadDumps = new java.util.ArrayList<TActiveThreadLightDump>();
-    }
-    this.threadDumps.add(elem);
-  }
-
-  public java.util.List<TActiveThreadLightDump> getThreadDumps() {
+    public java.util.List<TActiveThreadLightDump> getThreadDumps() {
     return this.threadDumps;
   }
 
diff --git a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/command/TMonitorInfo.java b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/command/TMonitorInfo.java
index e40cbab..40bd670 100644
--- a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/command/TMonitorInfo.java
+++ b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/command/TMonitorInfo.java
@@ -20,7 +20,14 @@ public class TMonitorInfo implements org.apache.thrift.TBase<TMonitorInfo, TMoni
   private int stackDepth; // required
   private java.lang.String stackFrame; // required
 
-  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+    public void addToLockedMonitors(TThreadDump tThreadDump) {
+        if (tThreadDump.getLockedMonitors() == null) {
+        tThreadDump.setLockedMonitors(new java.util.ArrayList<TMonitorInfo>());
+      }
+      tThreadDump.getLockedMonitors().add(this);
+    }
+
+    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
     STACK_DEPTH((short)1, "stackDepth"),
     STACK_FRAME((short)2, "stackFrame");
diff --git a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/command/TThreadDump.java b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/command/TThreadDump.java
index e5bfac0..2381435 100644
--- a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/command/TThreadDump.java
+++ b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/command/TThreadDump.java
@@ -641,14 +641,7 @@ public class TThreadDump implements org.apache.thrift.TBase<TThreadDump, TThread
     return (this.lockedMonitors == null) ? null : this.lockedMonitors.iterator();
   }
 
-  public void addToLockedMonitors(TMonitorInfo elem) {
-    if (this.lockedMonitors == null) {
-      this.lockedMonitors = new java.util.ArrayList<TMonitorInfo>();
-    }
-    this.lockedMonitors.add(elem);
-  }
-
-  public java.util.List<TMonitorInfo> getLockedMonitors() {
+    public java.util.List<TMonitorInfo> getLockedMonitors() {
     return this.lockedMonitors;
   }
 
diff --git a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/flink/TFAgentStat.java b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/flink/TFAgentStat.java
index 55c6b58..438b626 100644
--- a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/flink/TFAgentStat.java
+++ b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/flink/TFAgentStat.java
@@ -42,7 +42,14 @@ public class TFAgentStat implements org.apache.thrift.TBase<TFAgentStat, TFAgent
   private TFDirectBuffer directBuffer; // optional
   private java.lang.String metadata; // optional
 
-  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+    public void addToAgentStats(TFAgentStatBatch tfAgentStatBatch) {
+        if (tfAgentStatBatch.getAgentStats() == null) {
+        tfAgentStatBatch.setAgentStats(new java.util.ArrayList<TFAgentStat>());
+      }
+      tfAgentStatBatch.getAgentStats().add(this);
+    }
+
+    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
     AGENT_ID((short)1, "agentId"),
     START_TIMESTAMP((short)2, "startTimestamp"),
diff --git a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/flink/TFAgentStatBatch.java b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/flink/TFAgentStatBatch.java
index aff6854..2e1c1fa 100644
--- a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/flink/TFAgentStatBatch.java
+++ b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/flink/TFAgentStatBatch.java
@@ -201,14 +201,7 @@ public class TFAgentStatBatch implements org.apache.thrift.TBase<TFAgentStatBatc
     return (this.agentStats == null) ? null : this.agentStats.iterator();
   }
 
-  public void addToAgentStats(TFAgentStat elem) {
-    if (this.agentStats == null) {
-      this.agentStats = new java.util.ArrayList<TFAgentStat>();
-    }
-    this.agentStats.add(elem);
-  }
-
-  public java.util.List<TFAgentStat> getAgentStats() {
+    public java.util.List<TFAgentStat> getAgentStats() {
     return this.agentStats;
   }
 
diff --git a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/flink/TFDataSource.java b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/flink/TFDataSource.java
index a049768..4bfe7dd 100644
--- a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/flink/TFDataSource.java
+++ b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/flink/TFDataSource.java
@@ -28,7 +28,14 @@ public class TFDataSource implements org.apache.thrift.TBase<TFDataSource, TFDat
   private int activeConnectionSize; // optional
   private int maxConnectionSize; // optional
 
-  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+    public void addToDataSourceList(TFDataSourceList tfDataSourceList) {
+        if (tfDataSourceList.getDataSourceList() == null) {
+        tfDataSourceList.setDataSourceList(new java.util.ArrayList<TFDataSource>());
+      }
+      tfDataSourceList.getDataSourceList().add(this);
+    }
+
+    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
     ID((short)1, "id"),
     SERVICE_TYPE_CODE((short)2, "serviceTypeCode"),
diff --git a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/flink/TFDataSourceList.java b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/flink/TFDataSourceList.java
index f785345..34191d4 100644
--- a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/flink/TFDataSourceList.java
+++ b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/flink/TFDataSourceList.java
@@ -127,14 +127,7 @@ public class TFDataSourceList implements org.apache.thrift.TBase<TFDataSourceLis
     return (this.dataSourceList == null) ? null : this.dataSourceList.iterator();
   }
 
-  public void addToDataSourceList(TFDataSource elem) {
-    if (this.dataSourceList == null) {
-      this.dataSourceList = new java.util.ArrayList<TFDataSource>();
-    }
-    this.dataSourceList.add(elem);
-  }
-
-  public java.util.List<TFDataSource> getDataSourceList() {
+    public java.util.List<TFDataSource> getDataSourceList() {
     return this.dataSourceList;
   }
 
diff --git a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/flink/TFServerMetaData.java b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/flink/TFServerMetaData.java
index bd03128..ea9f44c 100644
--- a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/flink/TFServerMetaData.java
+++ b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/flink/TFServerMetaData.java
@@ -206,14 +206,7 @@ public class TFServerMetaData implements org.apache.thrift.TBase<TFServerMetaDat
     return (this.serviceInfos == null) ? null : this.serviceInfos.iterator();
   }
 
-  public void addToServiceInfos(TFServiceInfo elem) {
-    if (this.serviceInfos == null) {
-      this.serviceInfos = new java.util.ArrayList<TFServiceInfo>();
-    }
-    this.serviceInfos.add(elem);
-  }
-
-  public java.util.List<TFServiceInfo> getServiceInfos() {
+    public java.util.List<TFServiceInfo> getServiceInfos() {
     return this.serviceInfos;
   }
 
diff --git a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/flink/TFServiceInfo.java b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/flink/TFServiceInfo.java
index 983e92c..74662cf 100644
--- a/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/flink/TFServiceInfo.java
+++ b/thrift/src/main/java/com/navercorp/pinpoint/thrift/dto/flink/TFServiceInfo.java
@@ -20,7 +20,14 @@ public class TFServiceInfo implements org.apache.thrift.TBase<TFServiceInfo, TFS
   private java.lang.String serviceName; // optional
   private java.util.List<java.lang.String> serviceLibs; // optional
 
-  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+    public void addToServiceInfos(TFServerMetaData tfServerMetaData) {
+        if (tfServerMetaData.getServiceInfos() == null) {
+        tfServerMetaData.setServiceInfos(new java.util.ArrayList<TFServiceInfo>());
+      }
+      tfServerMetaData.getServiceInfos().add(this);
+    }
+
+    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
     SERVICE_NAME((short)1, "serviceName"),
     SERVICE_LIBS((short)2, "serviceLibs");
diff --git a/thrift/src/main/java/com/navercorp/pinpoint/thrift/io/ChunkHeaderBufferedTBaseSerializer.java b/thrift/src/main/java/com/navercorp/pinpoint/thrift/io/ChunkHeaderBufferedTBaseSerializer.java
index 681f118..bd50801 100644
--- a/thrift/src/main/java/com/navercorp/pinpoint/thrift/io/ChunkHeaderBufferedTBaseSerializer.java
+++ b/thrift/src/main/java/com/navercorp/pinpoint/thrift/io/ChunkHeaderBufferedTBaseSerializer.java
@@ -111,7 +111,7 @@ public class ChunkHeaderBufferedTBaseSerializer {
             }
             write(span, FIELD_NAME_SPAN_EVENT_LIST, eventStream.split(chunkSize));
             while (!eventStream.isEmpty()) {
-                final TSpanChunk spanChunk = toSpanChunk(span);
+                final TSpanChunk spanChunk = span.toSpanChunk(this);
                 write(spanChunk, FIELD_NAME_SPAN_EVENT_LIST, eventStream.split(chunkSize));
             }
         } finally {
@@ -219,24 +219,4 @@ public class ChunkHeaderBufferedTBaseSerializer {
         return sb.toString();
     }
 
-    TSpanChunk toSpanChunk(TSpan span) {
-        // create TSpanChunk
-        final TSpanChunk spanChunk = new TSpanChunk();
-        spanChunk.setSpanEventList(span.getSpanEventList());
-        spanChunk.setSpanEventListIsSet(true);
-        spanChunk.setAgentId(span.getAgentId());
-        spanChunk.setAgentIdIsSet(true);
-        spanChunk.setApplicationName(span.getApplicationName());
-        spanChunk.setApplicationNameIsSet(true);
-        spanChunk.setAgentStartTime(span.getStartTime());
-        spanChunk.setAgentStartTimeIsSet(true);
-        spanChunk.setTransactionId(span.getTransactionId());
-        spanChunk.setTransactionIdIsSet(true);
-        spanChunk.setSpanId(span.getSpanId());
-        spanChunk.setSpanIdIsSet(true);
-        spanChunk.setEndPoint(span.getEndPoint());
-        spanChunk.setEndPointIsSet(true);
-
-        return spanChunk;
-    }
 }
\ No newline at end of file
diff --git a/thrift/src/test/java/com/navercorp/pinpoint/thrift/io/TSpanMockBuilder.java b/thrift/src/test/java/com/navercorp/pinpoint/thrift/io/TSpanMockBuilder.java
index 930443e..a3794ba 100644
--- a/thrift/src/test/java/com/navercorp/pinpoint/thrift/io/TSpanMockBuilder.java
+++ b/thrift/src/test/java/com/navercorp/pinpoint/thrift/io/TSpanMockBuilder.java
@@ -16,9 +16,7 @@
 
 package com.navercorp.pinpoint.thrift.io;
 
-import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.List;
 
 import com.navercorp.pinpoint.thrift.dto.TSpan;
 import com.navercorp.pinpoint.thrift.dto.TSpanChunk;
@@ -109,7 +107,7 @@ public class TSpanMockBuilder {
         spanChunk.setSpanIdIsSet(true);
 
         for (int i = 0; i < spanEventCount; i++) {
-            spanChunk.addToSpanEventList(buildEvent(spanEventSize));
+            buildEvent(spanEventSize).addToSpanEventList(spanChunk);
             spanChunk.setSpanEventListIsSet(true);
         }
 
diff --git a/web/src/main/java/com/navercorp/pinpoint/web/alarm/AlarmWriter.java b/web/src/main/java/com/navercorp/pinpoint/web/alarm/AlarmWriter.java
index ad35419..d3bfbbb 100644
--- a/web/src/main/java/com/navercorp/pinpoint/web/alarm/AlarmWriter.java
+++ b/web/src/main/java/com/navercorp/pinpoint/web/alarm/AlarmWriter.java
@@ -57,7 +57,7 @@ public class AlarmWriter implements ItemWriter<AlarmChecker> {
     }
 
     private void sendAlarmMessage(CheckerResult beforeCheckerResult, AlarmChecker checker) {
-        if (isTurnToSendAlarm(beforeCheckerResult)) {
+        if (beforeCheckerResult.isTurnToSendAlarm(this)) {
             if (checker.isSMSSend()) {
                 alarmMessageSender.sendSms(checker, beforeCheckerResult.getSequenceCount() + 1);
             }
@@ -68,17 +68,4 @@ public class AlarmWriter implements ItemWriter<AlarmChecker> {
 
     }
 
-    private boolean isTurnToSendAlarm(CheckerResult beforeCheckerResult) {
-        if (!beforeCheckerResult.isDetected()) {
-            return true;
-        }
-
-        int sequenceCount = beforeCheckerResult.getSequenceCount() + 1;
-
-        if (sequenceCount == beforeCheckerResult.getTimingCount()) {
-            return true;
-        }
-
-        return false;
-    }
 }
diff --git a/web/src/main/java/com/navercorp/pinpoint/web/alarm/vo/CheckerResult.java b/web/src/main/java/com/navercorp/pinpoint/web/alarm/vo/CheckerResult.java
index 38488c8..974bc74 100644
--- a/web/src/main/java/com/navercorp/pinpoint/web/alarm/vo/CheckerResult.java
+++ b/web/src/main/java/com/navercorp/pinpoint/web/alarm/vo/CheckerResult.java
@@ -1,5 +1,7 @@
 package com.navercorp.pinpoint.web.alarm.vo;
 
+import com.navercorp.pinpoint.web.alarm.AlarmWriter;
+
 public class CheckerResult {
     
     private int historyId;
@@ -75,4 +77,18 @@ public class CheckerResult {
             timingCount = sequenceCount * 2 + 1;
         }
     }
+
+    public boolean isTurnToSendAlarm(AlarmWriter alarmWriter) {
+        if (!isDetected()) {
+            return true;
+        }
+
+        int sequenceCount = getSequenceCount() + 1;
+
+        if (sequenceCount == getTimingCount()) {
+            return true;
+        }
+
+        return false;
+    }
 }
diff --git a/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/histogram/TimeHistogram.java b/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/histogram/TimeHistogram.java
index cb4d868..6effd5c 100644
--- a/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/histogram/TimeHistogram.java
+++ b/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/histogram/TimeHistogram.java
@@ -18,6 +18,8 @@ package com.navercorp.pinpoint.web.applicationmap.histogram;
 
 import com.navercorp.pinpoint.common.trace.HistogramSchema;
 import com.navercorp.pinpoint.common.trace.ServiceType;
+import com.navercorp.pinpoint.web.applicationmap.rawdata.AgentHistogramList;
+import com.navercorp.pinpoint.web.vo.Application;
 
 import java.util.Comparator;
 
@@ -44,6 +46,11 @@ public class TimeHistogram extends Histogram {
         return timeStamp;
     }
 
+    public void addAgentHistogram(String agentName, ServiceType serviceType, AgentHistogramList agentHistogramList) {
+        Application agentId = new Application(agentName, serviceType);
+        agentHistogramList.addTimeHistogram(agentId, this);
+    }
+
 
     private static class TimeStampAscComparator implements Comparator<TimeHistogram> {
         @Override
diff --git a/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/link/Link.java b/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/link/Link.java
index 651a9ba..7f1a16f 100644
--- a/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/link/Link.java
+++ b/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/link/Link.java
@@ -261,7 +261,7 @@ public class Link {
     }
 
     public Boolean getLinkAlert() {
-        return linkStateResolver.isAlert(this);
+        return isAlert(linkStateResolver);
     }
 
     public boolean isWasToWasLink() {
@@ -295,4 +295,12 @@ public class Link {
                 " -> to=" + toNode +
                 '}';
     }
+
+    public boolean isAlert(LinkStateResolver linkStateResolver) {
+        String resolve = linkStateResolver.resolve(this);
+        if (LinkStateResolver.BAD.equals(resolve)) {
+            return true;
+        }
+        return false;
+    }
 }
diff --git a/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/link/LinkStateResolver.java b/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/link/LinkStateResolver.java
index 96d1393..f6e4bac 100644
--- a/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/link/LinkStateResolver.java
+++ b/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/link/LinkStateResolver.java
@@ -39,14 +39,6 @@ public class LinkStateResolver {
 
     }
 
-    public boolean isAlert(Link link) {
-        String resolve = resolve(link);
-        if (BAD.equals(resolve)) {
-            return true;
-        }
-        return false;
-    }
-
     private long getErrorRate(Histogram histogram) {
         if (histogram == null) {
             throw new NullPointerException("histogram must not be null");
diff --git a/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/nodes/Node.java b/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/nodes/Node.java
index ebffaa8..27f2f23 100644
--- a/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/nodes/Node.java
+++ b/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/nodes/Node.java
@@ -16,8 +16,10 @@
 
 package com.navercorp.pinpoint.web.applicationmap.nodes;
 
+import com.fasterxml.jackson.core.JsonGenerator;
 import com.navercorp.pinpoint.common.trace.ServiceType;
 import com.navercorp.pinpoint.web.applicationmap.histogram.NodeHistogram;
+import com.navercorp.pinpoint.web.view.LinkSerializer;
 import com.navercorp.pinpoint.web.view.NodeSerializer;
 import com.navercorp.pinpoint.web.vo.Application;
 import com.fasterxml.jackson.databind.annotation.JsonSerialize;
@@ -25,6 +27,8 @@ import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import java.io.IOException;
+
 /**
  * class for application in node map
  *
@@ -134,4 +138,18 @@ public class Node {
     public String toString() {
         return "Node [" + application + "]";
     }
+
+    public void writeAgentId(String fieldName, JsonGenerator jgen, LinkSerializer linkSerializer) throws IOException {
+        if (getServiceType().isWas()) {
+            jgen.writeFieldName(fieldName);
+            jgen.writeStartArray();
+            ServerInstanceList serverInstanceList = getServerInstanceList();
+            if (serverInstanceList!= null) {
+                for (String agentId : serverInstanceList.getAgentIdList()) {
+                    jgen.writeObject(agentId);
+                }
+            }
+            jgen.writeEndArray();
+        }
+    }
 }
diff --git a/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/nodes/ServerInstance.java b/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/nodes/ServerInstance.java
index 43206e4..762e5e7 100644
--- a/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/nodes/ServerInstance.java
+++ b/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/nodes/ServerInstance.java
@@ -23,6 +23,8 @@ import com.navercorp.pinpoint.web.view.ServerInstanceSerializer;
 import com.navercorp.pinpoint.web.vo.AgentInfo;
 import com.navercorp.pinpoint.web.vo.AgentStatus;
 
+import java.util.List;
+
 /**
  *
  * @author netspider
@@ -122,4 +124,13 @@ public class ServerInstance {
         return result;
     }
 
+    public void addServerInstance(List<ServerInstance> nodeList, ServerInstanceList serverInstanceList) {
+        for (ServerInstance node : nodeList) {
+            boolean equalsNode = node.equals(this);
+            if (equalsNode) {
+                return;
+            }
+        }
+        nodeList.add(this);
+    }
 }
diff --git a/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/nodes/ServerInstanceList.java b/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/nodes/ServerInstanceList.java
index 0d6b410..36e4ba2 100644
--- a/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/nodes/ServerInstanceList.java
+++ b/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/nodes/ServerInstanceList.java
@@ -60,16 +60,6 @@ public class ServerInstanceList {
         return count;
     }
 
-    private void addServerInstance(List<ServerInstance> nodeList, ServerInstance serverInstance) {
-        for (ServerInstance node : nodeList) {
-            boolean equalsNode = node.equals(serverInstance);
-            if (equalsNode) {
-                return;
-            }
-        }
-        nodeList.add(serverInstance);
-    }
-
     private List<ServerInstance> getServerInstanceList(String hostName) {
         List<ServerInstance> find = serverInstanceList.computeIfAbsent(hostName, k -> new ArrayList<>());
         return find;
@@ -77,6 +67,6 @@ public class ServerInstanceList {
 
     void addServerInstance(ServerInstance serverInstance) {
         List<ServerInstance> find = getServerInstanceList(serverInstance.getHostName());
-        addServerInstance(find, serverInstance);
+        serverInstance.addServerInstance(find, this);
     }
 }
diff --git a/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/rawdata/AgentHistogramList.java b/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/rawdata/AgentHistogramList.java
index ff46ae6..ba9f3d5 100644
--- a/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/rawdata/AgentHistogramList.java
+++ b/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/rawdata/AgentHistogramList.java
@@ -48,7 +48,7 @@ public class AgentHistogramList {
         for (ResponseTime responseTime : responseHistogramList) {
             for (Map.Entry<String, TimeHistogram> agentEntry : responseTime.getAgentHistogram()) {
                 TimeHistogram timeHistogram = agentEntry.getValue();
-                this.addAgentHistogram(agentEntry.getKey(), application.getServiceType(), timeHistogram);
+                timeHistogram.addAgentHistogram(agentEntry.getKey(), application.getServiceType(), this);
             }
         }
     }
@@ -81,12 +81,6 @@ public class AgentHistogramList {
         addTimeHistogram(agentId, histogramList);
     }
 
-    public void addAgentHistogram(String agentName, ServiceType serviceType, TimeHistogram timeHistogram) {
-        Application agentId = new Application(agentName, serviceType);
-        addTimeHistogram(agentId, timeHistogram);
-    }
-
-
 
     private AgentHistogram getAgentHistogram(Application agentId) {
         if (agentId == null) {
diff --git a/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/rawdata/LinkData.java b/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/rawdata/LinkData.java
index 61c84a3..f9b217d 100644
--- a/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/rawdata/LinkData.java
+++ b/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/rawdata/LinkData.java
@@ -148,4 +148,11 @@ public class LinkData {
         result = 31 * result + toApplication.hashCode();
         return result;
     }
+
+    public void addSourceLinkData(LinkDataDuplexMap linkDataDuplexMap) {
+        if (this == null) {
+            throw new NullPointerException("copyLinkData must not be null");
+        }
+        linkDataDuplexMap.getSourceLinkDataMap().addLinkData(this);
+    }
 }
diff --git a/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/rawdata/LinkDataDuplexMap.java b/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/rawdata/LinkDataDuplexMap.java
index 501179f..6ed39df 100644
--- a/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/rawdata/LinkDataDuplexMap.java
+++ b/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/rawdata/LinkDataDuplexMap.java
@@ -57,20 +57,13 @@ public class LinkDataDuplexMap {
             throw new NullPointerException("linkDataDuplexMap must not be null");
         }
         for (LinkData copyLinkData : linkDataDuplexMap.sourceLinkDataMap.getLinkDataList()) {
-            addSourceLinkData(copyLinkData);
+            copyLinkData.addSourceLinkData(this);
         }
         for (LinkData copyLinkData : linkDataDuplexMap.targetLinkDataMap.getLinkDataList()) {
             addTargetLinkData(copyLinkData);
         }
     }
 
-    public void addSourceLinkData(LinkData copyLinkData) {
-        if (copyLinkData == null) {
-            throw new NullPointerException("copyLinkData must not be null");
-        }
-        sourceLinkDataMap.addLinkData(copyLinkData);
-    }
-
 
     public void addTargetLinkData(LinkData copyLinkData) {
         if (copyLinkData == null) {
diff --git a/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/rawdata/LinkDataMap.java b/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/rawdata/LinkDataMap.java
index 1527fa0..3c75e46 100644
--- a/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/rawdata/LinkDataMap.java
+++ b/web/src/main/java/com/navercorp/pinpoint/web/applicationmap/rawdata/LinkDataMap.java
@@ -18,6 +18,7 @@ package com.navercorp.pinpoint.web.applicationmap.rawdata;
 
 import java.util.*;
 
+import com.navercorp.pinpoint.web.service.map.VirtualLinkHandler;
 import com.navercorp.pinpoint.web.util.TimeWindow;
 import com.navercorp.pinpoint.web.vo.Application;
 import com.navercorp.pinpoint.web.vo.LinkKey;
@@ -101,4 +102,15 @@ public class LinkDataMap {
     public void setTimeWindow(TimeWindow timeWindow) {
         this.timeWindow = timeWindow;
     }
+
+    public List<Application> getUnpopulatedEmulatedNodes(Set<LinkData> virtualLinkDataSet, VirtualLinkHandler virtualLinkHandler) {
+        Set<Application> unpopulatedEmulatedNodes = new HashSet<>();
+        for (LinkData virtualLinkData : virtualLinkDataSet) {
+            Application toApplication = virtualLinkData.getToApplication();
+            if (getLinkData(new LinkKey(virtualLinkData.getFromApplication(), toApplication)) == null) {
+                unpopulatedEmulatedNodes.add(toApplication);
+            }
+        }
+        return new ArrayList<>(unpopulatedEmulatedNodes);
+    }
 }
\ No newline at end of file
diff --git a/web/src/main/java/com/navercorp/pinpoint/web/calltree/span/CallTreeNode.java b/web/src/main/java/com/navercorp/pinpoint/web/calltree/span/CallTreeNode.java
index 2cb5f73..e9e2ff3 100644
--- a/web/src/main/java/com/navercorp/pinpoint/web/calltree/span/CallTreeNode.java
+++ b/web/src/main/java/com/navercorp/pinpoint/web/calltree/span/CallTreeNode.java
@@ -16,6 +16,8 @@
 
 package com.navercorp.pinpoint.web.calltree.span;
 
+import com.navercorp.pinpoint.web.vo.callstacks.RecordFactory;
+
 /**
  * @author jaehong.kim
  */
@@ -113,4 +115,17 @@ public class CallTreeNode {
         builder.append("}");
         return builder.toString();
     }
+
+    public int getParentId(RecordFactory recordFactory) {
+        final CallTreeNode parent = getParent();
+        if (parent == null) {
+            if (!getAlign().isSpan()) {
+                throw new IllegalStateException("parent is null. node=" + this);
+            }
+
+            return 0;
+        }
+
+        return parent.getAlign().getId();
+    }
 }
\ No newline at end of file
diff --git a/web/src/main/java/com/navercorp/pinpoint/web/controller/AgentCommandController.java b/web/src/main/java/com/navercorp/pinpoint/web/controller/AgentCommandController.java
index a5d349f..babb006 100644
--- a/web/src/main/java/com/navercorp/pinpoint/web/controller/AgentCommandController.java
+++ b/web/src/main/java/com/navercorp/pinpoint/web/controller/AgentCommandController.java
@@ -41,7 +41,6 @@ import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.ResponseBody;
 
 import java.util.Arrays;
-import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
@@ -100,7 +99,7 @@ public class AgentCommandController {
                     AgentActiveThreadDumpFactory factory = new AgentActiveThreadDumpFactory();
                     AgentActiveThreadDumpList activeThreadDumpList = factory.create1(activeThreadDumps);
 
-                    Map<String, Object> responseData = createResponseData(activeThreadDumpList, activeThreadDumpResponse.getType(), activeThreadDumpResponse.getSubType(), activeThreadDumpResponse.getVersion());
+                    Map<String, Object> responseData = activeThreadDumpList.createResponseData(activeThreadDumpResponse.getType(), activeThreadDumpResponse.getSubType(), activeThreadDumpResponse.getVersion(), this);
                     return new CodeResult(CODE_SUCCESS, responseData);
                 }
             }
@@ -123,16 +122,6 @@ public class AgentCommandController {
         return true;
     }
 
-    private Map<String, Object> createResponseData(AgentActiveThreadDumpList activeThreadDumpList, String type, String subType, String version) {
-        Map<String, Object> response = new HashMap<>(4);
-        response.put("threadDumpData", activeThreadDumpList);
-        response.put("type", type);
-        response.put("subType", subType);
-        response.put("version", version);
-
-        return response;
-    }
-
     @RequestMapping(value = "/activeThreadLightDump", method = RequestMethod.GET)
     @ResponseBody
     public CodeResult getActiveThreadLightDump(@RequestParam(value = "applicationName") String applicationName,
@@ -171,7 +160,7 @@ public class AgentCommandController {
                     AgentActiveThreadDumpFactory factory = new AgentActiveThreadDumpFactory();
                     AgentActiveThreadDumpList activeThreadDumpList = factory.create2(activeThreadDumps);
 
-                    Map<String, Object> responseData = createResponseData(activeThreadDumpList, activeThreadDumpResponse.getType(), activeThreadDumpResponse.getSubType(), activeThreadDumpResponse.getVersion());
+                    Map<String, Object> responseData = activeThreadDumpList.createResponseData(activeThreadDumpResponse.getType(), activeThreadDumpResponse.getSubType(), activeThreadDumpResponse.getVersion(), this);
                     return new CodeResult(CODE_SUCCESS, responseData);
                 }
             }
diff --git a/web/src/main/java/com/navercorp/pinpoint/web/controller/ScatterChartController.java b/web/src/main/java/com/navercorp/pinpoint/web/controller/ScatterChartController.java
index 0993260..786ac7f 100644
--- a/web/src/main/java/com/navercorp/pinpoint/web/controller/ScatterChartController.java
+++ b/web/src/main/java/com/navercorp/pinpoint/web/controller/ScatterChartController.java
@@ -189,7 +189,7 @@ public class ScatterChartController {
             final ScatterData scatterData = scatter.selectScatterData(applicationName, range, xGroupUnit, yGroupUnit, limit, backwardDirection);
             boolean requestComplete = scatterData.getDotSize() < limit;
 
-            mv = createScatterDataV1(scatterData, requestComplete);
+            mv = scatterData.createScatterDataV1(requestComplete, this);
         } else {
             mv = new ModelAndView();
         }
@@ -219,7 +219,7 @@ public class ScatterChartController {
                         limit, backwardDirection, DateUtils.longToDateStr(range.getFrom()), DateUtils.longToDateStr(range.getTo()), DateUtils.longToDateStr(limitedScanResult.getLimitedTime()), transactionIdList.size());
             }
 
-            mv = createScatterDataV1(scatterData, requestComplete);
+            mv = scatterData.createScatterDataV1(requestComplete, this);
         } else {
             mv = new ModelAndView();
         }
@@ -230,16 +230,4 @@ public class ScatterChartController {
         return mv;
     }
 
-    private ModelAndView createScatterDataV1(ScatterData scatterData, boolean complete) {
-        ModelAndView mv = new ModelAndView();
-
-        mv.addObject("resultFrom", scatterData.getOldestAcceptedTime());
-        mv.addObject("resultTo", scatterData.getLatestAcceptedTime());
-
-        mv.addObject("complete", complete);
-        mv.addObject("scatter", scatterData);
-
-        return mv;
-    }
-
 }
diff --git a/web/src/main/java/com/navercorp/pinpoint/web/dao/hbase/HbaseApplicationTraceIndexDao.java b/web/src/main/java/com/navercorp/pinpoint/web/dao/hbase/HbaseApplicationTraceIndexDao.java
index 2bdc90f..f7ff4da 100644
--- a/web/src/main/java/com/navercorp/pinpoint/web/dao/hbase/HbaseApplicationTraceIndexDao.java
+++ b/web/src/main/java/com/navercorp/pinpoint/web/dao/hbase/HbaseApplicationTraceIndexDao.java
@@ -17,8 +17,6 @@
 package com.navercorp.pinpoint.web.dao.hbase;
 
 import com.navercorp.pinpoint.common.PinpointConstants;
-import com.navercorp.pinpoint.common.buffer.AutomaticBuffer;
-import com.navercorp.pinpoint.common.buffer.Buffer;
 import com.navercorp.pinpoint.common.hbase.HBaseTables;
 import com.navercorp.pinpoint.common.hbase.HbaseOperations2;
 import com.navercorp.pinpoint.common.hbase.LimitEventHandler;
@@ -46,12 +44,6 @@ import org.apache.hadoop.hbase.CellUtil;
 import org.apache.hadoop.hbase.TableName;
 import org.apache.hadoop.hbase.client.Result;
 import org.apache.hadoop.hbase.client.Scan;
-import org.apache.hadoop.hbase.filter.BinaryPrefixComparator;
-import org.apache.hadoop.hbase.filter.CompareFilter.CompareOp;
-import org.apache.hadoop.hbase.filter.Filter;
-import org.apache.hadoop.hbase.filter.FilterList;
-import org.apache.hadoop.hbase.filter.FilterList.Operator;
-import org.apache.hadoop.hbase.filter.QualifierFilter;
 import org.apache.hadoop.hbase.util.Bytes;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -320,35 +312,4 @@ public class HbaseApplicationTraceIndexDao implements ApplicationTraceIndexDao {
         }
     }
 
-    /**
-     * make the hbase filter for selecting values of y-axis(response time) in order to select transactions in scatter chart.
-     * 4 bytes for elapsed time should be attached for the prefix of column qualifier for to use this filter.
-     *
-     * @param area
-     * @param offsetTransactionId
-     * @param offsetTransactionElapsed
-     * @return
-     */
-    private Filter makeResponseTimeFilter(final SelectedScatterArea area, final TransactionId offsetTransactionId, int offsetTransactionElapsed) {
-        // filter by response time
-        ResponseTimeRange responseTimeRange = area.getResponseTimeRange();
-        byte[] responseFrom = Bytes.toBytes(responseTimeRange.getFrom());
-        byte[] responseTo = Bytes.toBytes(responseTimeRange.getTo());
-        FilterList filterList = new FilterList(Operator.MUST_PASS_ALL);
-        filterList.addFilter(new QualifierFilter(CompareOp.GREATER_OR_EQUAL, new BinaryPrefixComparator(responseFrom)));
-        filterList.addFilter(new QualifierFilter(CompareOp.LESS_OR_EQUAL, new BinaryPrefixComparator(responseTo)));
-
-        // add offset
-        if (offsetTransactionId != null) {
-            final Buffer buffer = new AutomaticBuffer(32);
-            buffer.putInt(offsetTransactionElapsed);
-            buffer.putPrefixedString(offsetTransactionId.getAgentId());
-            buffer.putSVLong(offsetTransactionId.getAgentStartTime());
-            buffer.putVLong(offsetTransactionId.getTransactionSequence());
-            byte[] qualifierOffset = buffer.getBuffer();
-
-            filterList.addFilter(new QualifierFilter(CompareOp.GREATER, new BinaryPrefixComparator(qualifierOffset)));
-        }
-        return filterList;
-    }
 }
diff --git a/web/src/main/java/com/navercorp/pinpoint/web/dao/hbase/HbaseHostApplicationMapDao.java b/web/src/main/java/com/navercorp/pinpoint/web/dao/hbase/HbaseHostApplicationMapDao.java
index 4e633ed..c04f224 100644
--- a/web/src/main/java/com/navercorp/pinpoint/web/dao/hbase/HbaseHostApplicationMapDao.java
+++ b/web/src/main/java/com/navercorp/pinpoint/web/dao/hbase/HbaseHostApplicationMapDao.java
@@ -21,8 +21,6 @@ import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
 
-import com.navercorp.pinpoint.common.buffer.AutomaticBuffer;
-import com.navercorp.pinpoint.common.buffer.Buffer;
 import com.navercorp.pinpoint.common.hbase.HBaseTables;
 import com.navercorp.pinpoint.common.hbase.HbaseOperations2;
 import com.navercorp.pinpoint.common.hbase.RowMapper;
@@ -113,8 +111,8 @@ public class HbaseHostApplicationMapDao implements HostApplicationMapDao {
         final long startTime = TimeUtils.reverseTimeMillis(timeSlot.getTimeSlot(range.getFrom()));
         final long endTime = TimeUtils.reverseTimeMillis(timeSlot.getTimeSlot(range.getTo()) + 1);
         // start key is replaced by end key because timestamp has been reversed
-        final byte[] startKey = createKey(parentApplication, endTime);
-        final byte[] endKey = createKey(parentApplication, startTime);
+        final byte[] startKey = parentApplication.createKey(endTime, this);
+        final byte[] endKey = parentApplication.createKey(startTime, this);
 
         Scan scan = new Scan();
         scan.setCaching(this.scanCacheSize);
@@ -125,14 +123,5 @@ public class HbaseHostApplicationMapDao implements HostApplicationMapDao {
         return scan;
     }
 
-    private byte[] createKey(Application parentApplication, long time) {
-        Buffer buffer = new AutomaticBuffer();
-        buffer.putPadString(parentApplication.getName(), HBaseTables.APPLICATION_NAME_MAX_LEN);
-        buffer.putShort(parentApplication.getServiceTypeCode());
-        buffer.putLong(time);
-        return buffer.getBuffer();
-    }
-
-
 
 }
diff --git a/web/src/main/java/com/navercorp/pinpoint/web/filter/FilterDescriptor.java b/web/src/main/java/com/navercorp/pinpoint/web/filter/FilterDescriptor.java
index 09e5924..45e2446 100644
--- a/web/src/main/java/com/navercorp/pinpoint/web/filter/FilterDescriptor.java
+++ b/web/src/main/java/com/navercorp/pinpoint/web/filter/FilterDescriptor.java
@@ -198,4 +198,13 @@ public class FilterDescriptor {
         sb.append('}');
         return sb.toString();
     }
+
+    public URLPatternFilter createAcceptUrlFilter(LinkFilter linkFilter) {
+        final String urlPattern = getUrlPattern();
+        if (org.springframework.util.StringUtils.isEmpty(urlPattern)) {
+            return new BypassURLPatternFilter();
+        }
+        // TODO remove decode
+        return new AcceptUrlFilter(urlPattern);
+    }
 }
diff --git a/web/src/main/java/com/navercorp/pinpoint/web/filter/LinkFilter.java b/web/src/main/java/com/navercorp/pinpoint/web/filter/LinkFilter.java
index f9754f7..fcebc0c 100644
--- a/web/src/main/java/com/navercorp/pinpoint/web/filter/LinkFilter.java
+++ b/web/src/main/java/com/navercorp/pinpoint/web/filter/LinkFilter.java
@@ -116,20 +116,11 @@ public class LinkFilter implements Filter<SpanBo> {
         this.rpcHintList = this.filterHint.getRpcHintList(toApplicationName);
 
         // TODO fix : fromSpan base rpccall filter
-        this.acceptURLFilter = createAcceptUrlFilter(filterDescriptor);
+        this.acceptURLFilter = filterDescriptor.createAcceptUrlFilter(this);
         this.rpcUrlFilter = createRpcUrlFilter(filterDescriptor);
         logger.info("acceptURLFilter:{}", acceptURLFilter);
     }
 
-    private URLPatternFilter createAcceptUrlFilter(FilterDescriptor filterDescriptor) {
-        final String urlPattern = filterDescriptor.getUrlPattern();
-        if (StringUtils.isEmpty(urlPattern)) {
-            return new BypassURLPatternFilter();
-        }
-        // TODO remove decode
-        return new AcceptUrlFilter(urlPattern);
-    }
-
     private URLPatternFilter createRpcUrlFilter(FilterDescriptor filterDescriptor) {
         final String urlPattern = filterDescriptor.getUrlPattern();
         if (StringUtils.isEmpty(urlPattern)) {
diff --git a/web/src/main/java/com/navercorp/pinpoint/web/mapper/ResponseTimeMapper.java b/web/src/main/java/com/navercorp/pinpoint/web/mapper/ResponseTimeMapper.java
index af430d1..a43ed55 100644
--- a/web/src/main/java/com/navercorp/pinpoint/web/mapper/ResponseTimeMapper.java
+++ b/web/src/main/java/com/navercorp/pinpoint/web/mapper/ResponseTimeMapper.java
@@ -22,7 +22,6 @@ import com.navercorp.pinpoint.common.hbase.HBaseTables;
 import com.navercorp.pinpoint.common.hbase.RowMapper;
 import com.navercorp.pinpoint.loader.service.ServiceTypeRegistryService;
 import com.navercorp.pinpoint.common.trace.ServiceType;
-import com.navercorp.pinpoint.common.util.BytesUtils;
 import com.navercorp.pinpoint.common.util.TimeUtils;
 import com.navercorp.pinpoint.web.vo.ResponseTime;
 
@@ -30,7 +29,6 @@ import com.sematext.hbase.wd.RowKeyDistributorByHashPrefix;
 import org.apache.hadoop.hbase.Cell;
 import org.apache.hadoop.hbase.CellUtil;
 import org.apache.hadoop.hbase.client.Result;
-import org.apache.hadoop.hbase.util.Bytes;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -65,7 +63,7 @@ public class ResponseTimeMapper implements RowMapper<ResponseTime> {
         ResponseTime responseTime = createResponseTime(rowKey);
         for (Cell cell : result.rawCells()) {
             if (CellUtil.matchingFamily(cell, HBaseTables.MAP_STATISTICS_SELF_VER2_CF_COUNTER)) {
-                recordColumn(responseTime, cell);
+                responseTime.recordColumn(cell, this);
             }
 
             if (logger.isDebugEnabled()) {
@@ -75,18 +73,6 @@ public class ResponseTimeMapper implements RowMapper<ResponseTime> {
         return responseTime;
     }
 
-    void recordColumn(ResponseTime responseTime, Cell cell) {
-
-        final byte[] qArray = cell.getQualifierArray();
-        final int qOffset = cell.getQualifierOffset();
-        short slotNumber = Bytes.toShort(qArray, qOffset);
-
-        // agentId should be added as data.
-        String agentId = Bytes.toString(qArray, qOffset + BytesUtils.SHORT_BYTE_LENGTH, cell.getQualifierLength() - BytesUtils.SHORT_BYTE_LENGTH);
-        long count = Bytes.toLong(cell.getValueArray(), cell.getValueOffset());
-        responseTime.addResponseTime(agentId, slotNumber, count);
-    }
-
     private ResponseTime createResponseTime(byte[] rowKey) {
         final Buffer row = new FixedBuffer(rowKey);
         String applicationName = row.read2PrefixedString();
diff --git a/web/src/main/java/com/navercorp/pinpoint/web/scatter/ScatterData.java b/web/src/main/java/com/navercorp/pinpoint/web/scatter/ScatterData.java
index 0761fd0..29ed542 100644
--- a/web/src/main/java/com/navercorp/pinpoint/web/scatter/ScatterData.java
+++ b/web/src/main/java/com/navercorp/pinpoint/web/scatter/ScatterData.java
@@ -23,9 +23,11 @@ import java.util.Map;
 import java.util.TreeMap;
 
 import com.fasterxml.jackson.databind.annotation.JsonSerialize;
+import com.navercorp.pinpoint.web.controller.ScatterChartController;
 import com.navercorp.pinpoint.web.view.ScatterDataSerializer;
 import com.navercorp.pinpoint.web.vo.scatter.Dot;
 import com.navercorp.pinpoint.web.vo.scatter.DotAgentInfo;
+import org.springframework.web.servlet.ModelAndView;
 
 /**
  * @author Taejin Koo
@@ -178,6 +180,18 @@ public class ScatterData {
         return latestAcceptedTime;
     }
 
+    public ModelAndView createScatterDataV1(boolean complete, ScatterChartController scatterChartController) {
+        ModelAndView mv = new ModelAndView();
+
+        mv.addObject("resultFrom", getOldestAcceptedTime());
+        mv.addObject("resultTo", getLatestAcceptedTime());
+
+        mv.addObject("complete", complete);
+        mv.addObject("scatter", this);
+
+        return mv;
+    }
+
     private static class XCoordinatesComparator implements Comparator<Long> {
 
         @Override
diff --git a/web/src/main/java/com/navercorp/pinpoint/web/service/AgentServiceImpl.java b/web/src/main/java/com/navercorp/pinpoint/web/service/AgentServiceImpl.java
index d1120be..0107674 100644
--- a/web/src/main/java/com/navercorp/pinpoint/web/service/AgentServiceImpl.java
+++ b/web/src/main/java/com/navercorp/pinpoint/web/service/AgentServiceImpl.java
@@ -188,7 +188,7 @@ public class AgentServiceImpl implements AgentService {
 
     @Override
     public PinpointRouteResponse invoke(AgentInfo agentInfo, byte[] payload, long timeout) throws TException {
-        TCommandTransfer transferObject = createCommandTransferObject(agentInfo, payload);
+        TCommandTransfer transferObject = agentInfo.createCommandTransferObject(payload, this);
         PinpointSocket socket = clusterManager.getSocket(agentInfo);
 
         Future<ResponseMessage> future = null;
@@ -225,7 +225,7 @@ public class AgentServiceImpl implements AgentService {
             throws TException {
         Map<AgentInfo, Future<ResponseMessage>> futureMap = new HashMap<>();
         for (AgentInfo agentInfo : agentInfoList) {
-            TCommandTransfer transferObject = createCommandTransferObject(agentInfo, payload);
+            TCommandTransfer transferObject = agentInfo.createCommandTransferObject(payload, this);
             PinpointSocket socket = clusterManager.getSocket(agentInfo);
             if (socket != null) {
                 Future<ResponseMessage> future = socket.request(serializeRequest(transferObject));
@@ -256,7 +256,7 @@ public class AgentServiceImpl implements AgentService {
 
     @Override
     public ClientStreamChannel openStream(AgentInfo agentInfo, byte[] payload, ClientStreamChannelEventHandler streamChannelEventHandler) throws TException, StreamException {
-        TCommandTransfer transferObject = createCommandTransferObject(agentInfo, payload);
+        TCommandTransfer transferObject = agentInfo.createCommandTransferObject(payload, this);
         PinpointSocket socket = clusterManager.getSocket(agentInfo);
         if (socket == null) {
             throw new StreamException(StreamCode.CONNECTION_NOT_FOUND);
@@ -301,16 +301,6 @@ public class AgentServiceImpl implements AgentService {
         }
     }
 
-    private TCommandTransfer createCommandTransferObject(AgentInfo agentInfo, byte[] payload) {
-        TCommandTransfer transferObject = new TCommandTransfer();
-        transferObject.setApplicationName(agentInfo.getApplicationName());
-        transferObject.setAgentId(agentInfo.getAgentId());
-        transferObject.setStartTime(agentInfo.getStartTimestamp());
-        transferObject.setPayload(payload);
-
-        return transferObject;
-    }
-
     private PinpointRouteResponse getResponse(Future<ResponseMessage> future, long timeout) {
         if (future == null) {
             return new FailedPinpointRouteResponse(TRouteResult.NOT_FOUND, null);
diff --git a/web/src/main/java/com/navercorp/pinpoint/web/service/ResponseTimeHistogramServiceImpl.java b/web/src/main/java/com/navercorp/pinpoint/web/service/ResponseTimeHistogramServiceImpl.java
index 44ece2f..380f3cb 100644
--- a/web/src/main/java/com/navercorp/pinpoint/web/service/ResponseTimeHistogramServiceImpl.java
+++ b/web/src/main/java/com/navercorp/pinpoint/web/service/ResponseTimeHistogramServiceImpl.java
@@ -229,15 +229,9 @@ public class ResponseTimeHistogramServiceImpl implements ResponseTimeHistogramSe
         LinkKey linkKey = new LinkKey(fromApplication, toApplication);
         Link link = linkList.getLink(linkKey);
         if (link == null) {
-            return createEmptyLinkHistogramSummary(createType, fromApplication, toApplication, range);
+            return range.createEmptyLinkHistogramSummary(createType, fromApplication, toApplication, this);
         }
         return new LinkHistogramSummary(link);
     }
 
-    private LinkHistogramSummary createEmptyLinkHistogramSummary(CreateType createType, Application fromApplication, Application toApplication, Range range) {
-        Node fromNode = new Node(fromApplication);
-        Node toNode = new Node(toApplication);
-        Link emptyLink = new Link(createType, fromNode, toNode, range);
-        return new LinkHistogramSummary(emptyLink);
-    }
 }
diff --git a/web/src/main/java/com/navercorp/pinpoint/web/service/map/DefaultApplicationMapCreator.java b/web/src/main/java/com/navercorp/pinpoint/web/service/map/DefaultApplicationMapCreator.java
index 7b7e753..f7a1d9e 100644
--- a/web/src/main/java/com/navercorp/pinpoint/web/service/map/DefaultApplicationMapCreator.java
+++ b/web/src/main/java/com/navercorp/pinpoint/web/service/map/DefaultApplicationMapCreator.java
@@ -68,7 +68,7 @@ public class DefaultApplicationMapCreator implements ApplicationMapCreator {
 
             final LinkDataMap processedCallerLinkDataMap = callerLinkDataMapProcessor.processLinkDataMap(callerLinkDataMap, range);
             for (LinkData callerLinkData : processedCallerLinkDataMap.getLinkDataList()) {
-                searchResult.addSourceLinkData(callerLinkData);
+                callerLinkData.addSourceLinkData(searchResult);
                 final Application toApplication = callerLinkData.getToApplication();
                 // skip if nextApplication is a terminal or an unknown cloud
                 if (toApplication.getServiceType().isTerminal() || toApplication.getServiceType().isUnknown()) {
diff --git a/web/src/main/java/com/navercorp/pinpoint/web/service/map/VirtualLinkHandler.java b/web/src/main/java/com/navercorp/pinpoint/web/service/map/VirtualLinkHandler.java
index 44795b4..6d1fc55 100644
--- a/web/src/main/java/com/navercorp/pinpoint/web/service/map/VirtualLinkHandler.java
+++ b/web/src/main/java/com/navercorp/pinpoint/web/service/map/VirtualLinkHandler.java
@@ -31,7 +31,6 @@ import org.slf4j.LoggerFactory;
 
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
 
@@ -63,7 +62,7 @@ public class VirtualLinkHandler {
             return linkDataDuplexMap;
         }
         logger.debug("Virtual link size : {}", virtualLinkDataSet.size());
-        List<Application> unpopulatedEmulatedNodes = getUnpopulatedEmulatedNodes(linkDataDuplexMap.getTargetLinkDataMap(), virtualLinkDataSet);
+        List<Application> unpopulatedEmulatedNodes = linkDataDuplexMap.getTargetLinkDataMap().getUnpopulatedEmulatedNodes(virtualLinkDataSet, this);
         if (unpopulatedEmulatedNodes.isEmpty()) {
             logger.debug("unpopulated emulated node not found.");
         } else {
@@ -79,17 +78,6 @@ public class VirtualLinkHandler {
         return linkDataDuplexMap;
     }
 
-    private List<Application> getUnpopulatedEmulatedNodes(LinkDataMap targetLinkDataMap, Set<LinkData> virtualLinkDataSet) {
-        Set<Application> unpopulatedEmulatedNodes = new HashSet<>();
-        for (LinkData virtualLinkData : virtualLinkDataSet) {
-            Application toApplication = virtualLinkData.getToApplication();
-            if (targetLinkDataMap.getLinkData(new LinkKey(virtualLinkData.getFromApplication(), toApplication)) == null) {
-                unpopulatedEmulatedNodes.add(toApplication);
-            }
-        }
-        return new ArrayList<>(unpopulatedEmulatedNodes);
-    }
-
     private Collection<LinkData> getEmulatedNodeCalleeLinkData(LinkVisitChecker linkVisitChecker, Application emulatedNode, Range range) {
         LinkDataMap calleeLinkDataMap = linkDataMapService.selectCalleeLinkDataMap(emulatedNode, range);
         logger.debug("emulated node [{}] callee LinkDataMap:{}", emulatedNode, calleeLinkDataMap);
diff --git a/web/src/main/java/com/navercorp/pinpoint/web/util/TimeWindow.java b/web/src/main/java/com/navercorp/pinpoint/web/util/TimeWindow.java
index cdb587f..f0de262 100644
--- a/web/src/main/java/com/navercorp/pinpoint/web/util/TimeWindow.java
+++ b/web/src/main/java/com/navercorp/pinpoint/web/util/TimeWindow.java
@@ -16,9 +16,14 @@
 
 package com.navercorp.pinpoint.web.util;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.navercorp.pinpoint.web.view.StatChartGroupSerializer;
 import com.navercorp.pinpoint.web.vo.Range;
 
+import java.io.IOException;
+import java.util.ArrayList;
 import java.util.Iterator;
+import java.util.List;
 import java.util.NoSuchElementException;
 
 /**
@@ -88,6 +93,14 @@ public class TimeWindow implements Iterable<Long> {
         return (int)index;
     }
 
+    public void writeTimestamp(JsonGenerator jgen, StatChartGroupSerializer statChartGroupSerializer) throws IOException {
+        List<Long> timestamps = new ArrayList<>((int) getWindowRangeCount());
+        for (Long timestamp : this) {
+            timestamps.add(timestamp);
+        }
+        jgen.writeObjectField("x", timestamps);
+    }
+
     private class Itr implements Iterator<Long> {
 
         private long cursor;
diff --git a/web/src/main/java/com/navercorp/pinpoint/web/view/LinkSerializer.java b/web/src/main/java/com/navercorp/pinpoint/web/view/LinkSerializer.java
index de33fb3..e6c7e4f 100644
--- a/web/src/main/java/com/navercorp/pinpoint/web/view/LinkSerializer.java
+++ b/web/src/main/java/com/navercorp/pinpoint/web/view/LinkSerializer.java
@@ -19,7 +19,6 @@ package com.navercorp.pinpoint.web.view;
 import com.navercorp.pinpoint.web.applicationmap.link.Link;
 import com.navercorp.pinpoint.web.applicationmap.link.LinkType;
 import com.navercorp.pinpoint.web.applicationmap.nodes.Node;
-import com.navercorp.pinpoint.web.applicationmap.nodes.ServerInstanceList;
 import com.navercorp.pinpoint.web.applicationmap.histogram.Histogram;
 import com.navercorp.pinpoint.web.applicationmap.rawdata.AgentHistogram;
 import com.navercorp.pinpoint.web.applicationmap.rawdata.AgentHistogramList;
@@ -50,8 +49,8 @@ public class LinkSerializer extends JsonSerializer<Link> {
         jgen.writeStringField("to", link.getTo().getNodeName()); // necessary for go.js
 
         // for FilterWizard. from, to agent mapping data
-        writeAgentId("fromAgent", link.getFrom(), jgen);
-        writeAgentId("toAgent", link.getTo(), jgen);
+        link.getFrom().writeAgentId("fromAgent", jgen, this);
+        link.getTo().writeAgentId("toAgent", jgen, this);
 
         writeSimpleNode("sourceInfo", link.getFrom(), jgen);
         writeSimpleNode("targetInfo", link.getTo(), jgen);
@@ -87,20 +86,6 @@ public class LinkSerializer extends JsonSerializer<Link> {
         jgen.writeEndObject();
     }
 
-    private void writeAgentId(String fieldName, Node node, JsonGenerator jgen) throws IOException {
-        if (node.getServiceType().isWas()) {
-            jgen.writeFieldName(fieldName);
-            jgen.writeStartArray();
-            ServerInstanceList serverInstanceList = node.getServerInstanceList();
-            if (serverInstanceList!= null) {
-                for (String agentId : serverInstanceList.getAgentIdList()) {
-                    jgen.writeObject(agentId);
-                }
-            }
-            jgen.writeEndArray();
-        }
-    }
-
     private void writeWasToWasTargetRpcList(Link link, JsonGenerator jgen) throws IOException {
         // write additional information to be used for filtering failed WAS -> WAS call events.
         jgen.writeFieldName("filterTargetRpcList");
diff --git a/web/src/main/java/com/navercorp/pinpoint/web/view/ScatterAgentMetaDataSerializer.java b/web/src/main/java/com/navercorp/pinpoint/web/view/ScatterAgentMetaDataSerializer.java
index db9f079..08e7f17 100644
--- a/web/src/main/java/com/navercorp/pinpoint/web/view/ScatterAgentMetaDataSerializer.java
+++ b/web/src/main/java/com/navercorp/pinpoint/web/view/ScatterAgentMetaDataSerializer.java
@@ -37,21 +37,11 @@ public class ScatterAgentMetaDataSerializer extends JsonSerializer<ScatterAgentM
 
         Set<Map.Entry<Integer, DotAgentInfo>> entries = value.entrySet();
         for (Map.Entry<Integer, DotAgentInfo> entry : entries) {
-            writeMetadata(entry.getKey(), entry.getValue(), jgen);
+            entry.getValue().writeMetadata(entry.getKey(), jgen, this);
         }
 
         jgen.writeEndObject();
     }
 
 
-    private void writeMetadata(Integer key, DotAgentInfo agentInfo, JsonGenerator jgen) throws IOException {
-        jgen.writeArrayFieldStart(key.toString());
-
-        jgen.writeString(agentInfo.getAgentId());
-        jgen.writeString(agentInfo.getTransactionAgentId());
-        jgen.writeNumber(agentInfo.getTransactionAgentStartTime());
-
-        jgen.writeEndArray();
-    }
-
 }
\ No newline at end of file
diff --git a/web/src/main/java/com/navercorp/pinpoint/web/view/ScatterDataSerializer.java b/web/src/main/java/com/navercorp/pinpoint/web/view/ScatterDataSerializer.java
index 7c6b644..7e1b187 100644
--- a/web/src/main/java/com/navercorp/pinpoint/web/view/ScatterDataSerializer.java
+++ b/web/src/main/java/com/navercorp/pinpoint/web/view/ScatterDataSerializer.java
@@ -66,32 +66,11 @@ public class ScatterDataSerializer extends JsonSerializer<ScatterData> {
         Set<Dot> dotSet = dotGroups.getSortedDotSet();
         for (Dot dot : dotSet) {
             if (dotGroupLeaders.containsKey(dot)) {
-                writeDot(dot, dotGroupLeaders.get(dot).getDotSize(), metaData, jgen);
+                dot.writeDot(dotGroupLeaders.get(dot).getDotSize(), metaData, jgen, this);
             } else {
-                writeDot(dot, 0, metaData, jgen);
+                dot.writeDot(0, metaData, jgen, this);
             }
         }
     }
 
-    private void writeDot(Dot dot, int thick, ScatterAgentMetaData metaData, JsonGenerator jgen) throws IOException {
-        jgen.writeStartArray();
-
-        jgen.writeNumber(dot.getAcceptedTime());
-        jgen.writeNumber(dot.getElapsedTime());
-
-        int agentId = metaData.getId(dot);
-        jgen.writeNumber(agentId);
-
-        if (agentId == -1) {
-            jgen.writeString(dot.getTransactionIdAsString());
-        } else {
-            jgen.writeNumber(dot.getTransactionId().getTransactionSequence());
-        }
-
-        jgen.writeNumber(dot.getSimpleExceptionCode());
-        jgen.writeNumber(thick);
-
-        jgen.writeEndArray();
-    }
-
 }
diff --git a/web/src/main/java/com/navercorp/pinpoint/web/view/StatChartGroupSerializer.java b/web/src/main/java/com/navercorp/pinpoint/web/view/StatChartGroupSerializer.java
index 54f783f..f26d661 100644
--- a/web/src/main/java/com/navercorp/pinpoint/web/view/StatChartGroupSerializer.java
+++ b/web/src/main/java/com/navercorp/pinpoint/web/view/StatChartGroupSerializer.java
@@ -26,7 +26,6 @@ import com.navercorp.pinpoint.web.vo.chart.Point;
 import com.navercorp.pinpoint.web.vo.stat.chart.StatChartGroup;
 
 import java.io.IOException;
-import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -43,7 +42,7 @@ public class StatChartGroupSerializer extends JsonSerializer<StatChartGroup> {
         writeSchema(jgen, charts.keySet());
 
         TimeWindow timeWindow = statChartGroup.getTimeWindow();
-        writeTimestamp(jgen, timeWindow);
+        timeWindow.writeTimestamp(jgen, this);
 
         writeCharts(jgen, charts);
         jgen.writeEndObject();
@@ -60,14 +59,6 @@ public class StatChartGroupSerializer extends JsonSerializer<StatChartGroup> {
         jgen.writeEndObject();
     }
 
-    private void writeTimestamp(JsonGenerator jgen, TimeWindow timeWindow) throws IOException {
-        List<Long> timestamps = new ArrayList<>((int) timeWindow.getWindowRangeCount());
-        for (Long timestamp : timeWindow) {
-            timestamps.add(timestamp);
-        }
-        jgen.writeObjectField("x", timestamps);
-    }
-
     private void writeCharts(JsonGenerator jgen, Map<StatChartGroup.ChartType, Chart<? extends Point>> charts) throws IOException {
         jgen.writeFieldName("y");
         jgen.writeStartObject();
diff --git a/web/src/main/java/com/navercorp/pinpoint/web/vo/AgentActiveThreadDumpList.java b/web/src/main/java/com/navercorp/pinpoint/web/vo/AgentActiveThreadDumpList.java
index b301844..b6657c3 100644
--- a/web/src/main/java/com/navercorp/pinpoint/web/vo/AgentActiveThreadDumpList.java
+++ b/web/src/main/java/com/navercorp/pinpoint/web/vo/AgentActiveThreadDumpList.java
@@ -17,12 +17,10 @@
 package com.navercorp.pinpoint.web.vo;
 
 import com.fasterxml.jackson.databind.annotation.JsonSerialize;
+import com.navercorp.pinpoint.web.controller.AgentCommandController;
 import com.navercorp.pinpoint.web.view.AgentActiveThreadDumpListSerializer;
 
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.List;
+import java.util.*;
 
 /**
  * @author Taejin Koo
@@ -73,4 +71,13 @@ public class AgentActiveThreadDumpList {
         return Collections.unmodifiableList(copied);
     }
 
+    public Map<String, Object> createResponseData(String type, String subType, String version, AgentCommandController agentCommandController) {
+        Map<String, Object> response = new HashMap<>(4);
+        response.put("threadDumpData", this);
+        response.put("type", type);
+        response.put("subType", subType);
+        response.put("version", version);
+
+        return response;
+    }
 }
diff --git a/web/src/main/java/com/navercorp/pinpoint/web/vo/AgentInfo.java b/web/src/main/java/com/navercorp/pinpoint/web/vo/AgentInfo.java
index da6ca01..f31e515 100644
--- a/web/src/main/java/com/navercorp/pinpoint/web/vo/AgentInfo.java
+++ b/web/src/main/java/com/navercorp/pinpoint/web/vo/AgentInfo.java
@@ -22,6 +22,8 @@ import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 import com.navercorp.pinpoint.common.server.bo.AgentInfoBo;
 import com.navercorp.pinpoint.common.server.bo.JvmInfoBo;
 import com.navercorp.pinpoint.common.server.bo.ServerMetaDataBo;
+import com.navercorp.pinpoint.thrift.dto.command.TCommandTransfer;
+import com.navercorp.pinpoint.web.service.AgentServiceImpl;
 import com.navercorp.pinpoint.web.view.AgentInfoSerializer;
 
 /**
@@ -233,4 +235,14 @@ public class AgentInfo {
         sb.append('}');
         return sb.toString();
     }
+
+    public TCommandTransfer createCommandTransferObject(byte[] payload, AgentServiceImpl agentService) {
+        TCommandTransfer transferObject = new TCommandTransfer();
+        transferObject.setApplicationName(getApplicationName());
+        transferObject.setAgentId(getAgentId());
+        transferObject.setStartTime(getStartTimestamp());
+        transferObject.setPayload(payload);
+
+        return transferObject;
+    }
 }
diff --git a/web/src/main/java/com/navercorp/pinpoint/web/vo/Application.java b/web/src/main/java/com/navercorp/pinpoint/web/vo/Application.java
index 1abf05d..e539348 100644
--- a/web/src/main/java/com/navercorp/pinpoint/web/vo/Application.java
+++ b/web/src/main/java/com/navercorp/pinpoint/web/vo/Application.java
@@ -17,7 +17,11 @@
 package com.navercorp.pinpoint.web.vo;
 
 import com.fasterxml.jackson.databind.annotation.JsonSerialize;
+import com.navercorp.pinpoint.common.buffer.AutomaticBuffer;
+import com.navercorp.pinpoint.common.buffer.Buffer;
+import com.navercorp.pinpoint.common.hbase.HBaseTables;
 import com.navercorp.pinpoint.common.trace.ServiceType;
+import com.navercorp.pinpoint.web.dao.hbase.HbaseHostApplicationMapDao;
 import com.navercorp.pinpoint.web.view.ApplicationSerializer;
 
 /**
@@ -89,4 +93,12 @@ public final class Application {
     public String toString() {
         return name + "(" + serviceType.getDesc() + ":" + serviceType.getCode() + ")";
     }
+
+    public byte[] createKey(long time, HbaseHostApplicationMapDao hbaseHostApplicationMapDao) {
+        Buffer buffer = new AutomaticBuffer();
+        buffer.putPadString(getName(), HBaseTables.APPLICATION_NAME_MAX_LEN);
+        buffer.putShort(getServiceTypeCode());
+        buffer.putLong(time);
+        return buffer.getBuffer();
+    }
 }
diff --git a/web/src/main/java/com/navercorp/pinpoint/web/vo/Range.java b/web/src/main/java/com/navercorp/pinpoint/web/vo/Range.java
index b3a87e1..1562afa 100644
--- a/web/src/main/java/com/navercorp/pinpoint/web/vo/Range.java
+++ b/web/src/main/java/com/navercorp/pinpoint/web/vo/Range.java
@@ -17,6 +17,11 @@
 package com.navercorp.pinpoint.web.vo;
 
 import com.navercorp.pinpoint.common.util.DateUtils;
+import com.navercorp.pinpoint.web.applicationmap.link.CreateType;
+import com.navercorp.pinpoint.web.applicationmap.link.Link;
+import com.navercorp.pinpoint.web.applicationmap.link.LinkHistogramSummary;
+import com.navercorp.pinpoint.web.applicationmap.nodes.Node;
+import com.navercorp.pinpoint.web.service.ResponseTimeHistogramServiceImpl;
 
 import java.util.concurrent.TimeUnit;
 
@@ -113,4 +118,11 @@ public final class Range {
         sb.append('}');
         return sb.toString();
     }
+
+    public LinkHistogramSummary createEmptyLinkHistogramSummary(CreateType createType, Application fromApplication, Application toApplication, ResponseTimeHistogramServiceImpl responseTimeHistogramService) {
+        Node fromNode = new Node(fromApplication);
+        Node toNode = new Node(toApplication);
+        Link emptyLink = new Link(createType, fromNode, toNode, this);
+        return new LinkHistogramSummary(emptyLink);
+    }
 }
diff --git a/web/src/main/java/com/navercorp/pinpoint/web/vo/ResponseTime.java b/web/src/main/java/com/navercorp/pinpoint/web/vo/ResponseTime.java
index 65a6209..5311e53 100644
--- a/web/src/main/java/com/navercorp/pinpoint/web/vo/ResponseTime.java
+++ b/web/src/main/java/com/navercorp/pinpoint/web/vo/ResponseTime.java
@@ -17,8 +17,12 @@
 package com.navercorp.pinpoint.web.vo;
 
 import com.navercorp.pinpoint.common.trace.ServiceType;
+import com.navercorp.pinpoint.common.util.BytesUtils;
 import com.navercorp.pinpoint.web.applicationmap.histogram.Histogram;
 import com.navercorp.pinpoint.web.applicationmap.histogram.TimeHistogram;
+import com.navercorp.pinpoint.web.mapper.ResponseTimeMapper;
+import org.apache.hadoop.hbase.Cell;
+import org.apache.hadoop.hbase.util.Bytes;
 
 import java.util.*;
 
@@ -120,4 +124,16 @@ public class ResponseTime {
         sb.append('}');
         return sb.toString();
     }
+
+    public void recordColumn(Cell cell, ResponseTimeMapper responseTimeMapper) {
+
+        final byte[] qArray = cell.getQualifierArray();
+        final int qOffset = cell.getQualifierOffset();
+        short slotNumber = Bytes.toShort(qArray, qOffset);
+
+        // agentId should be added as data.
+        String agentId = Bytes.toString(qArray, qOffset + BytesUtils.SHORT_BYTE_LENGTH, cell.getQualifierLength() - BytesUtils.SHORT_BYTE_LENGTH);
+        long count = Bytes.toLong(cell.getValueArray(), cell.getValueOffset());
+        addResponseTime(agentId, slotNumber, count);
+    }
 }
diff --git a/web/src/main/java/com/navercorp/pinpoint/web/vo/SelectedScatterArea.java b/web/src/main/java/com/navercorp/pinpoint/web/vo/SelectedScatterArea.java
index 91d81e9..75eb0b4 100644
--- a/web/src/main/java/com/navercorp/pinpoint/web/vo/SelectedScatterArea.java
+++ b/web/src/main/java/com/navercorp/pinpoint/web/vo/SelectedScatterArea.java
@@ -16,6 +16,13 @@
 
 package com.navercorp.pinpoint.web.vo;
 
+import com.navercorp.pinpoint.common.buffer.AutomaticBuffer;
+import com.navercorp.pinpoint.common.buffer.Buffer;
+import com.navercorp.pinpoint.common.util.TransactionId;
+import com.navercorp.pinpoint.web.dao.hbase.HbaseApplicationTraceIndexDao;
+import org.apache.hadoop.hbase.filter.*;
+import org.apache.hadoop.hbase.util.Bytes;
+
 /**
  * Class representing the area selected in the scatter chart
  * 
@@ -95,4 +102,36 @@ public final class SelectedScatterArea {
         sb.append('}');
         return sb.toString();
     }
+
+    /**
+     * make the hbase filter for selecting values of y-axis(response time) in order to select transactions in scatter chart.
+     * 4 bytes for elapsed time should be attached for the prefix of column qualifier for to use this filter.
+     *
+     * @param offsetTransactionId
+     * @param offsetTransactionElapsed
+     * @param hbaseApplicationTraceIndexDao
+     * @return
+     */
+    public Filter makeResponseTimeFilter(final TransactionId offsetTransactionId, int offsetTransactionElapsed, HbaseApplicationTraceIndexDao hbaseApplicationTraceIndexDao) {
+        // filter by response time
+        ResponseTimeRange responseTimeRange = getResponseTimeRange();
+        byte[] responseFrom = Bytes.toBytes(responseTimeRange.getFrom());
+        byte[] responseTo = Bytes.toBytes(responseTimeRange.getTo());
+        FilterList filterList = new FilterList(FilterList.Operator.MUST_PASS_ALL);
+        filterList.addFilter(new QualifierFilter(CompareFilter.CompareOp.GREATER_OR_EQUAL, new BinaryPrefixComparator(responseFrom)));
+        filterList.addFilter(new QualifierFilter(CompareFilter.CompareOp.LESS_OR_EQUAL, new BinaryPrefixComparator(responseTo)));
+
+        // add offset
+        if (offsetTransactionId != null) {
+            final Buffer buffer = new AutomaticBuffer(32);
+            buffer.putInt(offsetTransactionElapsed);
+            buffer.putPrefixedString(offsetTransactionId.getAgentId());
+            buffer.putSVLong(offsetTransactionId.getAgentStartTime());
+            buffer.putVLong(offsetTransactionId.getTransactionSequence());
+            byte[] qualifierOffset = buffer.getBuffer();
+
+            filterList.addFilter(new QualifierFilter(CompareFilter.CompareOp.GREATER, new BinaryPrefixComparator(qualifierOffset)));
+        }
+        return filterList;
+    }
 }
diff --git a/web/src/main/java/com/navercorp/pinpoint/web/vo/callstacks/RecordFactory.java b/web/src/main/java/com/navercorp/pinpoint/web/vo/callstacks/RecordFactory.java
index fc9d47c..bb6cba1 100644
--- a/web/src/main/java/com/navercorp/pinpoint/web/vo/callstacks/RecordFactory.java
+++ b/web/src/main/java/com/navercorp/pinpoint/web/vo/callstacks/RecordFactory.java
@@ -64,7 +64,7 @@ public class RecordFactory {
         final Align align = node.getAlign();
         align.setId(getNextId());
 
-        final int parentId = getParentId(node);
+        final int parentId = node.getParentId(this);
         Api api = getApi(align);
         final String argument = getArgument(align);
         final Record record = new DefaultRecord(align.getDepth(),
@@ -136,7 +136,7 @@ public class RecordFactory {
         final Align align = node.getAlign();
         align.setId(getNextId());
 
-        final int parentId = getParentId(node);
+        final int parentId = node.getParentId(this);
 //        Api api = getApi(align);
 
         final Record record = new DefaultRecord(align.getDepth(),
@@ -189,19 +189,6 @@ public class RecordFactory {
         return new ParameterRecord(depth, getNextId(), parentId, method, argument);
     }
 
-    int getParentId(final CallTreeNode node) {
-        final CallTreeNode parent = node.getParent();
-        if (parent == null) {
-            if (!node.getAlign().isSpan()) {
-                throw new IllegalStateException("parent is null. node=" + node);
-            }
-
-            return 0;
-        }
-
-        return parent.getAlign().getId();
-    }
-
     private Api getApi(final Align align) {
 
         final AnnotationBo annotation = AnnotationUtils.findAnnotationBo(align.getAnnotationBoList(), AnnotationKey.API_METADATA);
diff --git a/web/src/main/java/com/navercorp/pinpoint/web/vo/scatter/Dot.java b/web/src/main/java/com/navercorp/pinpoint/web/vo/scatter/Dot.java
index 33d63cf..d5dfb78 100644
--- a/web/src/main/java/com/navercorp/pinpoint/web/vo/scatter/Dot.java
+++ b/web/src/main/java/com/navercorp/pinpoint/web/vo/scatter/Dot.java
@@ -16,10 +16,15 @@
 
 package com.navercorp.pinpoint.web.vo.scatter;
 
+import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 import com.navercorp.pinpoint.common.util.TransactionId;
 import com.navercorp.pinpoint.common.util.TransactionIdUtils;
+import com.navercorp.pinpoint.web.scatter.ScatterAgentMetaData;
 import com.navercorp.pinpoint.web.view.DotSerializer;
+import com.navercorp.pinpoint.web.view.ScatterDataSerializer;
+
+import java.io.IOException;
 
 @JsonSerialize(using = DotSerializer.class)
 public class Dot {
@@ -106,4 +111,24 @@ public class Dot {
         return sb.toString();
     }
 
+    public void writeDot(int thick, ScatterAgentMetaData metaData, JsonGenerator jgen, ScatterDataSerializer scatterDataSerializer) throws IOException {
+        jgen.writeStartArray();
+
+        jgen.writeNumber(getAcceptedTime());
+        jgen.writeNumber(getElapsedTime());
+
+        int agentId = metaData.getId(this);
+        jgen.writeNumber(agentId);
+
+        if (agentId == -1) {
+            jgen.writeString(getTransactionIdAsString());
+        } else {
+            jgen.writeNumber(getTransactionId().getTransactionSequence());
+        }
+
+        jgen.writeNumber(getSimpleExceptionCode());
+        jgen.writeNumber(thick);
+
+        jgen.writeEndArray();
+    }
 }
diff --git a/web/src/main/java/com/navercorp/pinpoint/web/vo/scatter/DotAgentInfo.java b/web/src/main/java/com/navercorp/pinpoint/web/vo/scatter/DotAgentInfo.java
index 2e0e1b5..2cc39b8 100644
--- a/web/src/main/java/com/navercorp/pinpoint/web/vo/scatter/DotAgentInfo.java
+++ b/web/src/main/java/com/navercorp/pinpoint/web/vo/scatter/DotAgentInfo.java
@@ -15,6 +15,11 @@
 
 package com.navercorp.pinpoint.web.vo.scatter;
 
+import com.fasterxml.jackson.core.JsonGenerator;
+import com.navercorp.pinpoint.web.view.ScatterAgentMetaDataSerializer;
+
+import java.io.IOException;
+
 /**
  * @author Taejin Koo
  */
@@ -74,4 +79,13 @@ public class DotAgentInfo {
         return result;
     }
 
+    public void writeMetadata(Integer key, JsonGenerator jgen, ScatterAgentMetaDataSerializer scatterAgentMetaDataSerializer) throws IOException {
+        jgen.writeArrayFieldStart(key.toString());
+
+        jgen.writeString(getAgentId());
+        jgen.writeString(getTransactionAgentId());
+        jgen.writeNumber(getTransactionAgentStartTime());
+
+        jgen.writeEndArray();
+    }
 }
diff --git a/web/src/test/java/com/navercorp/pinpoint/web/applicationmap/ApplicationMapBuilderTestHelper.java b/web/src/test/java/com/navercorp/pinpoint/web/applicationmap/ApplicationMapBuilderTestHelper.java
index b5ed9f9..f06c549 100644
--- a/web/src/test/java/com/navercorp/pinpoint/web/applicationmap/ApplicationMapBuilderTestHelper.java
+++ b/web/src/test/java/com/navercorp/pinpoint/web/applicationmap/ApplicationMapBuilderTestHelper.java
@@ -80,13 +80,13 @@ public class ApplicationMapBuilderTestHelper {
         }
         linkDataDuplexMap.addTargetLinkData(createUserTargetLinkData(calleeDepth - 1));
 
-        linkDataDuplexMap.addSourceLinkData(createTerminalSourceLinkData(0));
+        createTerminalSourceLinkData(0).addSourceLinkData(linkDataDuplexMap);
 
         for (int i = 0; i < callerDepth - 1; i++) {
             LinkData sourceLinkData = createSourceLinkData(i);
-            linkDataDuplexMap.addSourceLinkData(sourceLinkData);
+            sourceLinkData.addSourceLinkData(linkDataDuplexMap);
         }
-        linkDataDuplexMap.addSourceLinkData(createUnknownSourceLinkData(callerDepth - 1));
+        createUnknownSourceLinkData(callerDepth - 1).addSourceLinkData(linkDataDuplexMap);
         return linkDataDuplexMap;
     }
 
diff --git a/web/src/test/java/com/navercorp/pinpoint/web/applicationmap/appender/server/ServerInfoAppenderTest.java b/web/src/test/java/com/navercorp/pinpoint/web/applicationmap/appender/server/ServerInfoAppenderTest.java
index 945bba9..eeef848 100644
--- a/web/src/test/java/com/navercorp/pinpoint/web/applicationmap/appender/server/ServerInfoAppenderTest.java
+++ b/web/src/test/java/com/navercorp/pinpoint/web/applicationmap/appender/server/ServerInfoAppenderTest.java
@@ -163,7 +163,7 @@ public class ServerInfoAppenderTest {
                 "wasAgent", ServiceType.TEST_STAND_ALONE,
                 "terminalNodeAddress", terminalType,
                 System.currentTimeMillis(), terminalType.getHistogramSchema().getNormalSlot().getSlotTime(), 1);
-        linkDataDuplexMap.addSourceLinkData(linkData);
+        linkData.addSourceLinkData(linkDataDuplexMap);
         // When
         serverInfoAppender.appendServerInfo(range, nodeList, linkDataDuplexMap);
         // Then
@@ -192,7 +192,7 @@ public class ServerInfoAppenderTest {
                 "wasAgent", ServiceType.TEST_STAND_ALONE,
                 "terminalNodeAddress2", terminalType,
                 System.currentTimeMillis(), terminalType.getHistogramSchema().getNormalSlot().getSlotTime(), 1);
-        linkDataDuplexMap.addSourceLinkData(linkData);
+        linkData.addSourceLinkData(linkDataDuplexMap);
         // When
         serverInfoAppender.appendServerInfo(range, nodeList, linkDataDuplexMap);
         // Then
diff --git a/web/src/test/java/com/navercorp/pinpoint/web/calltree/span/SpanAlignerTest.java b/web/src/test/java/com/navercorp/pinpoint/web/calltree/span/SpanAlignerTest.java
index 98bf18f..8d6df5a 100644
--- a/web/src/test/java/com/navercorp/pinpoint/web/calltree/span/SpanAlignerTest.java
+++ b/web/src/test/java/com/navercorp/pinpoint/web/calltree/span/SpanAlignerTest.java
@@ -23,8 +23,6 @@ import org.junit.Test;
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.junit.Assert.*;
-
 /**
  * @author jaehong.kim
  */
@@ -43,9 +41,9 @@ public class SpanAlignerTest {
         span.setParentSpanId(-1);
         span.setSpanId(1);
 
-        span.addSpanEvent(makeSpanEvent(0, 1, -1));
-        span.addSpanEvent(makeSpanEvent(1, 2, -1));
-        span.addSpanEvent(makeSpanEvent(2, 3, -1));
+        makeSpanEvent(0, 1, -1).addSpanEvent(span);
+        makeSpanEvent(1, 2, -1).addSpanEvent(span);
+        makeSpanEvent(2, 3, -1).addSpanEvent(span);
         list.add(span);
 
         SpanAligner spanAligner = new SpanAligner(list, 1);
@@ -70,17 +68,17 @@ public class SpanAlignerTest {
         span.setParentSpanId(-1);
         span.setSpanId(1);
 
-        span.addSpanEvent(makeSpanEvent(0, 1, -1));
-        span.addSpanEvent(makeSpanEvent(1, 2, -1));
-        span.addSpanEvent(makeSpanEvent(2, 3, 100));
+        makeSpanEvent(0, 1, -1).addSpanEvent(span);
+        makeSpanEvent(1, 2, -1).addSpanEvent(span);
+        makeSpanEvent(2, 3, 100).addSpanEvent(span);
         list.add(span);
 
         SpanBo nextSpan = new SpanBo();
         nextSpan.setParentSpanId(1);
         nextSpan.setSpanId(100);
-        nextSpan.addSpanEvent(makeSpanEvent(0, 1, -1));
-        nextSpan.addSpanEvent(makeSpanEvent(1, 2, -1));
-        nextSpan.addSpanEvent(makeSpanEvent(2, 3, -1));
+        makeSpanEvent(0, 1, -1).addSpanEvent(nextSpan);
+        makeSpanEvent(1, 2, -1).addSpanEvent(nextSpan);
+        makeSpanEvent(2, 3, -1).addSpanEvent(nextSpan);
         list.add(nextSpan);
 
         SpanAligner spanAligner = new SpanAligner(list, 1);
@@ -101,9 +99,9 @@ public class SpanAlignerTest {
         span.setParentSpanId(-1);
         span.setSpanId(1);
 
-        span.addSpanEvent(makeSpanEvent(0, 1, -1));
-        span.addSpanEvent(makeSpanEvent(1, 2, -1));
-        span.addSpanEvent(makeSpanEvent(2, 3, 100));
+        makeSpanEvent(0, 1, -1).addSpanEvent(span);
+        makeSpanEvent(1, 2, -1).addSpanEvent(span);
+        makeSpanEvent(2, 3, 100).addSpanEvent(span);
         list.add(span);
 
         SpanAligner spanAligner = new SpanAligner(list, 1);
@@ -124,8 +122,8 @@ public class SpanAlignerTest {
         span.setParentSpanId(1);
         span.setSpanId(2);
 
-        span.addSpanEvent(makeSpanEvent(0, 1, -1));
-        span.addSpanEvent(makeSpanEvent(1, 2, -1));
+        makeSpanEvent(0, 1, -1).addSpanEvent(span);
+        makeSpanEvent(1, 2, -1).addSpanEvent(span);
         list.add(span);
 
         SpanAligner spanAligner = new SpanAligner(list, 1);
@@ -145,16 +143,16 @@ public class SpanAlignerTest {
         rootSpan1.setParentSpanId(-1);
         rootSpan1.setSpanId(2);
 
-        rootSpan1.addSpanEvent(makeSpanEvent(0, 1, -1));
-        rootSpan1.addSpanEvent(makeSpanEvent(1, 2, -1));
+        makeSpanEvent(0, 1, -1).addSpanEvent(rootSpan1);
+        makeSpanEvent(1, 2, -1).addSpanEvent(rootSpan1);
         list.add(rootSpan1);
 
         SpanBo rootSpan2 = new SpanBo();
         rootSpan2.setParentSpanId(-1);
         rootSpan2.setSpanId(3);
 
-        rootSpan2.addSpanEvent(makeSpanEvent(0, 1, -1));
-        rootSpan2.addSpanEvent(makeSpanEvent(1, 1, -1));
+        makeSpanEvent(0, 1, -1).addSpanEvent(rootSpan2);
+        makeSpanEvent(1, 1, -1).addSpanEvent(rootSpan2);
         list.add(rootSpan2);
 
         SpanAligner spanAligner = new SpanAligner(list, 1);
@@ -180,8 +178,8 @@ public class SpanAlignerTest {
         span.setSpanId(1);
         span.setElapsed(2);
 
-        span.addSpanEvent(makeSpanEvent(0, 1, -1));
-        span.addSpanEvent(makeSpanEvent(1, 2, 100, 2));
+        makeSpanEvent(0, 1, -1).addSpanEvent(span);
+        makeSpanEvent(1, 2, 100, 2).addSpanEvent(span);
         list.add(span);
 
         // missing middle span
@@ -192,8 +190,8 @@ public class SpanAlignerTest {
         nextSpan.setSpanId(200);
         nextSpan.setElapsed(1);
 
-        nextSpan.addSpanEvent(makeSpanEvent(0, 1, -1));
-        nextSpan.addSpanEvent(makeSpanEvent(1, 2, -1));
+        makeSpanEvent(0, 1, -1).addSpanEvent(nextSpan);
+        makeSpanEvent(1, 2, -1).addSpanEvent(nextSpan);
 
         list.add(nextSpan);
 
@@ -216,8 +214,8 @@ public class SpanAlignerTest {
         span.setSpanId(1);
         span.setStartTime(1);
 
-        span.addSpanEvent(makeSpanEvent(0, 1, -1));
-        span.addSpanEvent(makeSpanEvent(1, 2, 100, 2));
+        makeSpanEvent(0, 1, -1).addSpanEvent(span);
+        makeSpanEvent(1, 2, 100, 2).addSpanEvent(span);
         list.add(span);
 
         // missing middle span
@@ -228,8 +226,8 @@ public class SpanAlignerTest {
         nextSpan.setSpanId(200);
         nextSpan.setStartTime(0);  // too fast
 
-        nextSpan.addSpanEvent(makeSpanEvent(0, 1, -1));
-        nextSpan.addSpanEvent(makeSpanEvent(1, 2, -1));
+        makeSpanEvent(0, 1, -1).addSpanEvent(nextSpan);
+        makeSpanEvent(1, 2, -1).addSpanEvent(nextSpan);
 
         list.add(nextSpan);
 
@@ -252,9 +250,9 @@ public class SpanAlignerTest {
         span.setParentSpanId(0);
         span.setSpanId(1);
 
-        span.addSpanEvent(makeSpanEvent(0, 1, -1));
-        span.addSpanEvent(makeSpanEvent(1, 2, -1));
-        span.addSpanEvent(makeSpanEvent(2, 3, 100, 3));
+        makeSpanEvent(0, 1, -1).addSpanEvent(span);
+        makeSpanEvent(1, 2, -1).addSpanEvent(span);
+        makeSpanEvent(2, 3, 100, 3).addSpanEvent(span);
         list.add(span);
 
         SpanBo duplicatedSpan = new SpanBo();
@@ -262,9 +260,9 @@ public class SpanAlignerTest {
         duplicatedSpan.setSpanId(1);
         duplicatedSpan.setElapsed(2);
 
-        duplicatedSpan.addSpanEvent(makeSpanEvent(0, 1, -1));
-        duplicatedSpan.addSpanEvent(makeSpanEvent(1, 2, -1));
-        duplicatedSpan.addSpanEvent(makeSpanEvent(2, 3, 200));
+        makeSpanEvent(0, 1, -1).addSpanEvent(duplicatedSpan);
+        makeSpanEvent(1, 2, -1).addSpanEvent(duplicatedSpan);
+        makeSpanEvent(2, 3, 200).addSpanEvent(duplicatedSpan);
         list.add(duplicatedSpan);
 
         SpanBo nextSpan = new SpanBo();
@@ -272,9 +270,9 @@ public class SpanAlignerTest {
         nextSpan.setSpanId(200);
         nextSpan.setElapsed(1);
 
-        nextSpan.addSpanEvent(makeSpanEvent(0, 1, -1));
-        nextSpan.addSpanEvent(makeSpanEvent(1, 1, -1));
-        nextSpan.addSpanEvent(makeSpanEvent(2, 2, -1));
+        makeSpanEvent(0, 1, -1).addSpanEvent(nextSpan);
+        makeSpanEvent(1, 1, -1).addSpanEvent(nextSpan);
+        makeSpanEvent(2, 2, -1).addSpanEvent(nextSpan);
         list.add(nextSpan);
 
         SpanAligner spanAligner = new SpanAligner(list, 1);
@@ -300,18 +298,18 @@ public class SpanAlignerTest {
         span.setParentSpanId(0);
         span.setSpanId(1);
 
-        span.addSpanEvent(makeSpanEvent(0, 1, -1));
-        span.addSpanEvent(makeSpanEvent(1, 2, -1));
-        span.addSpanEvent(makeSpanEvent(2, 3, 100, 3));
+        makeSpanEvent(0, 1, -1).addSpanEvent(span);
+        makeSpanEvent(1, 2, -1).addSpanEvent(span);
+        makeSpanEvent(2, 3, 100, 3).addSpanEvent(span);
         list.add(span);
 
         SpanBo secondSpan = new SpanBo();
         secondSpan.setParentSpanId(0);
         secondSpan.setSpanId(100);
 
-        secondSpan.addSpanEvent(makeSpanEvent(0, 1, -1));
-        secondSpan.addSpanEvent(makeSpanEvent(1, 2, -1));
-        secondSpan.addSpanEvent(makeSpanEvent(2, 3, -1));
+        makeSpanEvent(0, 1, -1).addSpanEvent(secondSpan);
+        makeSpanEvent(1, 2, -1).addSpanEvent(secondSpan);
+        makeSpanEvent(2, 3, -1).addSpanEvent(secondSpan);
         list.add(secondSpan);
 
         SpanAligner spanAligner = new SpanAligner(list, 1);
@@ -331,9 +329,9 @@ public class SpanAlignerTest {
         span.setParentSpanId(-1);
         span.setSpanId(1);
 
-        span.addSpanEvent(makeSpanEvent(0, 1, -1));
+        makeSpanEvent(0, 1, -1).addSpanEvent(span);
         // missing span event
-        span.addSpanEvent(makeSpanEvent(2, 3, 100, 3));
+        makeSpanEvent(2, 3, 100, 3).addSpanEvent(span);
         list.add(span);
 
         SpanAligner spanAligner = new SpanAligner(list, 1);
@@ -355,16 +353,16 @@ public class SpanAlignerTest {
         span.setParentSpanId(-1);
         span.setSpanId(1);
 
-        span.addSpanEvent(makeSpanEvent(0, 1, -1));
+        makeSpanEvent(0, 1, -1).addSpanEvent(span);
         // missing span event
-        span.addSpanEvent(makeSpanEvent(2, 3, 100, 3));
+        makeSpanEvent(2, 3, 100, 3).addSpanEvent(span);
         list.add(span);
 
         SpanBo nextSpan = new SpanBo();
         nextSpan.setParentSpanId(1);
         nextSpan.setSpanId(100);
 
-        nextSpan.addSpanEvent(makeSpanEvent(0, 1, -1));
+        makeSpanEvent(0, 1, -1).addSpanEvent(nextSpan);
         list.add(nextSpan);
 
         SpanAligner spanAligner = new SpanAligner(list, 1);
@@ -393,16 +391,16 @@ public class SpanAlignerTest {
         span.setParentSpanId(100);
         span.setSpanId(1);
 
-        span.addSpanEvent(makeSpanEvent(0, 1, -1));
-        span.addSpanEvent(makeSpanEvent(1, 2, 100));
+        makeSpanEvent(0, 1, -1).addSpanEvent(span);
+        makeSpanEvent(1, 2, 100).addSpanEvent(span);
         list.add(span);
 
         SpanBo nextSpan = new SpanBo();
         nextSpan.setParentSpanId(1);
         nextSpan.setSpanId(100);
 
-        nextSpan.addSpanEvent(makeSpanEvent(0, 1, -1));
-        nextSpan.addSpanEvent(makeSpanEvent(0, 2, 1));
+        makeSpanEvent(0, 1, -1).addSpanEvent(nextSpan);
+        makeSpanEvent(0, 2, 1).addSpanEvent(nextSpan);
         list.add(nextSpan);
 
         SpanAligner spanAligner = new SpanAligner(list, 1);
diff --git a/web/src/test/java/com/navercorp/pinpoint/web/filter/LinkFilterTest.java b/web/src/test/java/com/navercorp/pinpoint/web/filter/LinkFilterTest.java
index 72644fc..a595501 100644
--- a/web/src/test/java/com/navercorp/pinpoint/web/filter/LinkFilterTest.java
+++ b/web/src/test/java/com/navercorp/pinpoint/web/filter/LinkFilterTest.java
@@ -213,7 +213,7 @@ public class LinkFilterTest {
         rpcSpanEvent.setServiceType(RPC_TYPE_CODE);
         rpcSpanEvent.setDestinationId(rpcHost);
         rpcSpanEvent.setAnnotationBoList(Collections.singletonList(rpcAnnotation));
-        spanBo.addSpanEvent(rpcSpanEvent);
+        rpcSpanEvent.addSpanEvent(spanBo);
         Assert.assertTrue(linkFilter.include(Collections.singletonList(spanBo)));
     }
 
@@ -326,7 +326,7 @@ public class LinkFilterTest {
         rpcSpanEvent.setServiceType(RPC_TYPE_CODE);
         rpcSpanEvent.setDestinationId(rpcHost);
         rpcSpanEvent.setAnnotationBoList(Collections.singletonList(rpcAnnotation));
-        fromSpan.addSpanEvent(rpcSpanEvent);
+        rpcSpanEvent.addSpanEvent(fromSpan);
         // Reject - filter hint empty
         Assert.assertFalse(emptyHintLinkFilter.include(Collections.singletonList(fromSpan)));
         // Reject - filter hint does not match
@@ -372,7 +372,7 @@ public class LinkFilterTest {
         SpanEventBo spanEventDestinationA = new SpanEventBo();
         spanEventDestinationA.setDestinationId(destinationA);
         spanEventDestinationA.setServiceType(BACKEND_TYPE_CODE);
-        matchingSpan.addSpanEvent(spanEventDestinationA);
+        spanEventDestinationA.addSpanEvent(matchingSpan);
         Assert.assertTrue(linkFilter.include(Collections.singletonList(matchingSpan)));
 
         SpanBo unmatchingSpan = new SpanBo();
@@ -381,7 +381,7 @@ public class LinkFilterTest {
         SpanEventBo spanEventDestinationB = new SpanEventBo();
         spanEventDestinationB.setDestinationId(destinationB);
         spanEventDestinationB.setServiceType(BACKEND_TYPE_CODE);
-        unmatchingSpan.addSpanEvent(spanEventDestinationB);
+        spanEventDestinationB.addSpanEvent(unmatchingSpan);
         Assert.assertFalse(linkFilter.include(Collections.singletonList(unmatchingSpan)));
 
         Assert.assertTrue(linkFilter.include(Arrays.asList(matchingSpan, unmatchingSpan)));
@@ -418,7 +418,7 @@ public class LinkFilterTest {
         SpanEventBo spanEventDestinationA = new SpanEventBo();
         spanEventDestinationA.setDestinationId(messageQueueA);
         spanEventDestinationA.setServiceType(MESSAGE_QUEUE_TYPE_CODE);
-        matchingSpan.addSpanEvent(spanEventDestinationA);
+        spanEventDestinationA.addSpanEvent(matchingSpan);
         Assert.assertTrue(linkFilter.include(Collections.singletonList(matchingSpan)));
 
         SpanBo unmatchingSpan = new SpanBo();
@@ -427,7 +427,7 @@ public class LinkFilterTest {
         SpanEventBo spanEventDestinationB = new SpanEventBo();
         spanEventDestinationB.setDestinationId(messageQueueB);
         spanEventDestinationB.setServiceType(MESSAGE_QUEUE_TYPE_CODE);
-        unmatchingSpan.addSpanEvent(spanEventDestinationB);
+        spanEventDestinationB.addSpanEvent(unmatchingSpan);
         Assert.assertFalse(linkFilter.include(Collections.singletonList(unmatchingSpan)));
 
         Assert.assertTrue(linkFilter.include(Arrays.asList(matchingSpan, unmatchingSpan)));
diff --git a/web/src/test/java/com/navercorp/pinpoint/web/filter/RpcURLPatternFilterTest.java b/web/src/test/java/com/navercorp/pinpoint/web/filter/RpcURLPatternFilterTest.java
index e229822..fb6c003 100644
--- a/web/src/test/java/com/navercorp/pinpoint/web/filter/RpcURLPatternFilterTest.java
+++ b/web/src/test/java/com/navercorp/pinpoint/web/filter/RpcURLPatternFilterTest.java
@@ -169,7 +169,7 @@ public class RpcURLPatternFilterTest {
             AnnotationBo testRpcAnnotationBo = new AnnotationBo(TEST_RPC_URL_ANNOTATION_KEY.getCode(), rpcUrl);
             testRpcSpanEvent.setAnnotationBoList(Collections.singletonList(testRpcAnnotationBo));
             SpanBo spanBo = new SpanBo();
-            spanBo.addSpanEvent(testRpcSpanEvent);
+            testRpcSpanEvent.addSpanEvent(spanBo);
             spanBos.add(spanBo);
         }
         return spanBos;
diff --git a/web/src/test/java/com/navercorp/pinpoint/web/mapper/ResponseTimeMapperTest.java b/web/src/test/java/com/navercorp/pinpoint/web/mapper/ResponseTimeMapperTest.java
index 13436b1..97ef1ad 100644
--- a/web/src/test/java/com/navercorp/pinpoint/web/mapper/ResponseTimeMapperTest.java
+++ b/web/src/test/java/com/navercorp/pinpoint/web/mapper/ResponseTimeMapperTest.java
@@ -51,7 +51,7 @@ public class ResponseTimeMapperTest {
 
         ResponseTimeMapper responseTimeMapper = new ResponseTimeMapper();
         ResponseTime responseTime = new ResponseTime("applicationName", ServiceType.STAND_ALONE, System.currentTimeMillis());
-        responseTimeMapper.recordColumn(responseTime, mockCell);
+        responseTime.recordColumn(mockCell, responseTimeMapper);
 
         Histogram agentHistogram = responseTime.findHistogram("agent");
         long fastCount = agentHistogram.getFastCount();
diff --git a/web/src/test/java/com/navercorp/pinpoint/web/mapper/SpanMapperV2Test.java b/web/src/test/java/com/navercorp/pinpoint/web/mapper/SpanMapperV2Test.java
index 9e913ef..f683978 100644
--- a/web/src/test/java/com/navercorp/pinpoint/web/mapper/SpanMapperV2Test.java
+++ b/web/src/test/java/com/navercorp/pinpoint/web/mapper/SpanMapperV2Test.java
@@ -43,7 +43,7 @@ public class SpanMapperV2Test {
         firstSpanEventBo.setServiceType((short) 1003);
         firstSpanEventBo.setSequence((short) 0);
 
-        span.addSpanEvent(firstSpanEventBo);
+        firstSpanEventBo.addSpanEvent(span);
 
         //// next
         SpanEventBo nextSpanEventBo = new SpanEventBo();
@@ -52,7 +52,7 @@ public class SpanMapperV2Test {
         nextSpanEventBo.setSequence((short) 1);
 
 
-        span.addSpanEvent(nextSpanEventBo);
+        nextSpanEventBo.addSpanEvent(span);
 
         SpanEncodingContext<SpanBo> encodingContext = new SpanEncodingContext<>(span);
         SpanEncoder encoder = new SpanEncoderV0();
diff --git a/web/src/test/java/com/navercorp/pinpoint/web/service/FilteredMapServiceImplTest.java b/web/src/test/java/com/navercorp/pinpoint/web/service/FilteredMapServiceImplTest.java
index 609e530..ace4148 100644
--- a/web/src/test/java/com/navercorp/pinpoint/web/service/FilteredMapServiceImplTest.java
+++ b/web/src/test/java/com/navercorp/pinpoint/web/service/FilteredMapServiceImplTest.java
@@ -172,12 +172,12 @@ public class FilteredMapServiceImplTest {
         SpanEventBo rootRpcSpanEvent = new TestTraceUtils.RpcSpanEventBuilder("www.foo.com/bar", 10, 190)
                 .nextSpanId(appASpanId)
                 .build();
-        rootSpan.addSpanEvent(rootRpcSpanEvent);
+        rootRpcSpanEvent.addSpanEvent(rootSpan);
         // app A -> cache span event
         int cacheStartElapsed = 20;
         int cacheEndElapsed = 130;
         SpanEventBo appACacheSpanEvent = new TestTraceUtils.CacheSpanEventBuilder("CacheName", "1.1.1.1", cacheStartElapsed, cacheEndElapsed).build();
-        appASpan.addSpanEvent(appACacheSpanEvent);
+        appACacheSpanEvent.addSpanEvent(appASpan);
 
         when(traceDao.selectAllSpans(anyList())).thenReturn(Collections.singletonList(Arrays.asList(rootSpan, appASpan)));
 
diff --git a/web/src/test/java/com/navercorp/pinpoint/web/service/map/FilteredMapBuilderTest.java b/web/src/test/java/com/navercorp/pinpoint/web/service/map/FilteredMapBuilderTest.java
index dd3669c..4871043 100644
--- a/web/src/test/java/com/navercorp/pinpoint/web/service/map/FilteredMapBuilderTest.java
+++ b/web/src/test/java/com/navercorp/pinpoint/web/service/map/FilteredMapBuilderTest.java
@@ -93,12 +93,12 @@ public class FilteredMapBuilderTest {
         SpanEventBo rootRpcSpanEvent = new TestTraceUtils.RpcSpanEventBuilder("www.foo.com/bar", 10, 190)
                 .nextSpanId(appASpanId)
                 .build();
-        rootSpan.addSpanEvent(rootRpcSpanEvent);
+        rootRpcSpanEvent.addSpanEvent(rootSpan);
         // app A -> cache span event
         int cacheStartElapsed = 20;
         int cacheEndElapsed = 130;
         SpanEventBo appACacheSpanEvent = new TestTraceUtils.CacheSpanEventBuilder("CacheName", "1.1.1.1", cacheStartElapsed, cacheEndElapsed).build();
-        appASpan.addSpanEvent(appACacheSpanEvent);
+        appACacheSpanEvent.addSpanEvent(appASpan);
 
         // When
         builder.addTransaction(Arrays.asList(rootSpan, appASpan));
